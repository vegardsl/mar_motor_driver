
mar_motor_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00802000  000041b0  00004244  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006d0  0080213c  0080213c  00004380  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000043dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00004420  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000099b9  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e02  00000000  00000000  0000e419  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007209  00000000  00000000  0001021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000189c  00000000  00000000  00017424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033336  00000000  00000000  00018cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005099  00000000  00000000  0004bff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000598  00000000  00000000  00051090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000beba  00000000  00000000  00051628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	29 c1       	rjmp	.+594    	; 0x258 <__bad_interrupt>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c1       	rjmp	.+586    	; 0x258 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c1       	rjmp	.+578    	; 0x258 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c1       	rjmp	.+574    	; 0x258 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1d c1       	rjmp	.+570    	; 0x258 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1b c1       	rjmp	.+566    	; 0x258 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c1       	rjmp	.+562    	; 0x258 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c1       	rjmp	.+558    	; 0x258 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c1       	rjmp	.+554    	; 0x258 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c1       	rjmp	.+550    	; 0x258 <__bad_interrupt>
      32:	00 00       	nop
      34:	11 c1       	rjmp	.+546    	; 0x258 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_14>
      3c:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_15>
      40:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_16>
      44:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_17>
      48:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_18>
      4c:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_19>
      50:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_20>
      54:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_21>
      58:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_22>
      5c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_23>
      60:	fb c0       	rjmp	.+502    	; 0x258 <__bad_interrupt>
      62:	00 00       	nop
      64:	f9 c0       	rjmp	.+498    	; 0x258 <__bad_interrupt>
      66:	00 00       	nop
      68:	f7 c0       	rjmp	.+494    	; 0x258 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f5 c0       	rjmp	.+490    	; 0x258 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f3 c0       	rjmp	.+486    	; 0x258 <__bad_interrupt>
      72:	00 00       	nop
      74:	f1 c0       	rjmp	.+482    	; 0x258 <__bad_interrupt>
      76:	00 00       	nop
      78:	ef c0       	rjmp	.+478    	; 0x258 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ed c0       	rjmp	.+474    	; 0x258 <__bad_interrupt>
      7e:	00 00       	nop
      80:	eb c0       	rjmp	.+470    	; 0x258 <__bad_interrupt>
      82:	00 00       	nop
      84:	e9 c0       	rjmp	.+466    	; 0x258 <__bad_interrupt>
      86:	00 00       	nop
      88:	e7 c0       	rjmp	.+462    	; 0x258 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e5 c0       	rjmp	.+458    	; 0x258 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e3 c0       	rjmp	.+454    	; 0x258 <__bad_interrupt>
      92:	00 00       	nop
      94:	e1 c0       	rjmp	.+450    	; 0x258 <__bad_interrupt>
      96:	00 00       	nop
      98:	df c0       	rjmp	.+446    	; 0x258 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dd c0       	rjmp	.+442    	; 0x258 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	db c0       	rjmp	.+438    	; 0x258 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d9 c0       	rjmp	.+434    	; 0x258 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d7 c0       	rjmp	.+430    	; 0x258 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d5 c0       	rjmp	.+426    	; 0x258 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d3 c0       	rjmp	.+422    	; 0x258 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d1 c0       	rjmp	.+418    	; 0x258 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cf c0       	rjmp	.+414    	; 0x258 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__vector_47>
      c0:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_48>
      c4:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__vector_49>
      c8:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_50>
      cc:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_51>
      d0:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__vector_52>
      d4:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__vector_53>
      d8:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_54>
      dc:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__vector_55>
      e0:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_56>
      e4:	b9 c0       	rjmp	.+370    	; 0x258 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b7 c0       	rjmp	.+366    	; 0x258 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b5 c0       	rjmp	.+362    	; 0x258 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b3 c0       	rjmp	.+358    	; 0x258 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b1 c0       	rjmp	.+354    	; 0x258 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	af c0       	rjmp	.+350    	; 0x258 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ad c0       	rjmp	.+346    	; 0x258 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ab c0       	rjmp	.+342    	; 0x258 <__bad_interrupt>
     102:	00 00       	nop
     104:	a9 c0       	rjmp	.+338    	; 0x258 <__bad_interrupt>
     106:	00 00       	nop
     108:	a7 c0       	rjmp	.+334    	; 0x258 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a5 c0       	rjmp	.+330    	; 0x258 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a3 c0       	rjmp	.+326    	; 0x258 <__bad_interrupt>
     112:	00 00       	nop
     114:	a1 c0       	rjmp	.+322    	; 0x258 <__bad_interrupt>
     116:	00 00       	nop
     118:	9f c0       	rjmp	.+318    	; 0x258 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9d c0       	rjmp	.+314    	; 0x258 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9b c0       	rjmp	.+310    	; 0x258 <__bad_interrupt>
     122:	00 00       	nop
     124:	99 c0       	rjmp	.+306    	; 0x258 <__bad_interrupt>
     126:	00 00       	nop
     128:	97 c0       	rjmp	.+302    	; 0x258 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	95 c0       	rjmp	.+298    	; 0x258 <__bad_interrupt>
     12e:	00 00       	nop
     130:	93 c0       	rjmp	.+294    	; 0x258 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__vector_77>
     138:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_78>
     13c:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_79>
     140:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_80>
     144:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_81>
     148:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_82>
     14c:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_83>
     150:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_84>
     154:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_85>
     158:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_86>
     15c:	7d c0       	rjmp	.+250    	; 0x258 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7b c0       	rjmp	.+246    	; 0x258 <__bad_interrupt>
     162:	00 00       	nop
     164:	79 c0       	rjmp	.+242    	; 0x258 <__bad_interrupt>
     166:	00 00       	nop
     168:	77 c0       	rjmp	.+238    	; 0x258 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	75 c0       	rjmp	.+234    	; 0x258 <__bad_interrupt>
     16e:	00 00       	nop
     170:	73 c0       	rjmp	.+230    	; 0x258 <__bad_interrupt>
     172:	00 00       	nop
     174:	71 c0       	rjmp	.+226    	; 0x258 <__bad_interrupt>
     176:	00 00       	nop
     178:	6f c0       	rjmp	.+222    	; 0x258 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6d c0       	rjmp	.+218    	; 0x258 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6b c0       	rjmp	.+214    	; 0x258 <__bad_interrupt>
     182:	00 00       	nop
     184:	69 c0       	rjmp	.+210    	; 0x258 <__bad_interrupt>
     186:	00 00       	nop
     188:	67 c0       	rjmp	.+206    	; 0x258 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	65 c0       	rjmp	.+202    	; 0x258 <__bad_interrupt>
     18e:	00 00       	nop
     190:	63 c0       	rjmp	.+198    	; 0x258 <__bad_interrupt>
     192:	00 00       	nop
     194:	61 c0       	rjmp	.+194    	; 0x258 <__bad_interrupt>
     196:	00 00       	nop
     198:	5f c0       	rjmp	.+190    	; 0x258 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5d c0       	rjmp	.+186    	; 0x258 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5b c0       	rjmp	.+182    	; 0x258 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	59 c0       	rjmp	.+178    	; 0x258 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	57 c0       	rjmp	.+174    	; 0x258 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	55 c0       	rjmp	.+170    	; 0x258 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_108>
     1b4:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_109>
     1b8:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_110>
     1bc:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_111>
     1c0:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__vector_112>
     1c4:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_113>
     1c8:	47 c0       	rjmp	.+142    	; 0x258 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	45 c0       	rjmp	.+138    	; 0x258 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	43 c0       	rjmp	.+134    	; 0x258 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	41 c0       	rjmp	.+130    	; 0x258 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3f c0       	rjmp	.+126    	; 0x258 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3d c0       	rjmp	.+122    	; 0x258 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3b c0       	rjmp	.+118    	; 0x258 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	39 c0       	rjmp	.+114    	; 0x258 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	37 c0       	rjmp	.+110    	; 0x258 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	35 c0       	rjmp	.+106    	; 0x258 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	33 c0       	rjmp	.+102    	; 0x258 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__vector_125>
     1f8:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_126>
     1fc:	7f 10       	cpse	r7, r15
     1fe:	82 10       	cpse	r8, r2
     200:	85 10       	cpse	r8, r5
     202:	88 10       	cpse	r8, r8
     204:	8b 10       	cpse	r8, r11
     206:	8e 10       	cpse	r8, r14
     208:	91 10       	cpse	r9, r1

0000020a <__trampolines_end>:
     20a:	63 64       	ori	r22, 0x43	; 67
     20c:	69 6e       	ori	r22, 0xE9	; 233
     20e:	6f 70       	andi	r22, 0x0F	; 15
     210:	73 75       	andi	r23, 0x53	; 83
     212:	78 58       	subi	r23, 0x88	; 136
     214:	5b 00       	.word	0x005b	; ????

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df e5       	ldi	r29, 0x5F	; 95
     220:	de bf       	out	0x3e, r29	; 62
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	11 e2       	ldi	r17, 0x21	; 33
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	e0 eb       	ldi	r30, 0xB0	; 176
     22e:	f1 e4       	ldi	r31, 0x41	; 65
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	ac 33       	cpi	r26, 0x3C	; 60
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	28 e2       	ldi	r18, 0x28	; 40
     242:	ac e3       	ldi	r26, 0x3C	; 60
     244:	b1 e2       	ldi	r27, 0x21	; 33
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	ac 30       	cpi	r26, 0x0C	; 12
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>
     250:	0e 94 2d 18 	call	0x305a	; 0x305a <main>
     254:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <_exit>

00000258 <__bad_interrupt>:
     258:	d3 ce       	rjmp	.-602    	; 0x0 <__vectors>

0000025a <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	00 d0       	rcall	.+0      	; 0x264 <sysclk_init+0xa>
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	64 e0       	ldi	r22, 0x04	; 4
     26c:	81 e4       	ldi	r24, 0x41	; 65
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	fb d7       	rcall	.+4086   	; 0x1268 <ccp_write_io>
     272:	6c e1       	ldi	r22, 0x1C	; 28
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	fd d7       	rcall	.+4090   	; 0x1274 <nvm_read_byte>
     27a:	8a 83       	std	Y+2, r24	; 0x02
     27c:	6d e1       	ldi	r22, 0x1D	; 29
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	f8 d7       	rcall	.+4080   	; 0x1274 <nvm_read_byte>
     284:	89 83       	std	Y+1, r24	; 0x01
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	21 f4       	brne	.+8      	; 0x296 <sysclk_init+0x3c>
     28e:	80 e4       	ldi	r24, 0x40	; 64
     290:	93 e2       	ldi	r25, 0x23	; 35
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	9a 83       	std	Y+2, r25	; 0x02
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	8b 83       	std	Y+3, r24	; 0x03
     29c:	9c 83       	std	Y+4, r25	; 0x04
     29e:	e0 e6       	ldi	r30, 0x60	; 96
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	82 83       	std	Z+2, r24	; 0x02
     2a4:	8c 81       	ldd	r24, Y+4	; 0x04
     2a6:	83 83       	std	Z+3, r24	; 0x03
     2a8:	9f b7       	in	r25, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	e0 e5       	ldi	r30, 0x50	; 80
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 83       	st	Z, r24
     2b6:	9f bf       	out	0x3f, r25	; 63
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	81 ff       	sbrs	r24, 1
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <sysclk_init+0x5e>
     2be:	9f b7       	in	r25, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	00 e5       	ldi	r16, 0x50	; 80
     2c4:	10 e0       	ldi	r17, 0x00	; 0
     2c6:	d8 01       	movw	r26, r16
     2c8:	16 96       	adiw	r26, 0x06	; 6
     2ca:	8c 91       	ld	r24, X
     2cc:	16 97       	sbiw	r26, 0x06	; 6
     2ce:	89 7f       	andi	r24, 0xF9	; 249
     2d0:	16 96       	adiw	r26, 0x06	; 6
     2d2:	8c 93       	st	X, r24
     2d4:	16 97       	sbiw	r26, 0x06	; 6
     2d6:	e0 e6       	ldi	r30, 0x60	; 96
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 e8       	ldi	r24, 0x80	; 128
     2dc:	85 83       	std	Z+5, r24	; 0x05
     2de:	8b eb       	ldi	r24, 0xBB	; 187
     2e0:	86 83       	std	Z+6, r24	; 0x06
     2e2:	16 96       	adiw	r26, 0x06	; 6
     2e4:	8c 91       	ld	r24, X
     2e6:	16 97       	sbiw	r26, 0x06	; 6
     2e8:	84 60       	ori	r24, 0x04	; 4
     2ea:	16 96       	adiw	r26, 0x06	; 6
     2ec:	8c 93       	st	X, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	80 83       	st	Z, r24
     2f4:	9f bf       	out	0x3f, r25	; 63
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	80 e4       	ldi	r24, 0x40	; 64
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	b5 d7       	rcall	.+3946   	; 0x1268 <ccp_write_io>
     2fe:	9f b7       	in	r25, 0x3f	; 63
     300:	f8 94       	cli
     302:	f8 01       	movw	r30, r16
     304:	80 81       	ld	r24, Z
     306:	8e 7f       	andi	r24, 0xFE	; 254
     308:	80 83       	st	Z, r24
     30a:	9f bf       	out	0x3f, r25	; 63
     30c:	24 96       	adiw	r28, 0x04	; 4
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	de bf       	out	0x3e, r29	; 62
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <sysclk_enable_module>:
     31c:	9f b7       	in	r25, 0x3f	; 63
     31e:	f8 94       	cli
     320:	e8 2f       	mov	r30, r24
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	e0 59       	subi	r30, 0x90	; 144
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	60 95       	com	r22
     32a:	80 81       	ld	r24, Z
     32c:	68 23       	and	r22, r24
     32e:	60 83       	st	Z, r22
     330:	9f bf       	out	0x3f, r25	; 63
     332:	08 95       	ret

00000334 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	11 f0       	breq	.+4      	; 0x33c <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	01 c0       	rjmp	.+2      	; 0x33e <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     33c:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     33e:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     342:	81 fd       	sbrc	r24, 1
     344:	26 c0       	rjmp	.+76     	; 0x392 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     346:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     348:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     34a:	e0 e5       	ldi	r30, 0x50	; 80
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	82 60       	ori	r24, 0x02	; 2
     352:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     354:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     356:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     358:	81 ff       	sbrs	r24, 1
     35a:	fd cf       	rjmp	.-6      	; 0x356 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     35c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     35e:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     360:	a0 e5       	ldi	r26, 0x50	; 80
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	16 96       	adiw	r26, 0x06	; 6
     366:	8c 91       	ld	r24, X
     368:	16 97       	sbiw	r26, 0x06	; 6
     36a:	89 7f       	andi	r24, 0xF9	; 249
     36c:	16 96       	adiw	r26, 0x06	; 6
     36e:	8c 93       	st	X, r24
     370:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     372:	e0 e6       	ldi	r30, 0x60	; 96
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     37a:	8b eb       	ldi	r24, 0xBB	; 187
     37c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     37e:	16 96       	adiw	r26, 0x06	; 6
     380:	8c 91       	ld	r24, X
     382:	16 97       	sbiw	r26, 0x06	; 6
     384:	84 60       	ori	r24, 0x04	; 4
     386:	16 96       	adiw	r26, 0x06	; 6
     388:	8c 93       	st	X, r24
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     38a:	80 81       	ld	r24, Z
     38c:	81 60       	ori	r24, 0x01	; 1
     38e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     390:	9f bf       	out	0x3f, r25	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     392:	63 60       	ori	r22, 0x03	; 3
     394:	84 e4       	ldi	r24, 0x44	; 68
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	67 d7       	rcall	.+3790   	; 0x1268 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     39a:	60 e4       	ldi	r22, 0x40	; 64
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	be cf       	rjmp	.-132    	; 0x31c <sysclk_enable_module>
     3a0:	08 95       	ret

000003a2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	fc 01       	movw	r30, r24
     3a8:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     3ae:	c6 2f       	mov	r28, r22
     3b0:	d0 e0       	ldi	r29, 0x00	; 0
     3b2:	de 01       	movw	r26, r28
     3b4:	02 2e       	mov	r0, r18
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <ioport_configure_port_pin+0x1a>
     3b8:	b5 95       	asr	r27
     3ba:	a7 95       	ror	r26
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <ioport_configure_port_pin+0x16>
     3c0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     3c2:	50 83       	st	Z, r21
     3c4:	2f 5f       	subi	r18, 0xFF	; 255
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     3ca:	28 30       	cpi	r18, 0x08	; 8
     3cc:	31 05       	cpc	r19, r1
     3ce:	89 f7       	brne	.-30     	; 0x3b2 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     3d0:	40 ff       	sbrs	r20, 0
     3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     3d4:	41 ff       	sbrs	r20, 1
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     3d8:	fc 01       	movw	r30, r24
     3da:	65 83       	std	Z+5, r22	; 0x05
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     3de:	fc 01       	movw	r30, r24
     3e0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     3e2:	fc 01       	movw	r30, r24
     3e4:	61 83       	std	Z+1, r22	; 0x01
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     3e8:	fc 01       	movw	r30, r24
     3ea:	62 83       	std	Z+2, r22	; 0x02
	}
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     3f2:	80 91 50 26 	lds	r24, 0x2650
     3f6:	81 50       	subi	r24, 0x01	; 1
     3f8:	80 93 50 26 	sts	0x2650, r24
     3fc:	08 95       	ret

000003fe <udi_cdc_data_setup>:
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	08 95       	ret

00000402 <udi_cdc_getsetting>:
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	08 95       	ret

00000406 <udi_cdc_comm_setup>:
     406:	80 91 f1 27 	lds	r24, 0x27F1
     40a:	88 23       	and	r24, r24
     40c:	cc f4       	brge	.+50     	; 0x440 <udi_cdc_comm_setup+0x3a>
     40e:	80 76       	andi	r24, 0x60	; 96
     410:	80 32       	cpi	r24, 0x20	; 32
     412:	b9 f5       	brne	.+110    	; 0x482 <udi_cdc_comm_setup+0x7c>
     414:	80 91 f2 27 	lds	r24, 0x27F2
     418:	81 32       	cpi	r24, 0x21	; 33
     41a:	a9 f5       	brne	.+106    	; 0x486 <udi_cdc_comm_setup+0x80>
     41c:	80 91 f7 27 	lds	r24, 0x27F7
     420:	90 91 f8 27 	lds	r25, 0x27F8
     424:	07 97       	sbiw	r24, 0x07	; 7
     426:	89 f5       	brne	.+98     	; 0x48a <udi_cdc_comm_setup+0x84>
     428:	e1 ef       	ldi	r30, 0xF1	; 241
     42a:	f7 e2       	ldi	r31, 0x27	; 39
     42c:	8e e5       	ldi	r24, 0x5E	; 94
     42e:	96 e2       	ldi	r25, 0x26	; 38
     430:	80 87       	std	Z+8, r24	; 0x08
     432:	91 87       	std	Z+9, r25	; 0x09
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	82 87       	std	Z+10, r24	; 0x0a
     43a:	93 87       	std	Z+11, r25	; 0x0b
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	08 95       	ret
     440:	80 76       	andi	r24, 0x60	; 96
     442:	80 32       	cpi	r24, 0x20	; 32
     444:	21 f5       	brne	.+72     	; 0x48e <udi_cdc_comm_setup+0x88>
     446:	80 91 f2 27 	lds	r24, 0x27F2
     44a:	80 32       	cpi	r24, 0x20	; 32
     44c:	21 f0       	breq	.+8      	; 0x456 <udi_cdc_comm_setup+0x50>
     44e:	82 32       	cpi	r24, 0x22	; 34
     450:	01 f1       	breq	.+64     	; 0x492 <udi_cdc_comm_setup+0x8c>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
     456:	80 91 f7 27 	lds	r24, 0x27F7
     45a:	90 91 f8 27 	lds	r25, 0x27F8
     45e:	07 97       	sbiw	r24, 0x07	; 7
     460:	d1 f4       	brne	.+52     	; 0x496 <udi_cdc_comm_setup+0x90>
     462:	e1 ef       	ldi	r30, 0xF1	; 241
     464:	f7 e2       	ldi	r31, 0x27	; 39
     466:	8d e4       	ldi	r24, 0x4D	; 77
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	84 87       	std	Z+12, r24	; 0x0c
     46c:	95 87       	std	Z+13, r25	; 0x0d
     46e:	8e e5       	ldi	r24, 0x5E	; 94
     470:	96 e2       	ldi	r25, 0x26	; 38
     472:	80 87       	std	Z+8, r24	; 0x08
     474:	91 87       	std	Z+9, r25	; 0x09
     476:	87 e0       	ldi	r24, 0x07	; 7
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	82 87       	std	Z+10, r24	; 0x0a
     47c:	93 87       	std	Z+11, r25	; 0x0b
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	08 95       	ret
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	08 95       	ret
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret

0000049a <udi_cdc_line_coding_received>:
     49a:	08 95       	ret

0000049c <udi_cdc_comm_enable>:
     49c:	10 92 50 26 	sts	0x2650, r1
     4a0:	10 92 5c 26 	sts	0x265C, r1
     4a4:	10 92 5d 26 	sts	0x265D, r1
     4a8:	e2 e5       	ldi	r30, 0x52	; 82
     4aa:	f6 e2       	ldi	r31, 0x26	; 38
     4ac:	81 ea       	ldi	r24, 0xA1	; 161
     4ae:	80 83       	st	Z, r24
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	81 83       	std	Z+1, r24	; 0x01
     4b4:	12 82       	std	Z+2, r1	; 0x02
     4b6:	13 82       	std	Z+3, r1	; 0x03
     4b8:	14 82       	std	Z+4, r1	; 0x04
     4ba:	15 82       	std	Z+5, r1	; 0x05
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	86 83       	std	Z+6, r24	; 0x06
     4c2:	97 83       	std	Z+7, r25	; 0x07
     4c4:	10 86       	std	Z+8, r1	; 0x08
     4c6:	11 86       	std	Z+9, r1	; 0x09
     4c8:	ee e5       	ldi	r30, 0x5E	; 94
     4ca:	f6 e2       	ldi	r31, 0x26	; 38
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	92 ec       	ldi	r25, 0xC2	; 194
     4d0:	a1 e0       	ldi	r26, 0x01	; 1
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	80 83       	st	Z, r24
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	a2 83       	std	Z+2, r26	; 0x02
     4da:	b3 83       	std	Z+3, r27	; 0x03
     4dc:	14 82       	std	Z+4, r1	; 0x04
     4de:	15 82       	std	Z+5, r1	; 0x05
     4e0:	88 e0       	ldi	r24, 0x08	; 8
     4e2:	86 83       	std	Z+6, r24	; 0x06
     4e4:	ed d5       	rcall	.+3034   	; 0x10c0 <stdio_usb_enable>
     4e6:	88 23       	and	r24, r24
     4e8:	29 f0       	breq	.+10     	; 0x4f4 <udi_cdc_comm_enable+0x58>
     4ea:	90 91 50 26 	lds	r25, 0x2650
     4ee:	9f 5f       	subi	r25, 0xFF	; 255
     4f0:	90 93 50 26 	sts	0x2650, r25
     4f4:	08 95       	ret

000004f6 <udi_cdc_tx_send>:
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	80 91 3d 21 	lds	r24, 0x213D
     504:	81 11       	cpse	r24, r1
     506:	6c c0       	rjmp	.+216    	; 0x5e0 <udi_cdc_tx_send+0xea>
     508:	0e 94 33 13 	call	0x2666	; 0x2666 <udd_is_high_speed>
     50c:	88 23       	and	r24, r24
     50e:	51 f0       	breq	.+20     	; 0x524 <udi_cdc_tx_send+0x2e>
     510:	c0 91 3e 21 	lds	r28, 0x213E
     514:	d0 91 3f 21 	lds	r29, 0x213F
     518:	0e 94 40 13 	call	0x2680	; 0x2680 <udd_get_micro_frame_number>
     51c:	c8 17       	cp	r28, r24
     51e:	d9 07       	cpc	r29, r25
     520:	59 f4       	brne	.+22     	; 0x538 <udi_cdc_tx_send+0x42>
     522:	5e c0       	rjmp	.+188    	; 0x5e0 <udi_cdc_tx_send+0xea>
     524:	c0 91 3e 21 	lds	r28, 0x213E
     528:	d0 91 3f 21 	lds	r29, 0x213F
     52c:	0e 94 3b 13 	call	0x2676	; 0x2676 <udd_get_frame_number>
     530:	c8 17       	cp	r28, r24
     532:	d9 07       	cpc	r29, r25
     534:	09 f4       	brne	.+2      	; 0x538 <udi_cdc_tx_send+0x42>
     536:	54 c0       	rjmp	.+168    	; 0x5e0 <udi_cdc_tx_send+0xea>
     538:	8f b7       	in	r24, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	c0 91 40 21 	lds	r28, 0x2140
     540:	90 91 3c 21 	lds	r25, 0x213C
     544:	91 11       	cpse	r25, r1
     546:	06 c0       	rjmp	.+12     	; 0x554 <udi_cdc_tx_send+0x5e>
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	c1 11       	cpse	r28, r1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	90 93 40 21 	sts	0x2140, r25
     552:	04 c0       	rjmp	.+8      	; 0x55c <udi_cdc_tx_send+0x66>
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	c1 11       	cpse	r28, r1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	c9 2f       	mov	r28, r25
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	90 93 3d 21 	sts	0x213D, r25
     562:	8f bf       	out	0x3f, r24	; 63
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	fe 01       	movw	r30, r28
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	ef 5b       	subi	r30, 0xBF	; 191
     56e:	fe 4d       	sbci	r31, 0xDE	; 222
     570:	ff 24       	eor	r15, r15
     572:	f3 94       	inc	r15
     574:	80 81       	ld	r24, Z
     576:	91 81       	ldd	r25, Z+1	; 0x01
     578:	80 34       	cpi	r24, 0x40	; 64
     57a:	91 40       	sbci	r25, 0x01	; 1
     57c:	09 f4       	brne	.+2      	; 0x580 <udi_cdc_tx_send+0x8a>
     57e:	f1 2c       	mov	r15, r1
     580:	ff 20       	and	r15, r15
     582:	91 f0       	breq	.+36     	; 0x5a8 <udi_cdc_tx_send+0xb2>
     584:	0e 94 33 13 	call	0x2666	; 0x2666 <udd_is_high_speed>
     588:	88 23       	and	r24, r24
     58a:	39 f0       	breq	.+14     	; 0x59a <udi_cdc_tx_send+0xa4>
     58c:	0e 94 40 13 	call	0x2680	; 0x2680 <udd_get_micro_frame_number>
     590:	80 93 3e 21 	sts	0x213E, r24
     594:	90 93 3f 21 	sts	0x213F, r25
     598:	0b c0       	rjmp	.+22     	; 0x5b0 <udi_cdc_tx_send+0xba>
     59a:	0e 94 3b 13 	call	0x2676	; 0x2676 <udd_get_frame_number>
     59e:	80 93 3e 21 	sts	0x213E, r24
     5a2:	90 93 3f 21 	sts	0x213F, r25
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <udi_cdc_tx_send+0xba>
     5a8:	10 92 3e 21 	sts	0x213E, r1
     5ac:	10 92 3f 21 	sts	0x213F, r1
     5b0:	fe 01       	movw	r30, r28
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ef 5b       	subi	r30, 0xBF	; 191
     5b8:	fe 4d       	sbci	r31, 0xDE	; 222
     5ba:	20 81       	ld	r18, Z
     5bc:	31 81       	ldd	r19, Z+1	; 0x01
     5be:	80 e4       	ldi	r24, 0x40	; 64
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	c8 9f       	mul	r28, r24
     5c4:	a0 01       	movw	r20, r0
     5c6:	c9 9f       	mul	r28, r25
     5c8:	50 0d       	add	r21, r0
     5ca:	d8 9f       	mul	r29, r24
     5cc:	50 0d       	add	r21, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	4a 5b       	subi	r20, 0xBA	; 186
     5d2:	5e 4d       	sbci	r21, 0xDE	; 222
     5d4:	06 ef       	ldi	r16, 0xF6	; 246
     5d6:	12 e0       	ldi	r17, 0x02	; 2
     5d8:	6f 2d       	mov	r22, r15
     5da:	81 e8       	ldi	r24, 0x81	; 129
     5dc:	0e 94 18 14 	call	0x2830	; 0x2830 <udd_ep_run>
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	08 95       	ret

000005ec <udi_cdc_data_sent>:
     5ec:	81 11       	cpse	r24, r1
     5ee:	15 c0       	rjmp	.+42     	; 0x61a <udi_cdc_data_sent+0x2e>
     5f0:	20 91 40 21 	lds	r18, 0x2140
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	22 23       	and	r18, r18
     5fa:	11 f0       	breq	.+4      	; 0x600 <udi_cdc_data_sent+0x14>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	fc 01       	movw	r30, r24
     606:	ef 5b       	subi	r30, 0xBF	; 191
     608:	fe 4d       	sbci	r31, 0xDE	; 222
     60a:	10 82       	st	Z, r1
     60c:	11 82       	std	Z+1, r1	; 0x01
     60e:	10 92 3c 21 	sts	0x213C, r1
     612:	10 92 3d 21 	sts	0x213D, r1
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	6e cf       	rjmp	.-292    	; 0x4f6 <udi_cdc_tx_send>
     61a:	08 95       	ret

0000061c <udi_cdc_data_sof_notify>:
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	6b cf       	rjmp	.-298    	; 0x4f6 <udi_cdc_tx_send>
     620:	08 95       	ret

00000622 <udi_cdc_data_disable>:
     622:	80 91 4f 26 	lds	r24, 0x264F
     626:	81 50       	subi	r24, 0x01	; 1
     628:	80 93 4f 26 	sts	0x264F, r24
     62c:	80 91 4f 26 	lds	r24, 0x264F
     630:	4b d5       	rcall	.+2710   	; 0x10c8 <stdio_usb_disable>
     632:	10 92 4e 26 	sts	0x264E, r1
     636:	08 95       	ret

00000638 <udi_cdc_multi_is_rx_ready>:
     638:	9f b7       	in	r25, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	20 91 c7 23 	lds	r18, 0x23C7
     640:	30 91 c8 23 	lds	r19, 0x23C8
     644:	e0 91 c9 23 	lds	r30, 0x23C9
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	e6 53       	subi	r30, 0x36	; 54
     650:	fc 4d       	sbci	r31, 0xDC	; 220
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	40 81       	ld	r20, Z
     656:	51 81       	ldd	r21, Z+1	; 0x01
     658:	24 17       	cp	r18, r20
     65a:	35 07       	cpc	r19, r21
     65c:	08 f0       	brcs	.+2      	; 0x660 <udi_cdc_multi_is_rx_ready+0x28>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	9f bf       	out	0x3f, r25	; 63
     662:	08 95       	ret

00000664 <udi_cdc_rx_start>:
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	9f b7       	in	r25, 0x3f	; 63
     66e:	f8 94       	cli
     670:	20 91 c9 23 	lds	r18, 0x23C9
     674:	80 91 c6 23 	lds	r24, 0x23C6
     678:	81 11       	cpse	r24, r1
     67a:	10 c0       	rjmp	.+32     	; 0x69c <udi_cdc_rx_start+0x38>
     67c:	60 91 c7 23 	lds	r22, 0x23C7
     680:	70 91 c8 23 	lds	r23, 0x23C8
     684:	c2 2f       	mov	r28, r18
     686:	d0 e0       	ldi	r29, 0x00	; 0
     688:	fe 01       	movw	r30, r28
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e6 53       	subi	r30, 0x36	; 54
     690:	fc 4d       	sbci	r31, 0xDC	; 220
     692:	40 81       	ld	r20, Z
     694:	51 81       	ldd	r21, Z+1	; 0x01
     696:	64 17       	cp	r22, r20
     698:	75 07       	cpc	r23, r21
     69a:	18 f4       	brcc	.+6      	; 0x6a2 <udi_cdc_rx_start+0x3e>
     69c:	9f bf       	out	0x3f, r25	; 63
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	22 c0       	rjmp	.+68     	; 0x6e6 <udi_cdc_rx_start+0x82>
     6a2:	10 92 c7 23 	sts	0x23C7, r1
     6a6:	10 92 c8 23 	sts	0x23C8, r1
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	21 11       	cpse	r18, r1
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	80 93 c9 23 	sts	0x23C9, r24
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 c6 23 	sts	0x23C6, r24
     6ba:	9f bf       	out	0x3f, r25	; 63
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	bc df       	rcall	.-136    	; 0x638 <udi_cdc_multi_is_rx_ready>
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	c8 9f       	mul	r28, r24
     6c6:	a0 01       	movw	r20, r0
     6c8:	c9 9f       	mul	r28, r25
     6ca:	50 0d       	add	r21, r0
     6cc:	d8 9f       	mul	r29, r24
     6ce:	50 0d       	add	r21, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	42 53       	subi	r20, 0x32	; 50
     6d4:	5c 4d       	sbci	r21, 0xDC	; 220
     6d6:	08 ea       	ldi	r16, 0xA8	; 168
     6d8:	13 e0       	ldi	r17, 0x03	; 3
     6da:	20 e4       	ldi	r18, 0x40	; 64
     6dc:	31 e0       	ldi	r19, 0x01	; 1
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0e 94 18 14 	call	0x2830	; 0x2830 <udd_ep_run>
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <udi_cdc_data_enable>:
     6f0:	10 92 4f 26 	sts	0x264F, r1
     6f4:	10 92 3d 21 	sts	0x213D, r1
     6f8:	10 92 3c 21 	sts	0x213C, r1
     6fc:	10 92 40 21 	sts	0x2140, r1
     700:	e1 e4       	ldi	r30, 0x41	; 65
     702:	f1 e2       	ldi	r31, 0x21	; 33
     704:	10 82       	st	Z, r1
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	12 82       	std	Z+2, r1	; 0x02
     70a:	13 82       	std	Z+3, r1	; 0x03
     70c:	10 92 3e 21 	sts	0x213E, r1
     710:	10 92 3f 21 	sts	0x213F, r1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	ef de       	rcall	.-546    	; 0x4f6 <udi_cdc_tx_send>
     718:	10 92 c6 23 	sts	0x23C6, r1
     71c:	10 92 c9 23 	sts	0x23C9, r1
     720:	10 92 ca 23 	sts	0x23CA, r1
     724:	10 92 cb 23 	sts	0x23CB, r1
     728:	10 92 c7 23 	sts	0x23C7, r1
     72c:	10 92 c8 23 	sts	0x23C8, r1
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	98 df       	rcall	.-208    	; 0x664 <udi_cdc_rx_start>
     734:	88 23       	and	r24, r24
     736:	59 f0       	breq	.+22     	; 0x74e <udi_cdc_data_enable+0x5e>
     738:	90 91 4f 26 	lds	r25, 0x264F
     73c:	9f 5f       	subi	r25, 0xFF	; 255
     73e:	90 93 4f 26 	sts	0x264F, r25
     742:	90 91 4f 26 	lds	r25, 0x264F
     746:	91 30       	cpi	r25, 0x01	; 1
     748:	11 f4       	brne	.+4      	; 0x74e <udi_cdc_data_enable+0x5e>
     74a:	90 93 4e 26 	sts	0x264E, r25
     74e:	08 95       	ret

00000750 <udi_cdc_data_received>:
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	81 11       	cpse	r24, r1
     756:	26 c0       	rjmp	.+76     	; 0x7a4 <udi_cdc_data_received+0x54>
     758:	80 91 c9 23 	lds	r24, 0x23C9
     75c:	e1 e0       	ldi	r30, 0x01	; 1
     75e:	81 11       	cpse	r24, r1
     760:	e0 e0       	ldi	r30, 0x00	; 0
     762:	84 2f       	mov	r24, r20
     764:	61 15       	cp	r22, r1
     766:	71 05       	cpc	r23, r1
     768:	91 f4       	brne	.+36     	; 0x78e <udi_cdc_data_received+0x3e>
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	20 e4       	ldi	r18, 0x40	; 64
     76e:	31 e0       	ldi	r19, 0x01	; 1
     770:	e2 9f       	mul	r30, r18
     772:	a0 01       	movw	r20, r0
     774:	e3 9f       	mul	r30, r19
     776:	50 0d       	add	r21, r0
     778:	f2 9f       	mul	r31, r18
     77a:	50 0d       	add	r21, r0
     77c:	11 24       	eor	r1, r1
     77e:	42 53       	subi	r20, 0x32	; 50
     780:	5c 4d       	sbci	r21, 0xDC	; 220
     782:	08 ea       	ldi	r16, 0xA8	; 168
     784:	13 e0       	ldi	r17, 0x03	; 3
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	0e 94 18 14 	call	0x2830	; 0x2830 <udd_ep_run>
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <udi_cdc_data_received+0x54>
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e6 53       	subi	r30, 0x36	; 54
     796:	fc 4d       	sbci	r31, 0xDC	; 220
     798:	60 83       	st	Z, r22
     79a:	71 83       	std	Z+1, r23	; 0x01
     79c:	10 92 c6 23 	sts	0x23C6, r1
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	60 df       	rcall	.-320    	; 0x664 <udi_cdc_rx_start>
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <udi_cdc_multi_getc>:
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	11 e0       	ldi	r17, 0x01	; 1
     7b6:	80 91 64 26 	lds	r24, 0x2664
     7ba:	89 30       	cpi	r24, 0x09	; 9
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <udi_cdc_multi_getc+0x16>
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	c0 e4       	ldi	r28, 0x40	; 64
     7c6:	d1 e0       	ldi	r29, 0x01	; 1
     7c8:	9f b7       	in	r25, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	20 91 c7 23 	lds	r18, 0x23C7
     7d0:	30 91 c8 23 	lds	r19, 0x23C8
     7d4:	80 91 c9 23 	lds	r24, 0x23C9
     7d8:	9f bf       	out	0x3f, r25	; 63
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e6 53       	subi	r30, 0x36	; 54
     7e4:	fc 4d       	sbci	r31, 0xDC	; 220
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	24 17       	cp	r18, r20
     7ec:	35 07       	cpc	r19, r21
     7ee:	30 f0       	brcs	.+12     	; 0x7fc <udi_cdc_multi_getc+0x52>
     7f0:	80 91 4e 26 	lds	r24, 0x264E
     7f4:	81 11       	cpse	r24, r1
     7f6:	e8 cf       	rjmp	.-48     	; 0x7c8 <udi_cdc_multi_getc+0x1e>
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	1e c0       	rjmp	.+60     	; 0x838 <udi_cdc_multi_getc+0x8e>
     7fc:	8c 9f       	mul	r24, r28
     7fe:	f0 01       	movw	r30, r0
     800:	8d 9f       	mul	r24, r29
     802:	f0 0d       	add	r31, r0
     804:	9c 9f       	mul	r25, r28
     806:	f0 0d       	add	r31, r0
     808:	11 24       	eor	r1, r1
     80a:	e2 0f       	add	r30, r18
     80c:	f3 1f       	adc	r31, r19
     80e:	e2 53       	subi	r30, 0x32	; 50
     810:	fc 4d       	sbci	r31, 0xDC	; 220
     812:	80 81       	ld	r24, Z
     814:	7b 01       	movw	r14, r22
     816:	e8 2a       	or	r14, r24
     818:	2f 5f       	subi	r18, 0xFF	; 255
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	20 93 c7 23 	sts	0x23C7, r18
     820:	30 93 c8 23 	sts	0x23C8, r19
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	1e df       	rcall	.-452    	; 0x664 <udi_cdc_rx_start>
     828:	11 23       	and	r17, r17
     82a:	21 f0       	breq	.+8      	; 0x834 <udi_cdc_multi_getc+0x8a>
     82c:	7e 2d       	mov	r23, r14
     82e:	66 27       	eor	r22, r22
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	ca cf       	rjmp	.-108    	; 0x7c8 <udi_cdc_multi_getc+0x1e>
     834:	8e 2d       	mov	r24, r14
     836:	9f 2d       	mov	r25, r15
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <udi_cdc_getc>:
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	b1 cf       	rjmp	.-158    	; 0x7aa <udi_cdc_multi_getc>
     848:	08 95       	ret

0000084a <udi_cdc_multi_is_tx_ready>:
     84a:	e0 91 40 21 	lds	r30, 0x2140
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	ef 5b       	subi	r30, 0xBF	; 191
     856:	fe 4d       	sbci	r31, 0xDE	; 222
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	80 34       	cpi	r24, 0x40	; 64
     85e:	91 40       	sbci	r25, 0x01	; 1
     860:	19 f5       	brne	.+70     	; 0x8a8 <udi_cdc_multi_is_tx_ready+0x5e>
     862:	80 91 3c 21 	lds	r24, 0x213C
     866:	81 11       	cpse	r24, r1
     868:	10 c0       	rjmp	.+32     	; 0x88a <udi_cdc_multi_is_tx_ready+0x40>
     86a:	8f b7       	in	r24, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	90 91 3d 21 	lds	r25, 0x213D
     872:	91 11       	cpse	r25, r1
     874:	09 c0       	rjmp	.+18     	; 0x888 <udi_cdc_multi_is_tx_ready+0x3e>
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	90 93 3c 21 	sts	0x213C, r25
     87c:	20 91 40 21 	lds	r18, 0x2140
     880:	21 11       	cpse	r18, r1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	90 93 40 21 	sts	0x2140, r25
     888:	8f bf       	out	0x3f, r24	; 63
     88a:	e0 91 40 21 	lds	r30, 0x2140
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ef 5b       	subi	r30, 0xBF	; 191
     896:	fe 4d       	sbci	r31, 0xDE	; 222
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	20 81       	ld	r18, Z
     89c:	31 81       	ldd	r19, Z+1	; 0x01
     89e:	20 34       	cpi	r18, 0x40	; 64
     8a0:	31 40       	sbci	r19, 0x01	; 1
     8a2:	19 f4       	brne	.+6      	; 0x8aa <udi_cdc_multi_is_tx_ready+0x60>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	08 95       	ret

000008ac <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	f6 2e       	mov	r15, r22
     8b8:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8ba:	01 e0       	ldi	r16, 0x01	; 1
     8bc:	80 91 64 26 	lds	r24, 0x2664
     8c0:	89 30       	cpi	r24, 0x09	; 9
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <udi_cdc_multi_putc+0x1a>
     8c4:	00 e0       	ldi	r16, 0x00	; 0
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8c6:	c0 e4       	ldi	r28, 0x40	; 64
     8c8:	d1 e0       	ldi	r29, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	be df       	rcall	.-132    	; 0x84a <udi_cdc_multi_is_tx_ready>
     8ce:	81 11       	cpse	r24, r1
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
     8d2:	80 91 4e 26 	lds	r24, 0x264E
     8d6:	81 11       	cpse	r24, r1
     8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <udi_cdc_multi_putc+0x1e>
			return false;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	28 c0       	rjmp	.+80     	; 0x930 <udi_cdc_multi_putc+0x84>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8e0:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     8e2:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8e4:	20 91 40 21 	lds	r18, 0x2140
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ef 5b       	subi	r30, 0xBF	; 191
     8f2:	fe 4d       	sbci	r31, 0xDE	; 222
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	bc 01       	movw	r22, r24
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	60 83       	st	Z, r22
     900:	71 83       	std	Z+1, r23	; 0x01
     902:	2c 9f       	mul	r18, r28
     904:	f0 01       	movw	r30, r0
     906:	2d 9f       	mul	r18, r29
     908:	f0 0d       	add	r31, r0
     90a:	3c 9f       	mul	r19, r28
     90c:	f0 0d       	add	r31, r0
     90e:	11 24       	eor	r1, r1
     910:	8e 0f       	add	r24, r30
     912:	9f 1f       	adc	r25, r31
     914:	fc 01       	movw	r30, r24
     916:	ea 5b       	subi	r30, 0xBA	; 186
     918:	fe 4d       	sbci	r31, 0xDE	; 222
     91a:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     91c:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     91e:	00 23       	and	r16, r16
     920:	29 f0       	breq	.+10     	; 0x92c <udi_cdc_multi_putc+0x80>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     922:	f1 2e       	mov	r15, r17
     924:	11 0f       	add	r17, r17
     926:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     928:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     92a:	cf cf       	rjmp	.-98     	; 0x8ca <udi_cdc_multi_putc+0x1e>
	}
	return true;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	08 95       	ret

0000093c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     93c:	bc 01       	movw	r22, r24
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	b5 cf       	rjmp	.-150    	; 0x8ac <udi_cdc_multi_putc>
}
     942:	08 95       	ret

00000944 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     944:	e0 91 6a 26 	lds	r30, 0x266A
     948:	f0 91 6b 26 	lds	r31, 0x266B
     94c:	01 90       	ld	r0, Z+
     94e:	f0 81       	ld	r31, Z
     950:	e0 2d       	mov	r30, r0
     952:	22 81       	ldd	r18, Z+2	; 0x02
     954:	33 81       	ldd	r19, Z+3	; 0x03
     956:	2e 0f       	add	r18, r30
     958:	3f 1f       	adc	r19, r31
     95a:	fc 01       	movw	r30, r24
     95c:	40 81       	ld	r20, Z
     95e:	e4 0f       	add	r30, r20
     960:	f1 1d       	adc	r31, r1
     962:	e2 17       	cp	r30, r18
     964:	f3 07       	cpc	r31, r19
     966:	b8 f4       	brcc	.+46     	; 0x996 <udc_next_desc_in_iface+0x52>
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	84 30       	cpi	r24, 0x04	; 4
     96c:	b9 f0       	breq	.+46     	; 0x99c <udc_next_desc_in_iface+0x58>
     96e:	86 13       	cpse	r24, r22
     970:	09 c0       	rjmp	.+18     	; 0x984 <udc_next_desc_in_iface+0x40>
     972:	05 c0       	rjmp	.+10     	; 0x97e <udc_next_desc_in_iface+0x3a>
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	84 30       	cpi	r24, 0x04	; 4
     978:	a1 f0       	breq	.+40     	; 0x9a2 <udc_next_desc_in_iface+0x5e>
     97a:	86 13       	cpse	r24, r22
     97c:	03 c0       	rjmp	.+6      	; 0x984 <udc_next_desc_in_iface+0x40>
     97e:	8e 2f       	mov	r24, r30
     980:	9f 2f       	mov	r25, r31
     982:	08 95       	ret
     984:	80 81       	ld	r24, Z
     986:	e8 0f       	add	r30, r24
     988:	f1 1d       	adc	r31, r1
     98a:	e2 17       	cp	r30, r18
     98c:	f3 07       	cpc	r31, r19
     98e:	90 f3       	brcs	.-28     	; 0x974 <udc_next_desc_in_iface+0x30>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	08 95       	ret
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	08 95       	ret
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	08 95       	ret

000009a8 <udc_valid_address>:
     9a8:	80 91 f3 27 	lds	r24, 0x27F3
     9ac:	8f 77       	andi	r24, 0x7F	; 127
     9ae:	0c 94 35 13 	jmp	0x266a	; 0x266a <udd_set_address>
     9b2:	08 95       	ret

000009b4 <udc_update_iface_desc>:
     9b4:	90 91 6c 26 	lds	r25, 0x266C
     9b8:	99 23       	and	r25, r25
     9ba:	81 f1       	breq	.+96     	; 0xa1c <udc_update_iface_desc+0x68>
     9bc:	e0 91 6a 26 	lds	r30, 0x266A
     9c0:	f0 91 6b 26 	lds	r31, 0x266B
     9c4:	01 90       	ld	r0, Z+
     9c6:	f0 81       	ld	r31, Z
     9c8:	e0 2d       	mov	r30, r0
     9ca:	94 81       	ldd	r25, Z+4	; 0x04
     9cc:	89 17       	cp	r24, r25
     9ce:	40 f5       	brcc	.+80     	; 0xa20 <udc_update_iface_desc+0x6c>
     9d0:	e0 93 68 26 	sts	0x2668, r30
     9d4:	f0 93 69 26 	sts	0x2669, r31
     9d8:	22 81       	ldd	r18, Z+2	; 0x02
     9da:	33 81       	ldd	r19, Z+3	; 0x03
     9dc:	2e 0f       	add	r18, r30
     9de:	3f 1f       	adc	r19, r31
     9e0:	e2 17       	cp	r30, r18
     9e2:	f3 07       	cpc	r31, r19
     9e4:	f8 f4       	brcc	.+62     	; 0xa24 <udc_update_iface_desc+0x70>
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	94 30       	cpi	r25, 0x04	; 4
     9ea:	61 f4       	brne	.+24     	; 0xa04 <udc_update_iface_desc+0x50>
     9ec:	92 81       	ldd	r25, Z+2	; 0x02
     9ee:	98 13       	cpse	r25, r24
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <udc_update_iface_desc+0x50>
     9f2:	93 81       	ldd	r25, Z+3	; 0x03
     9f4:	96 13       	cpse	r25, r22
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <udc_update_iface_desc+0x50>
     9f8:	e0 93 68 26 	sts	0x2668, r30
     9fc:	f0 93 69 26 	sts	0x2669, r31
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	08 95       	ret
     a04:	90 81       	ld	r25, Z
     a06:	e9 0f       	add	r30, r25
     a08:	f1 1d       	adc	r31, r1
     a0a:	e2 17       	cp	r30, r18
     a0c:	f3 07       	cpc	r31, r19
     a0e:	58 f3       	brcs	.-42     	; 0x9e6 <udc_update_iface_desc+0x32>
     a10:	e0 93 68 26 	sts	0x2668, r30
     a14:	f0 93 69 26 	sts	0x2669, r31
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 95       	ret
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	08 95       	ret
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	08 95       	ret

00000a28 <udc_iface_disable>:
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	c8 2f       	mov	r28, r24
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	be df       	rcall	.-132    	; 0x9b4 <udc_update_iface_desc>
     a38:	18 2f       	mov	r17, r24
     a3a:	88 23       	and	r24, r24
     a3c:	81 f1       	breq	.+96     	; 0xa9e <udc_iface_disable+0x76>
     a3e:	a0 91 6a 26 	lds	r26, 0x266A
     a42:	b0 91 6b 26 	lds	r27, 0x266B
     a46:	ec 2f       	mov	r30, r28
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	8d 91       	ld	r24, X+
     a52:	9c 91       	ld	r25, X
     a54:	13 97       	sbiw	r26, 0x03	; 3
     a56:	e8 0f       	add	r30, r24
     a58:	f9 1f       	adc	r31, r25
     a5a:	e0 80       	ld	r14, Z
     a5c:	f1 80       	ldd	r15, Z+1	; 0x01
     a5e:	d7 01       	movw	r26, r14
     a60:	16 96       	adiw	r26, 0x06	; 6
     a62:	ed 91       	ld	r30, X+
     a64:	fc 91       	ld	r31, X
     a66:	17 97       	sbiw	r26, 0x07	; 7
     a68:	19 95       	eicall
     a6a:	68 2f       	mov	r22, r24
     a6c:	8c 2f       	mov	r24, r28
     a6e:	a2 df       	rcall	.-188    	; 0x9b4 <udc_update_iface_desc>
     a70:	18 2f       	mov	r17, r24
     a72:	88 23       	and	r24, r24
     a74:	a1 f0       	breq	.+40     	; 0xa9e <udc_iface_disable+0x76>
     a76:	c0 91 68 26 	lds	r28, 0x2668
     a7a:	d0 91 69 26 	lds	r29, 0x2669
     a7e:	65 e0       	ldi	r22, 0x05	; 5
     a80:	ce 01       	movw	r24, r28
     a82:	60 df       	rcall	.-320    	; 0x944 <udc_next_desc_in_iface>
     a84:	ec 01       	movw	r28, r24
     a86:	89 2b       	or	r24, r25
     a88:	21 f0       	breq	.+8      	; 0xa92 <udc_iface_disable+0x6a>
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <udd_ep_free>
     a90:	f6 cf       	rjmp	.-20     	; 0xa7e <udc_iface_disable+0x56>
     a92:	d7 01       	movw	r26, r14
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	13 97       	sbiw	r26, 0x03	; 3
     a9c:	19 95       	eicall
     a9e:	81 2f       	mov	r24, r17
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <udc_iface_enable>:
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	18 2f       	mov	r17, r24
     ab4:	7f df       	rcall	.-258    	; 0x9b4 <udc_update_iface_desc>
     ab6:	88 23       	and	r24, r24
     ab8:	41 f1       	breq	.+80     	; 0xb0a <udc_iface_enable+0x5e>
     aba:	c0 91 68 26 	lds	r28, 0x2668
     abe:	d0 91 69 26 	lds	r29, 0x2669
     ac2:	65 e0       	ldi	r22, 0x05	; 5
     ac4:	ce 01       	movw	r24, r28
     ac6:	3e df       	rcall	.-388    	; 0x944 <udc_next_desc_in_iface>
     ac8:	ec 01       	movw	r28, r24
     aca:	89 2b       	or	r24, r25
     acc:	49 f0       	breq	.+18     	; 0xae0 <udc_iface_enable+0x34>
     ace:	4c 81       	ldd	r20, Y+4	; 0x04
     ad0:	5d 81       	ldd	r21, Y+5	; 0x05
     ad2:	6b 81       	ldd	r22, Y+3	; 0x03
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	0e 94 4a 13 	call	0x2694	; 0x2694 <udd_ep_alloc>
     ada:	81 11       	cpse	r24, r1
     adc:	f2 cf       	rjmp	.-28     	; 0xac2 <udc_iface_enable+0x16>
     ade:	15 c0       	rjmp	.+42     	; 0xb0a <udc_iface_enable+0x5e>
     ae0:	a0 91 6a 26 	lds	r26, 0x266A
     ae4:	b0 91 6b 26 	lds	r27, 0x266B
     ae8:	e1 2f       	mov	r30, r17
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	12 96       	adiw	r26, 0x02	; 2
     af2:	8d 91       	ld	r24, X+
     af4:	9c 91       	ld	r25, X
     af6:	13 97       	sbiw	r26, 0x03	; 3
     af8:	e8 0f       	add	r30, r24
     afa:	f9 1f       	adc	r31, r25
     afc:	01 90       	ld	r0, Z+
     afe:	f0 81       	ld	r31, Z
     b00:	e0 2d       	mov	r30, r0
     b02:	01 90       	ld	r0, Z+
     b04:	f0 81       	ld	r31, Z
     b06:	e0 2d       	mov	r30, r0
     b08:	19 95       	eicall
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	08 95       	ret

00000b12 <udc_start>:
     b12:	0c 94 9f 12 	jmp	0x253e	; 0x253e <udd_enable>
     b16:	08 95       	ret

00000b18 <udc_reset>:
     b18:	cf 93       	push	r28
     b1a:	80 91 6c 26 	lds	r24, 0x266C
     b1e:	88 23       	and	r24, r24
     b20:	c1 f0       	breq	.+48     	; 0xb52 <udc_reset+0x3a>
     b22:	e0 91 6a 26 	lds	r30, 0x266A
     b26:	f0 91 6b 26 	lds	r31, 0x266B
     b2a:	01 90       	ld	r0, Z+
     b2c:	f0 81       	ld	r31, Z
     b2e:	e0 2d       	mov	r30, r0
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	88 23       	and	r24, r24
     b34:	71 f0       	breq	.+28     	; 0xb52 <udc_reset+0x3a>
     b36:	c0 e0       	ldi	r28, 0x00	; 0
     b38:	8c 2f       	mov	r24, r28
     b3a:	76 df       	rcall	.-276    	; 0xa28 <udc_iface_disable>
     b3c:	cf 5f       	subi	r28, 0xFF	; 255
     b3e:	e0 91 6a 26 	lds	r30, 0x266A
     b42:	f0 91 6b 26 	lds	r31, 0x266B
     b46:	01 90       	ld	r0, Z+
     b48:	f0 81       	ld	r31, Z
     b4a:	e0 2d       	mov	r30, r0
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	c8 17       	cp	r28, r24
     b50:	98 f3       	brcs	.-26     	; 0xb38 <udc_reset+0x20>
     b52:	10 92 6c 26 	sts	0x266C, r1
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	80 93 6d 26 	sts	0x266D, r24
     b5e:	90 93 6e 26 	sts	0x266E, r25
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b66:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b68:	80 91 6c 26 	lds	r24, 0x266C
     b6c:	88 23       	and	r24, r24
     b6e:	49 f1       	breq	.+82     	; 0xbc2 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b70:	a0 91 6a 26 	lds	r26, 0x266A
     b74:	b0 91 6b 26 	lds	r27, 0x266B
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
     b80:	88 23       	and	r24, r24
     b82:	f9 f0       	breq	.+62     	; 0xbc2 <udc_sof_notify+0x5c>
     b84:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b86:	ec 2f       	mov	r30, r28
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	12 96       	adiw	r26, 0x02	; 2
     b90:	8d 91       	ld	r24, X+
     b92:	9c 91       	ld	r25, X
     b94:	13 97       	sbiw	r26, 0x03	; 3
     b96:	e8 0f       	add	r30, r24
     b98:	f9 1f       	adc	r31, r25
     b9a:	01 90       	ld	r0, Z+
     b9c:	f0 81       	ld	r31, Z
     b9e:	e0 2d       	mov	r30, r0
     ba0:	00 84       	ldd	r0, Z+8	; 0x08
     ba2:	f1 85       	ldd	r31, Z+9	; 0x09
     ba4:	e0 2d       	mov	r30, r0
     ba6:	30 97       	sbiw	r30, 0x00	; 0
     ba8:	09 f0       	breq	.+2      	; 0xbac <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     baa:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bac:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bae:	a0 91 6a 26 	lds	r26, 0x266A
     bb2:	b0 91 6b 26 	lds	r27, 0x266B
     bb6:	ed 91       	ld	r30, X+
     bb8:	fc 91       	ld	r31, X
     bba:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	c8 17       	cp	r28, r24
     bc0:	10 f3       	brcs	.-60     	; 0xb86 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bce:	e1 ef       	ldi	r30, 0xF1	; 241
     bd0:	f7 e2       	ldi	r31, 0x27	; 39
     bd2:	12 86       	std	Z+10, r1	; 0x0a
     bd4:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     bd6:	14 86       	std	Z+12, r1	; 0x0c
     bd8:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     bda:	16 86       	std	Z+14, r1	; 0x0e
     bdc:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     bde:	80 81       	ld	r24, Z
     be0:	88 23       	and	r24, r24
     be2:	0c f0       	brlt	.+2      	; 0xbe6 <udc_process_setup+0x20>
     be4:	1e c2       	rjmp	.+1084   	; 0x1022 <udc_process_setup+0x45c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     be6:	20 91 f7 27 	lds	r18, 0x27F7
     bea:	30 91 f8 27 	lds	r19, 0x27F8
     bee:	21 15       	cp	r18, r1
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <udc_process_setup+0x30>
     bf4:	1b c2       	rjmp	.+1078   	; 0x102c <udc_process_setup+0x466>
     bf6:	11 c2       	rjmp	.+1058   	; 0x101a <udc_process_setup+0x454>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     bf8:	8f 71       	andi	r24, 0x1F	; 31
     bfa:	09 f0       	breq	.+2      	; 0xbfe <udc_process_setup+0x38>
     bfc:	96 c0       	rjmp	.+300    	; 0xd2a <udc_process_setup+0x164>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     bfe:	90 91 f2 27 	lds	r25, 0x27F2
     c02:	96 30       	cpi	r25, 0x06	; 6
     c04:	81 f0       	breq	.+32     	; 0xc26 <udc_process_setup+0x60>
     c06:	98 30       	cpi	r25, 0x08	; 8
     c08:	09 f4       	brne	.+2      	; 0xc0c <udc_process_setup+0x46>
     c0a:	84 c0       	rjmp	.+264    	; 0xd14 <udc_process_setup+0x14e>
     c0c:	91 11       	cpse	r25, r1
     c0e:	8d c0       	rjmp	.+282    	; 0xd2a <udc_process_setup+0x164>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c10:	22 30       	cpi	r18, 0x02	; 2
     c12:	31 05       	cpc	r19, r1
     c14:	09 f0       	breq	.+2      	; 0xc18 <udc_process_setup+0x52>
     c16:	c0 c1       	rjmp	.+896    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	8d e6       	ldi	r24, 0x6D	; 109
     c1e:	96 e2       	ldi	r25, 0x26	; 38
     c20:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
     c24:	08 c2       	rjmp	.+1040   	; 0x1036 <udc_process_setup+0x470>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c26:	80 91 f3 27 	lds	r24, 0x27F3
     c2a:	90 91 f4 27 	lds	r25, 0x27F4

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c2e:	29 2f       	mov	r18, r25
     c30:	33 27       	eor	r19, r19
     c32:	22 30       	cpi	r18, 0x02	; 2
     c34:	31 05       	cpc	r19, r1
     c36:	89 f0       	breq	.+34     	; 0xc5a <udc_process_setup+0x94>
     c38:	23 30       	cpi	r18, 0x03	; 3
     c3a:	31 05       	cpc	r19, r1
     c3c:	79 f1       	breq	.+94     	; 0xc9c <udc_process_setup+0xd6>
     c3e:	21 30       	cpi	r18, 0x01	; 1
     c40:	31 05       	cpc	r19, r1
     c42:	09 f0       	breq	.+2      	; 0xc46 <udc_process_setup+0x80>
     c44:	a0 c1       	rjmp	.+832    	; 0xf86 <udc_process_setup+0x3c0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c46:	80 91 1a 20 	lds	r24, 0x201A
     c4a:	90 91 1b 20 	lds	r25, 0x201B
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c4e:	dc 01       	movw	r26, r24
     c50:	6c 91       	ld	r22, X
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
     c58:	4e c0       	rjmp	.+156    	; 0xcf6 <udc_process_setup+0x130>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c5a:	e0 91 1a 20 	lds	r30, 0x201A
     c5e:	f0 91 1b 20 	lds	r31, 0x201B
     c62:	21 89       	ldd	r18, Z+17	; 0x11
     c64:	82 17       	cp	r24, r18
     c66:	08 f0       	brcs	.+2      	; 0xc6a <udc_process_setup+0xa4>
     c68:	97 c1       	rjmp	.+814    	; 0xf98 <udc_process_setup+0x3d2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c6a:	99 27       	eor	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	e0 91 1c 20 	lds	r30, 0x201C
     c78:	f0 91 1d 20 	lds	r31, 0x201D
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     c84:	fc 01       	movw	r30, r24
     c86:	62 81       	ldd	r22, Z+2	; 0x02
     c88:	73 81       	ldd	r23, Z+3	; 0x03
     c8a:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     c8e:	e0 91 f9 27 	lds	r30, 0x27F9
     c92:	f0 91 fa 27 	lds	r31, 0x27FA
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	81 83       	std	Z+1, r24	; 0x01
     c9a:	2d c0       	rjmp	.+90     	; 0xcf6 <udc_process_setup+0x130>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     c9c:	99 27       	eor	r25, r25
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	91 05       	cpc	r25, r1
     ca2:	79 f0       	breq	.+30     	; 0xcc2 <udc_process_setup+0xfc>
     ca4:	38 f0       	brcs	.+14     	; 0xcb4 <udc_process_setup+0xee>
     ca6:	02 97       	sbiw	r24, 0x02	; 2
     ca8:	09 f0       	breq	.+2      	; 0xcac <udc_process_setup+0xe6>
     caa:	76 c1       	rjmp	.+748    	; 0xf98 <udc_process_setup+0x3d2>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     cac:	80 e9       	ldi	r24, 0x90	; 144
     cae:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     cb0:	23 e0       	ldi	r18, 0x03	; 3
     cb2:	0a c0       	rjmp	.+20     	; 0xcc8 <udc_process_setup+0x102>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     cb4:	64 e0       	ldi	r22, 0x04	; 4
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	8e e9       	ldi	r24, 0x9E	; 158
     cba:	90 e2       	ldi	r25, 0x20	; 32
     cbc:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
     cc0:	1a c0       	rjmp	.+52     	; 0xcf6 <udc_process_setup+0x130>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     cc2:	84 e9       	ldi	r24, 0x94	; 148
     cc4:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     cc6:	29 e0       	ldi	r18, 0x09	; 9
     cc8:	38 2f       	mov	r19, r24
     cca:	ae e7       	ldi	r26, 0x7E	; 126
     ccc:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     cce:	e8 2f       	mov	r30, r24
     cd0:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     cd2:	81 91       	ld	r24, Z+
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	8d 93       	st	X+, r24
     cd8:	9d 93       	st	X+, r25
     cda:	8e 2f       	mov	r24, r30
     cdc:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     cde:	82 17       	cp	r24, r18
     ce0:	c0 f3       	brcs	.-16     	; 0xcd2 <udc_process_setup+0x10c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     ce2:	62 2f       	mov	r22, r18
     ce4:	66 0f       	add	r22, r22
     ce6:	6e 5f       	subi	r22, 0xFE	; 254
     ce8:	60 93 7c 20 	sts	0x207C, r22
		udd_set_setup_payload(
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	8c e7       	ldi	r24, 0x7C	; 124
     cf0:	90 e2       	ldi	r25, 0x20	; 32
     cf2:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     cf6:	e1 ef       	ldi	r30, 0xF1	; 241
     cf8:	f7 e2       	ldi	r31, 0x27	; 39
     cfa:	86 81       	ldd	r24, Z+6	; 0x06
     cfc:	97 81       	ldd	r25, Z+7	; 0x07
     cfe:	22 85       	ldd	r18, Z+10	; 0x0a
     d00:	33 85       	ldd	r19, Z+11	; 0x0b
     d02:	82 17       	cp	r24, r18
     d04:	93 07       	cpc	r25, r19
     d06:	08 f0       	brcs	.+2      	; 0xd0a <udc_process_setup+0x144>
     d08:	96 c1       	rjmp	.+812    	; 0x1036 <udc_process_setup+0x470>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d0a:	80 93 fb 27 	sts	0x27FB, r24
     d0e:	90 93 fc 27 	sts	0x27FC, r25
     d12:	91 c1       	rjmp	.+802    	; 0x1036 <udc_process_setup+0x470>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d14:	21 30       	cpi	r18, 0x01	; 1
     d16:	31 05       	cpc	r19, r1
     d18:	09 f0       	breq	.+2      	; 0xd1c <udc_process_setup+0x156>
     d1a:	3e c1       	rjmp	.+636    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	8c e6       	ldi	r24, 0x6C	; 108
     d22:	96 e2       	ldi	r25, 0x26	; 38
     d24:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
     d28:	86 c1       	rjmp	.+780    	; 0x1036 <udc_process_setup+0x470>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	e9 f5       	brne	.+122    	; 0xda8 <udc_process_setup+0x1e2>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d2e:	90 91 f2 27 	lds	r25, 0x27F2
     d32:	9a 30       	cpi	r25, 0x0A	; 10
     d34:	c9 f5       	brne	.+114    	; 0xda8 <udc_process_setup+0x1e2>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d36:	21 30       	cpi	r18, 0x01	; 1
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f0       	breq	.+2      	; 0xd3e <udc_process_setup+0x178>
     d3c:	2d c1       	rjmp	.+602    	; 0xf98 <udc_process_setup+0x3d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d3e:	80 91 6c 26 	lds	r24, 0x266C
     d42:	88 23       	and	r24, r24
     d44:	09 f4       	brne	.+2      	; 0xd48 <udc_process_setup+0x182>
     d46:	28 c1       	rjmp	.+592    	; 0xf98 <udc_process_setup+0x3d2>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d48:	c0 91 f5 27 	lds	r28, 0x27F5
     d4c:	d0 91 f6 27 	lds	r29, 0x27F6
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d50:	00 91 6a 26 	lds	r16, 0x266A
     d54:	10 91 6b 26 	lds	r17, 0x266B
     d58:	d8 01       	movw	r26, r16
     d5a:	ed 91       	ld	r30, X+
     d5c:	fc 91       	ld	r31, X
     d5e:	84 81       	ldd	r24, Z+4	; 0x04
     d60:	c8 17       	cp	r28, r24
     d62:	08 f0       	brcs	.+2      	; 0xd66 <udc_process_setup+0x1a0>
     d64:	19 c1       	rjmp	.+562    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	8c 2f       	mov	r24, r28
     d6a:	24 de       	rcall	.-952    	; 0x9b4 <udc_update_iface_desc>
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <udc_process_setup+0x1ac>
     d70:	13 c1       	rjmp	.+550    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d72:	ce 01       	movw	r24, r28
     d74:	99 27       	eor	r25, r25
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	d8 01       	movw	r26, r16
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	ed 91       	ld	r30, X+
     d80:	fc 91       	ld	r31, X
     d82:	13 97       	sbiw	r26, 0x03	; 3
     d84:	e8 0f       	add	r30, r24
     d86:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     d88:	01 90       	ld	r0, Z+
     d8a:	f0 81       	ld	r31, Z
     d8c:	e0 2d       	mov	r30, r0
     d8e:	86 81       	ldd	r24, Z+6	; 0x06
     d90:	97 81       	ldd	r25, Z+7	; 0x07
     d92:	fc 01       	movw	r30, r24
     d94:	19 95       	eicall
     d96:	80 93 67 26 	sts	0x2667, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	87 e6       	ldi	r24, 0x67	; 103
     da0:	96 e2       	ldi	r25, 0x26	; 38
     da2:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
     da6:	47 c1       	rjmp	.+654    	; 0x1036 <udc_process_setup+0x470>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	09 f0       	breq	.+2      	; 0xdae <udc_process_setup+0x1e8>
     dac:	f5 c0       	rjmp	.+490    	; 0xf98 <udc_process_setup+0x3d2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     dae:	80 91 f2 27 	lds	r24, 0x27F2
     db2:	81 11       	cpse	r24, r1
     db4:	ea c0       	rjmp	.+468    	; 0xf8a <udc_process_setup+0x3c4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <udc_process_setup+0x1f8>
     dbc:	ed c0       	rjmp	.+474    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     dbe:	80 91 f5 27 	lds	r24, 0x27F5
     dc2:	0e 94 c8 13 	call	0x2790	; 0x2790 <udd_ep_is_halted>
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	80 93 65 26 	sts	0x2665, r24
     dcc:	90 93 66 26 	sts	0x2666, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	85 e6       	ldi	r24, 0x65	; 101
     dd6:	96 e2       	ldi	r25, 0x26	; 38
     dd8:	0e 94 43 13 	call	0x2686	; 0x2686 <udd_set_setup_payload>
     ddc:	2c c1       	rjmp	.+600    	; 0x1036 <udc_process_setup+0x470>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     dde:	8f 71       	andi	r24, 0x1F	; 31
     de0:	09 f0       	breq	.+2      	; 0xde4 <udc_process_setup+0x21e>
     de2:	84 c0       	rjmp	.+264    	; 0xeec <udc_process_setup+0x326>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     de4:	90 91 f2 27 	lds	r25, 0x27F2
     de8:	93 30       	cpi	r25, 0x03	; 3
     dea:	09 f4       	brne	.+2      	; 0xdee <udc_process_setup+0x228>
     dec:	d0 c0       	rjmp	.+416    	; 0xf8e <udc_process_setup+0x3c8>
     dee:	18 f4       	brcc	.+6      	; 0xdf6 <udc_process_setup+0x230>
     df0:	91 30       	cpi	r25, 0x01	; 1
     df2:	a1 f0       	breq	.+40     	; 0xe1c <udc_process_setup+0x256>
     df4:	7b c0       	rjmp	.+246    	; 0xeec <udc_process_setup+0x326>
     df6:	95 30       	cpi	r25, 0x05	; 5
     df8:	19 f0       	breq	.+6      	; 0xe00 <udc_process_setup+0x23a>
     dfa:	99 30       	cpi	r25, 0x09	; 9
     dfc:	39 f1       	breq	.+78     	; 0xe4c <udc_process_setup+0x286>
     dfe:	76 c0       	rjmp	.+236    	; 0xeec <udc_process_setup+0x326>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e00:	80 91 f7 27 	lds	r24, 0x27F7
     e04:	90 91 f8 27 	lds	r25, 0x27F8
     e08:	89 2b       	or	r24, r25
     e0a:	09 f0       	breq	.+2      	; 0xe0e <udc_process_setup+0x248>
     e0c:	c5 c0       	rjmp	.+394    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e0e:	84 ed       	ldi	r24, 0xD4	; 212
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	80 93 fd 27 	sts	0x27FD, r24
     e16:	90 93 fe 27 	sts	0x27FE, r25
     e1a:	0d c1       	rjmp	.+538    	; 0x1036 <udc_process_setup+0x470>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e1c:	80 91 f7 27 	lds	r24, 0x27F7
     e20:	90 91 f8 27 	lds	r25, 0x27F8
     e24:	89 2b       	or	r24, r25
     e26:	09 f0       	breq	.+2      	; 0xe2a <udc_process_setup+0x264>
     e28:	b7 c0       	rjmp	.+366    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e2a:	80 91 f3 27 	lds	r24, 0x27F3
     e2e:	90 91 f4 27 	lds	r25, 0x27F4
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	09 f0       	breq	.+2      	; 0xe38 <udc_process_setup+0x272>
     e36:	b0 c0       	rjmp	.+352    	; 0xf98 <udc_process_setup+0x3d2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e38:	80 91 6d 26 	lds	r24, 0x266D
     e3c:	90 91 6e 26 	lds	r25, 0x266E
     e40:	8d 7f       	andi	r24, 0xFD	; 253
     e42:	80 93 6d 26 	sts	0x266D, r24
     e46:	90 93 6e 26 	sts	0x266E, r25
     e4a:	f5 c0       	rjmp	.+490    	; 0x1036 <udc_process_setup+0x470>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     e4c:	80 91 f7 27 	lds	r24, 0x27F7
     e50:	90 91 f8 27 	lds	r25, 0x27F8
     e54:	89 2b       	or	r24, r25
     e56:	09 f0       	breq	.+2      	; 0xe5a <udc_process_setup+0x294>
     e58:	9f c0       	rjmp	.+318    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     e5a:	0e 94 38 13 	call	0x2670	; 0x2670 <udd_getaddress>
     e5e:	88 23       	and	r24, r24
     e60:	09 f4       	brne	.+2      	; 0xe64 <udc_process_setup+0x29e>
     e62:	9a c0       	rjmp	.+308    	; 0xf98 <udc_process_setup+0x3d2>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e64:	20 91 f3 27 	lds	r18, 0x27F3
     e68:	30 91 f4 27 	lds	r19, 0x27F4
     e6c:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     e6e:	e0 91 1a 20 	lds	r30, 0x201A
     e72:	f0 91 1b 20 	lds	r31, 0x201B
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e76:	81 89       	ldd	r24, Z+17	; 0x11
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	82 17       	cp	r24, r18
     e7c:	93 07       	cpc	r25, r19
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <udc_process_setup+0x2bc>
     e80:	8b c0       	rjmp	.+278    	; 0xf98 <udc_process_setup+0x3d2>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     e82:	4a de       	rcall	.-876    	; 0xb18 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     e84:	80 91 f3 27 	lds	r24, 0x27F3
     e88:	90 91 f4 27 	lds	r25, 0x27F4
     e8c:	80 93 6c 26 	sts	0x266C, r24
	if (udc_num_configuration == 0) {
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <udc_process_setup+0x2d0>
     e94:	d0 c0       	rjmp	.+416    	; 0x1036 <udc_process_setup+0x470>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     e96:	99 27       	eor	r25, r25
     e98:	81 50       	subi	r24, 0x01	; 1
     e9a:	90 4c       	sbci	r25, 0xC0	; 192
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	e0 91 1c 20 	lds	r30, 0x201C
     ea8:	f0 91 1d 20 	lds	r31, 0x201D
     eac:	e8 0f       	add	r30, r24
     eae:	f9 1f       	adc	r31, r25
     eb0:	e0 93 6a 26 	sts	0x266A, r30
     eb4:	f0 93 6b 26 	sts	0x266B, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     eb8:	01 90       	ld	r0, Z+
     eba:	f0 81       	ld	r31, Z
     ebc:	e0 2d       	mov	r30, r0
     ebe:	84 81       	ldd	r24, Z+4	; 0x04
     ec0:	88 23       	and	r24, r24
     ec2:	09 f4       	brne	.+2      	; 0xec6 <udc_process_setup+0x300>
     ec4:	b8 c0       	rjmp	.+368    	; 0x1036 <udc_process_setup+0x470>
     ec6:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	8c 2f       	mov	r24, r28
     ecc:	ef dd       	rcall	.-1058   	; 0xaac <udc_iface_enable>
     ece:	88 23       	and	r24, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <udc_process_setup+0x30e>
     ed2:	62 c0       	rjmp	.+196    	; 0xf98 <udc_process_setup+0x3d2>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ed4:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ed6:	e0 91 6a 26 	lds	r30, 0x266A
     eda:	f0 91 6b 26 	lds	r31, 0x266B
     ede:	01 90       	ld	r0, Z+
     ee0:	f0 81       	ld	r31, Z
     ee2:	e0 2d       	mov	r30, r0
     ee4:	84 81       	ldd	r24, Z+4	; 0x04
     ee6:	c8 17       	cp	r28, r24
     ee8:	78 f3       	brcs	.-34     	; 0xec8 <udc_process_setup+0x302>
     eea:	a5 c0       	rjmp	.+330    	; 0x1036 <udc_process_setup+0x470>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	e1 f4       	brne	.+56     	; 0xf28 <udc_process_setup+0x362>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ef0:	90 91 f2 27 	lds	r25, 0x27F2
     ef4:	9b 30       	cpi	r25, 0x0B	; 11
     ef6:	c1 f4       	brne	.+48     	; 0xf28 <udc_process_setup+0x362>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     ef8:	80 91 f7 27 	lds	r24, 0x27F7
     efc:	90 91 f8 27 	lds	r25, 0x27F8
     f00:	89 2b       	or	r24, r25
     f02:	09 f0       	breq	.+2      	; 0xf06 <udc_process_setup+0x340>
     f04:	49 c0       	rjmp	.+146    	; 0xf98 <udc_process_setup+0x3d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f06:	80 91 6c 26 	lds	r24, 0x266C
     f0a:	88 23       	and	r24, r24
     f0c:	09 f4       	brne	.+2      	; 0xf10 <udc_process_setup+0x34a>
     f0e:	44 c0       	rjmp	.+136    	; 0xf98 <udc_process_setup+0x3d2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f10:	e1 ef       	ldi	r30, 0xF1	; 241
     f12:	f7 e2       	ldi	r31, 0x27	; 39
     f14:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     f16:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     f18:	8c 2f       	mov	r24, r28
     f1a:	86 dd       	rcall	.-1268   	; 0xa28 <udc_iface_disable>
     f1c:	88 23       	and	r24, r24
     f1e:	e1 f1       	breq	.+120    	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f20:	6d 2f       	mov	r22, r29
     f22:	8c 2f       	mov	r24, r28
     f24:	c3 dd       	rcall	.-1146   	; 0xaac <udc_iface_enable>
     f26:	36 c0       	rjmp	.+108    	; 0xf94 <udc_process_setup+0x3ce>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	b1 f5       	brne	.+108    	; 0xf98 <udc_process_setup+0x3d2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     f2c:	80 91 f2 27 	lds	r24, 0x27F2
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	19 f0       	breq	.+6      	; 0xf3a <udc_process_setup+0x374>
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	91 f0       	breq	.+36     	; 0xf5c <udc_process_setup+0x396>
     f38:	2c c0       	rjmp	.+88     	; 0xf92 <udc_process_setup+0x3cc>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f3a:	80 91 f7 27 	lds	r24, 0x27F7
     f3e:	90 91 f8 27 	lds	r25, 0x27F8
     f42:	89 2b       	or	r24, r25
     f44:	49 f5       	brne	.+82     	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f46:	80 91 f3 27 	lds	r24, 0x27F3
     f4a:	90 91 f4 27 	lds	r25, 0x27F4
     f4e:	89 2b       	or	r24, r25
     f50:	19 f5       	brne	.+70     	; 0xf98 <udc_process_setup+0x3d2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f52:	80 91 f5 27 	lds	r24, 0x27F5
     f56:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <udd_ep_clear_halt>
     f5a:	1c c0       	rjmp	.+56     	; 0xf94 <udc_process_setup+0x3ce>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f5c:	80 91 f7 27 	lds	r24, 0x27F7
     f60:	90 91 f8 27 	lds	r25, 0x27F8
     f64:	89 2b       	or	r24, r25
     f66:	c1 f4       	brne	.+48     	; 0xf98 <udc_process_setup+0x3d2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f68:	80 91 f3 27 	lds	r24, 0x27F3
     f6c:	90 91 f4 27 	lds	r25, 0x27F4
     f70:	89 2b       	or	r24, r25
     f72:	91 f4       	brne	.+36     	; 0xf98 <udc_process_setup+0x3d2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     f74:	c1 ef       	ldi	r28, 0xF1	; 241
     f76:	d7 e2       	ldi	r29, 0x27	; 39
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <udd_ep_set_halt>
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <udc_process_setup+0x3ce>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <udc_process_setup+0x3ce>
				break;
			}
		}
#endif
	}
	return false;
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <udc_process_setup+0x3ce>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <udc_process_setup+0x3ce>
				break;
			}
		}
#endif
	}
	return false;
     f92:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f94:	81 11       	cpse	r24, r1
     f96:	50 c0       	rjmp	.+160    	; 0x1038 <udc_process_setup+0x472>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f98:	80 91 f1 27 	lds	r24, 0x27F1
     f9c:	8f 71       	andi	r24, 0x1F	; 31
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <udc_process_setup+0x3de>
     fa2:	3d c0       	rjmp	.+122    	; 0x101e <udc_process_setup+0x458>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     fa4:	80 91 6c 26 	lds	r24, 0x266C
     fa8:	88 23       	and	r24, r24
     faa:	99 f1       	breq	.+102    	; 0x1012 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fac:	c0 91 f5 27 	lds	r28, 0x27F5
     fb0:	d0 91 f6 27 	lds	r29, 0x27F6
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     fb4:	00 91 6a 26 	lds	r16, 0x266A
     fb8:	10 91 6b 26 	lds	r17, 0x266B
     fbc:	d8 01       	movw	r26, r16
     fbe:	ed 91       	ld	r30, X+
     fc0:	fc 91       	ld	r31, X
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	c8 17       	cp	r28, r24
     fc6:	38 f5       	brcc	.+78     	; 0x1016 <udc_process_setup+0x450>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	8c 2f       	mov	r24, r28
     fcc:	f3 dc       	rcall	.-1562   	; 0x9b4 <udc_update_iface_desc>
     fce:	88 23       	and	r24, r24
     fd0:	99 f1       	breq	.+102    	; 0x1038 <udc_process_setup+0x472>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fd2:	fe 01       	movw	r30, r28
     fd4:	ff 27       	eor	r31, r31
     fd6:	cf 01       	movw	r24, r30
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	d8 01       	movw	r26, r16
     fde:	12 96       	adiw	r26, 0x02	; 2
     fe0:	ed 91       	ld	r30, X+
     fe2:	fc 91       	ld	r31, X
     fe4:	13 97       	sbiw	r26, 0x03	; 3
     fe6:	e8 0f       	add	r30, r24
     fe8:	f9 1f       	adc	r31, r25
     fea:	00 81       	ld	r16, Z
     fec:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fee:	d8 01       	movw	r26, r16
     ff0:	16 96       	adiw	r26, 0x06	; 6
     ff2:	ed 91       	ld	r30, X+
     ff4:	fc 91       	ld	r31, X
     ff6:	17 97       	sbiw	r26, 0x07	; 7
     ff8:	19 95       	eicall
     ffa:	68 2f       	mov	r22, r24
     ffc:	8c 2f       	mov	r24, r28
     ffe:	da dc       	rcall	.-1612   	; 0x9b4 <udc_update_iface_desc>
    1000:	88 23       	and	r24, r24
    1002:	d1 f0       	breq	.+52     	; 0x1038 <udc_process_setup+0x472>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1004:	d8 01       	movw	r26, r16
    1006:	14 96       	adiw	r26, 0x04	; 4
    1008:	ed 91       	ld	r30, X+
    100a:	fc 91       	ld	r31, X
    100c:	15 97       	sbiw	r26, 0x05	; 5
    100e:	19 95       	eicall
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <udc_process_setup+0x472>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	11 c0       	rjmp	.+34     	; 0x1038 <udc_process_setup+0x472>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <udc_process_setup+0x472>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <udc_process_setup+0x472>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0b c0       	rjmp	.+22     	; 0x1038 <udc_process_setup+0x472>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1022:	98 2f       	mov	r25, r24
    1024:	90 76       	andi	r25, 0x60	; 96
    1026:	09 f0       	breq	.+2      	; 0x102a <udc_process_setup+0x464>
    1028:	b7 cf       	rjmp	.-146    	; 0xf98 <udc_process_setup+0x3d2>
    102a:	d9 ce       	rjmp	.-590    	; 0xdde <udc_process_setup+0x218>
    102c:	98 2f       	mov	r25, r24
    102e:	90 76       	andi	r25, 0x60	; 96
    1030:	09 f0       	breq	.+2      	; 0x1034 <udc_process_setup+0x46e>
    1032:	b2 cf       	rjmp	.-156    	; 0xf98 <udc_process_setup+0x3d2>
    1034:	e1 cd       	rjmp	.-1086   	; 0xbf8 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1036:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <_read>:
#elif (defined(__GNUC__) && XMEGA)

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    104c:	80 91 ef 27 	lds	r24, 0x27EF
    1050:	90 91 f0 27 	lds	r25, 0x27F0
    1054:	e0 91 eb 27 	lds	r30, 0x27EB
    1058:	f0 91 ec 27 	lds	r31, 0x27EC
    105c:	be 01       	movw	r22, r28
    105e:	6f 5f       	subi	r22, 0xFF	; 255
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	19 95       	eicall
	return c;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
}
    1066:	08 2e       	mov	r0, r24
    1068:	00 0c       	add	r0, r0
    106a:	99 0b       	sbc	r25, r25
    106c:	0f 90       	pop	r0
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <stdio_usb_putchar>:
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
    1074:	80 91 6f 26 	lds	r24, 0x266F
    1078:	88 23       	and	r24, r24
    107a:	81 f0       	breq	.+32     	; 0x109c <stdio_usb_putchar+0x28>
    107c:	86 2f       	mov	r24, r22
    107e:	08 2e       	mov	r0, r24
    1080:	00 0c       	add	r0, r0
    1082:	99 0b       	sbc	r25, r25
    1084:	5b dc       	rcall	.-1866   	; 0x93c <udi_cdc_putc>
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	89 2b       	or	r24, r25
    108c:	11 f0       	breq	.+4      	; 0x1092 <stdio_usb_putchar+0x1e>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	88 27       	eor	r24, r24
    1094:	99 27       	eor	r25, r25
    1096:	82 1b       	sub	r24, r18
    1098:	93 0b       	sbc	r25, r19
    109a:	08 95       	ret
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	08 95       	ret

000010a2 <stdio_usb_getchar>:
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	80 91 6f 26 	lds	r24, 0x266F
    10aa:	81 11       	cpse	r24, r1
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <stdio_usb_getchar+0x12>
    10ae:	fb 01       	movw	r30, r22
    10b0:	10 82       	st	Z, r1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <stdio_usb_getchar+0x18>
    10b4:	eb 01       	movw	r28, r22
    10b6:	c6 db       	rcall	.-2164   	; 0x844 <udi_cdc_getc>
    10b8:	88 83       	st	Y, r24
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 93 6f 26 	sts	0x266F, r24
	return true;
}
    10c6:	08 95       	ret

000010c8 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    10c8:	10 92 6f 26 	sts	0x266F, r1
    10cc:	08 95       	ret

000010ce <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    10ce:	10 92 ef 27 	sts	0x27EF, r1
    10d2:	10 92 f0 27 	sts	0x27F0, r1
	ptr_put = stdio_usb_putchar;
    10d6:	8a e3       	ldi	r24, 0x3A	; 58
    10d8:	98 e0       	ldi	r25, 0x08	; 8
    10da:	80 93 ed 27 	sts	0x27ED, r24
    10de:	90 93 ee 27 	sts	0x27EE, r25
	ptr_get = stdio_usb_getchar;
    10e2:	81 e5       	ldi	r24, 0x51	; 81
    10e4:	98 e0       	ldi	r25, 0x08	; 8
    10e6:	80 93 eb 27 	sts	0x27EB, r24
    10ea:	90 93 ec 27 	sts	0x27EC, r25
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    10ee:	11 dd       	rcall	.-1502   	; 0xb12 <udc_start>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
    10f0:	0e 94 0e 13 	call	0x261c	; 0x261c <udd_include_vbus_monitoring>

	if (!udc_include_vbus_monitoring()) {
    10f4:	81 11       	cpse	r24, r1
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <stdio_usb_init+0x2e>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    10f8:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_attach>
	}

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    10fc:	61 e2       	ldi	r22, 0x21	; 33
    10fe:	78 e0       	ldi	r23, 0x08	; 8
    1100:	85 e8       	ldi	r24, 0x85	; 133
    1102:	98 e0       	ldi	r25, 0x08	; 8
    1104:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <fdevopen>
    1108:	08 95       	ret

0000110a <_write>:
#elif (defined(__GNUC__) && XMEGA)

int _write (char c, int *f);

int _write (char c, int *f)
{
    110a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    110c:	80 91 ef 27 	lds	r24, 0x27EF
    1110:	90 91 f0 27 	lds	r25, 0x27F0
    1114:	e0 91 ed 27 	lds	r30, 0x27ED
    1118:	f0 91 ee 27 	lds	r31, 0x27EE
    111c:	19 95       	eicall
    111e:	99 23       	and	r25, r25
    1120:	1c f0       	brlt	.+6      	; 0x1128 <_write+0x1e>
		return -1;
	}
	return 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    112c:	08 95       	ret

0000112e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    112e:	43 e0       	ldi	r20, 0x03	; 3
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	80 ee       	ldi	r24, 0xE0	; 224
    1136:	97 e0       	ldi	r25, 0x07	; 7
    1138:	34 d9       	rcall	.-3480   	; 0x3a2 <ioport_configure_port_pin>
    113a:	43 e0       	ldi	r20, 0x03	; 3
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	80 ee       	ldi	r24, 0xE0	; 224
    1142:	97 e0       	ldi	r25, 0x07	; 7
    1144:	2e d9       	rcall	.-3492   	; 0x3a2 <ioport_configure_port_pin>
    1146:	43 e0       	ldi	r20, 0x03	; 3
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	60 e1       	ldi	r22, 0x10	; 16
    114c:	80 e6       	ldi	r24, 0x60	; 96
    114e:	96 e0       	ldi	r25, 0x06	; 6
    1150:	28 d9       	rcall	.-3504   	; 0x3a2 <ioport_configure_port_pin>
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	50 e4       	ldi	r21, 0x40	; 64
    1156:	60 e2       	ldi	r22, 0x20	; 32
    1158:	80 e6       	ldi	r24, 0x60	; 96
    115a:	96 e0       	ldi	r25, 0x06	; 6
    115c:	22 d9       	rcall	.-3516   	; 0x3a2 <ioport_configure_port_pin>
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	5b e1       	ldi	r21, 0x1B	; 27
    1162:	60 e2       	ldi	r22, 0x20	; 32
    1164:	80 e8       	ldi	r24, 0x80	; 128
    1166:	96 e0       	ldi	r25, 0x06	; 6
    1168:	1c d9       	rcall	.-3528   	; 0x3a2 <ioport_configure_port_pin>
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	5b e1       	ldi	r21, 0x1B	; 27
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	80 ea       	ldi	r24, 0xA0	; 160
    1172:	96 e0       	ldi	r25, 0x06	; 6
    1174:	16 d9       	rcall	.-3540   	; 0x3a2 <ioport_configure_port_pin>
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	5b e1       	ldi	r21, 0x1B	; 27
    117a:	64 e0       	ldi	r22, 0x04	; 4
    117c:	80 ea       	ldi	r24, 0xA0	; 160
    117e:	96 e0       	ldi	r25, 0x06	; 6
    1180:	10 d9       	rcall	.-3552   	; 0x3a2 <ioport_configure_port_pin>
    1182:	43 e0       	ldi	r20, 0x03	; 3
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	62 e0       	ldi	r22, 0x02	; 2
    1188:	80 e6       	ldi	r24, 0x60	; 96
    118a:	96 e0       	ldi	r25, 0x06	; 6
    118c:	0a d9       	rcall	.-3564   	; 0x3a2 <ioport_configure_port_pin>
    118e:	43 e0       	ldi	r20, 0x03	; 3
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	68 e0       	ldi	r22, 0x08	; 8
    1194:	80 e6       	ldi	r24, 0x60	; 96
    1196:	96 e0       	ldi	r25, 0x06	; 6
    1198:	04 d9       	rcall	.-3576   	; 0x3a2 <ioport_configure_port_pin>
    119a:	43 e0       	ldi	r20, 0x03	; 3
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	68 e0       	ldi	r22, 0x08	; 8
    11a0:	80 ea       	ldi	r24, 0xA0	; 160
    11a2:	96 e0       	ldi	r25, 0x06	; 6
    11a4:	fe d8       	rcall	.-3588   	; 0x3a2 <ioport_configure_port_pin>
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	80 e6       	ldi	r24, 0x60	; 96
    11ae:	96 e0       	ldi	r25, 0x06	; 6
    11b0:	f8 d8       	rcall	.-3600   	; 0x3a2 <ioport_configure_port_pin>
    11b2:	43 e0       	ldi	r20, 0x03	; 3
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	68 e0       	ldi	r22, 0x08	; 8
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	96 e0       	ldi	r25, 0x06	; 6
    11bc:	f2 d8       	rcall	.-3612   	; 0x3a2 <ioport_configure_port_pin>
    11be:	41 e0       	ldi	r20, 0x01	; 1
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	60 e1       	ldi	r22, 0x10	; 16
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	96 e0       	ldi	r25, 0x06	; 6
    11c8:	ec d8       	rcall	.-3624   	; 0x3a2 <ioport_configure_port_pin>
    11ca:	43 e0       	ldi	r20, 0x03	; 3
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	62 e0       	ldi	r22, 0x02	; 2
    11d0:	80 e6       	ldi	r24, 0x60	; 96
    11d2:	96 e0       	ldi	r25, 0x06	; 6
    11d4:	e6 d8       	rcall	.-3636   	; 0x3a2 <ioport_configure_port_pin>
    11d6:	43 e0       	ldi	r20, 0x03	; 3
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	68 e0       	ldi	r22, 0x08	; 8
    11dc:	80 e6       	ldi	r24, 0x60	; 96
    11de:	96 e0       	ldi	r25, 0x06	; 6
    11e0:	e0 d8       	rcall	.-3648   	; 0x3a2 <ioport_configure_port_pin>
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	80 e6       	ldi	r24, 0x60	; 96
    11ea:	96 e0       	ldi	r25, 0x06	; 6
    11ec:	da d8       	rcall	.-3660   	; 0x3a2 <ioport_configure_port_pin>
    11ee:	43 e0       	ldi	r20, 0x03	; 3
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	60 e1       	ldi	r22, 0x10	; 16
    11f4:	80 ea       	ldi	r24, 0xA0	; 160
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	d4 d8       	rcall	.-3672   	; 0x3a2 <ioport_configure_port_pin>
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	96 e0       	ldi	r25, 0x06	; 6
    1204:	ce d8       	rcall	.-3684   	; 0x3a2 <ioport_configure_port_pin>
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	64 e0       	ldi	r22, 0x04	; 4
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	96 e0       	ldi	r25, 0x06	; 6
    1210:	c8 d8       	rcall	.-3696   	; 0x3a2 <ioport_configure_port_pin>
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	62 e0       	ldi	r22, 0x02	; 2
    1218:	80 e2       	ldi	r24, 0x20	; 32
    121a:	96 e0       	ldi	r25, 0x06	; 6
    121c:	c2 d8       	rcall	.-3708   	; 0x3a2 <ioport_configure_port_pin>
    121e:	43 e0       	ldi	r20, 0x03	; 3
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	68 e0       	ldi	r22, 0x08	; 8
    1224:	80 e4       	ldi	r24, 0x40	; 64
    1226:	96 e0       	ldi	r25, 0x06	; 6
    1228:	bc d8       	rcall	.-3720   	; 0x3a2 <ioport_configure_port_pin>
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	64 e0       	ldi	r22, 0x04	; 4
    1230:	80 e4       	ldi	r24, 0x40	; 64
    1232:	96 e0       	ldi	r25, 0x06	; 6
    1234:	b6 d8       	rcall	.-3732   	; 0x3a2 <ioport_configure_port_pin>
    1236:	43 e0       	ldi	r20, 0x03	; 3
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	68 e0       	ldi	r22, 0x08	; 8
    123c:	80 e6       	ldi	r24, 0x60	; 96
    123e:	96 e0       	ldi	r25, 0x06	; 6
    1240:	b0 d8       	rcall	.-3744   	; 0x3a2 <ioport_configure_port_pin>
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	64 e0       	ldi	r22, 0x04	; 4
    1248:	80 e6       	ldi	r24, 0x60	; 96
    124a:	96 e0       	ldi	r25, 0x06	; 6
    124c:	aa d8       	rcall	.-3756   	; 0x3a2 <ioport_configure_port_pin>
    124e:	43 e0       	ldi	r20, 0x03	; 3
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	68 e0       	ldi	r22, 0x08	; 8
    1254:	80 e8       	ldi	r24, 0x80	; 128
    1256:	96 e0       	ldi	r25, 0x06	; 6
    1258:	a4 d8       	rcall	.-3768   	; 0x3a2 <ioport_configure_port_pin>
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	64 e0       	ldi	r22, 0x04	; 4
    1260:	80 e8       	ldi	r24, 0x80	; 128
    1262:	96 e0       	ldi	r25, 0x06	; 6
    1264:	9e c8       	rjmp	.-3780   	; 0x3a2 <ioport_configure_port_pin>
    1266:	08 95       	ret

00001268 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1268:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    126a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    126c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    126e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1270:	60 83       	st	Z, r22
	ret                             // Return to caller
    1272:	08 95       	ret

00001274 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1274:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1278:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    127a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    127c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1280:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1282:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1286:	08 95       	ret

00001288 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	0b b6       	in	r0, 0x3b	; 59
    1294:	0f 92       	push	r0
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    12ae:	e0 91 b6 26 	lds	r30, 0x26B6
    12b2:	f0 91 b7 26 	lds	r31, 0x26B7
    12b6:	30 97       	sbiw	r30, 0x00	; 0
    12b8:	09 f0       	breq	.+2      	; 0x12bc <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    12ba:	19 95       	eicall
	}
}
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0b be       	out	0x3b, r0	; 59
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	0b b6       	in	r0, 0x3b	; 59
    12ee:	0f 92       	push	r0
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	4f 93       	push	r20
    12f6:	5f 93       	push	r21
    12f8:	6f 93       	push	r22
    12fa:	7f 93       	push	r23
    12fc:	8f 93       	push	r24
    12fe:	9f 93       	push	r25
    1300:	af 93       	push	r26
    1302:	bf 93       	push	r27
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    1308:	e0 91 b4 26 	lds	r30, 0x26B4
    130c:	f0 91 b5 26 	lds	r31, 0x26B5
    1310:	30 97       	sbiw	r30, 0x00	; 0
    1312:	09 f0       	breq	.+2      	; 0x1316 <__vector_15+0x34>
		tc_tcc0_err_callback();
    1314:	19 95       	eicall
	}
}
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0b be       	out	0x3b, r0	; 59
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	0b b6       	in	r0, 0x3b	; 59
    1348:	0f 92       	push	r0
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    1362:	e0 91 b2 26 	lds	r30, 0x26B2
    1366:	f0 91 b3 26 	lds	r31, 0x26B3
    136a:	30 97       	sbiw	r30, 0x00	; 0
    136c:	09 f0       	breq	.+2      	; 0x1370 <__vector_16+0x34>
		tc_tcc0_cca_callback();
    136e:	19 95       	eicall
	}
}
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0b be       	out	0x3b, r0	; 59
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    13bc:	e0 91 b0 26 	lds	r30, 0x26B0
    13c0:	f0 91 b1 26 	lds	r31, 0x26B1
    13c4:	30 97       	sbiw	r30, 0x00	; 0
    13c6:	09 f0       	breq	.+2      	; 0x13ca <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    13c8:	19 95       	eicall
	}
}
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0b be       	out	0x3b, r0	; 59
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	0b b6       	in	r0, 0x3b	; 59
    13fc:	0f 92       	push	r0
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    1416:	e0 91 ae 26 	lds	r30, 0x26AE
    141a:	f0 91 af 26 	lds	r31, 0x26AF
    141e:	30 97       	sbiw	r30, 0x00	; 0
    1420:	09 f0       	breq	.+2      	; 0x1424 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    1422:	19 95       	eicall
	}
}
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0b be       	out	0x3b, r0	; 59
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	0b b6       	in	r0, 0x3b	; 59
    1456:	0f 92       	push	r0
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1470:	e0 91 ac 26 	lds	r30, 0x26AC
    1474:	f0 91 ad 26 	lds	r31, 0x26AD
    1478:	30 97       	sbiw	r30, 0x00	; 0
    147a:	09 f0       	breq	.+2      	; 0x147e <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    147c:	19 95       	eicall
	}
}
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0b be       	out	0x3b, r0	; 59
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	0b b6       	in	r0, 0x3b	; 59
    14b0:	0f 92       	push	r0
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    14ca:	e0 91 aa 26 	lds	r30, 0x26AA
    14ce:	f0 91 ab 26 	lds	r31, 0x26AB
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    14d6:	19 95       	eicall
	}
}
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0b be       	out	0x3b, r0	; 59
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	0b b6       	in	r0, 0x3b	; 59
    150a:	0f 92       	push	r0
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1524:	e0 91 a8 26 	lds	r30, 0x26A8
    1528:	f0 91 a9 26 	lds	r31, 0x26A9
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <__vector_21+0x34>
		tc_tcc1_err_callback();
    1530:	19 95       	eicall
	}
}
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0b be       	out	0x3b, r0	; 59
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    157e:	e0 91 a6 26 	lds	r30, 0x26A6
    1582:	f0 91 a7 26 	lds	r31, 0x26A7
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_22+0x34>
		tc_tcc1_cca_callback();
    158a:	19 95       	eicall
	}
}
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0b be       	out	0x3b, r0	; 59
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	0b b6       	in	r0, 0x3b	; 59
    15be:	0f 92       	push	r0
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    15d8:	e0 91 a4 26 	lds	r30, 0x26A4
    15dc:	f0 91 a5 26 	lds	r31, 0x26A5
    15e0:	30 97       	sbiw	r30, 0x00	; 0
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    15e4:	19 95       	eicall
	}
}
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0b be       	out	0x3b, r0	; 59
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    160c:	1f 92       	push	r1
    160e:	0f 92       	push	r0
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	0f 92       	push	r0
    1614:	11 24       	eor	r1, r1
    1616:	0b b6       	in	r0, 0x3b	; 59
    1618:	0f 92       	push	r0
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1632:	e0 91 a2 26 	lds	r30, 0x26A2
    1636:	f0 91 a3 26 	lds	r31, 0x26A3
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	09 f0       	breq	.+2      	; 0x1640 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    163e:	19 95       	eicall
	}
}
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0b be       	out	0x3b, r0	; 59
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    168c:	e0 91 a0 26 	lds	r30, 0x26A0
    1690:	f0 91 a1 26 	lds	r31, 0x26A1
    1694:	30 97       	sbiw	r30, 0x00	; 0
    1696:	09 f0       	breq	.+2      	; 0x169a <__vector_78+0x34>
		tc_tcd0_err_callback();
    1698:	19 95       	eicall
	}
}
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0b be       	out	0x3b, r0	; 59
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	0f 90       	pop	r0
    16bc:	1f 90       	pop	r1
    16be:	18 95       	reti

000016c0 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	0b b6       	in	r0, 0x3b	; 59
    16cc:	0f 92       	push	r0
    16ce:	2f 93       	push	r18
    16d0:	3f 93       	push	r19
    16d2:	4f 93       	push	r20
    16d4:	5f 93       	push	r21
    16d6:	6f 93       	push	r22
    16d8:	7f 93       	push	r23
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
    16de:	af 93       	push	r26
    16e0:	bf 93       	push	r27
    16e2:	ef 93       	push	r30
    16e4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    16e6:	e0 91 9e 26 	lds	r30, 0x269E
    16ea:	f0 91 9f 26 	lds	r31, 0x269F
    16ee:	30 97       	sbiw	r30, 0x00	; 0
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    16f2:	19 95       	eicall
	}
}
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1740:	e0 91 9c 26 	lds	r30, 0x269C
    1744:	f0 91 9d 26 	lds	r31, 0x269D
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	09 f0       	breq	.+2      	; 0x174e <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    174c:	19 95       	eicall
	}
}
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0b be       	out	0x3b, r0	; 59
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	0b b6       	in	r0, 0x3b	; 59
    1780:	0f 92       	push	r0
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    179a:	e0 91 9a 26 	lds	r30, 0x269A
    179e:	f0 91 9b 26 	lds	r31, 0x269B
    17a2:	30 97       	sbiw	r30, 0x00	; 0
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    17a6:	19 95       	eicall
	}
}
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0b be       	out	0x3b, r0	; 59
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	0b b6       	in	r0, 0x3b	; 59
    17da:	0f 92       	push	r0
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    17f4:	e0 91 98 26 	lds	r30, 0x2698
    17f8:	f0 91 99 26 	lds	r31, 0x2699
    17fc:	30 97       	sbiw	r30, 0x00	; 0
    17fe:	09 f0       	breq	.+2      	; 0x1802 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1800:	19 95       	eicall
	}
}
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	7f 91       	pop	r23
    1810:	6f 91       	pop	r22
    1812:	5f 91       	pop	r21
    1814:	4f 91       	pop	r20
    1816:	3f 91       	pop	r19
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0b be       	out	0x3b, r0	; 59
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	0b b6       	in	r0, 0x3b	; 59
    1834:	0f 92       	push	r0
    1836:	2f 93       	push	r18
    1838:	3f 93       	push	r19
    183a:	4f 93       	push	r20
    183c:	5f 93       	push	r21
    183e:	6f 93       	push	r22
    1840:	7f 93       	push	r23
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	ef 93       	push	r30
    184c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    184e:	e0 91 96 26 	lds	r30, 0x2696
    1852:	f0 91 97 26 	lds	r31, 0x2697
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	09 f0       	breq	.+2      	; 0x185c <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    185a:	19 95       	eicall
	}
}
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    18a8:	e0 91 94 26 	lds	r30, 0x2694
    18ac:	f0 91 95 26 	lds	r31, 0x2695
    18b0:	30 97       	sbiw	r30, 0x00	; 0
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <__vector_84+0x34>
		tc_tcd1_err_callback();
    18b4:	19 95       	eicall
	}
}
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	bf 91       	pop	r27
    18bc:	af 91       	pop	r26
    18be:	9f 91       	pop	r25
    18c0:	8f 91       	pop	r24
    18c2:	7f 91       	pop	r23
    18c4:	6f 91       	pop	r22
    18c6:	5f 91       	pop	r21
    18c8:	4f 91       	pop	r20
    18ca:	3f 91       	pop	r19
    18cc:	2f 91       	pop	r18
    18ce:	0f 90       	pop	r0
    18d0:	0b be       	out	0x3b, r0	; 59
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	0b b6       	in	r0, 0x3b	; 59
    18e8:	0f 92       	push	r0
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1902:	e0 91 92 26 	lds	r30, 0x2692
    1906:	f0 91 93 26 	lds	r31, 0x2693
    190a:	30 97       	sbiw	r30, 0x00	; 0
    190c:	09 f0       	breq	.+2      	; 0x1910 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    190e:	19 95       	eicall
	}
}
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0b be       	out	0x3b, r0	; 59
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	0b b6       	in	r0, 0x3b	; 59
    1942:	0f 92       	push	r0
    1944:	2f 93       	push	r18
    1946:	3f 93       	push	r19
    1948:	4f 93       	push	r20
    194a:	5f 93       	push	r21
    194c:	6f 93       	push	r22
    194e:	7f 93       	push	r23
    1950:	8f 93       	push	r24
    1952:	9f 93       	push	r25
    1954:	af 93       	push	r26
    1956:	bf 93       	push	r27
    1958:	ef 93       	push	r30
    195a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    195c:	e0 91 90 26 	lds	r30, 0x2690
    1960:	f0 91 91 26 	lds	r31, 0x2691
    1964:	30 97       	sbiw	r30, 0x00	; 0
    1966:	09 f0       	breq	.+2      	; 0x196a <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1968:	19 95       	eicall
	}
}
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	7f 91       	pop	r23
    1978:	6f 91       	pop	r22
    197a:	5f 91       	pop	r21
    197c:	4f 91       	pop	r20
    197e:	3f 91       	pop	r19
    1980:	2f 91       	pop	r18
    1982:	0f 90       	pop	r0
    1984:	0b be       	out	0x3b, r0	; 59
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	0f 90       	pop	r0
    198c:	1f 90       	pop	r1
    198e:	18 95       	reti

00001990 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1990:	1f 92       	push	r1
    1992:	0f 92       	push	r0
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	0f 92       	push	r0
    1998:	11 24       	eor	r1, r1
    199a:	0b b6       	in	r0, 0x3b	; 59
    199c:	0f 92       	push	r0
    199e:	2f 93       	push	r18
    19a0:	3f 93       	push	r19
    19a2:	4f 93       	push	r20
    19a4:	5f 93       	push	r21
    19a6:	6f 93       	push	r22
    19a8:	7f 93       	push	r23
    19aa:	8f 93       	push	r24
    19ac:	9f 93       	push	r25
    19ae:	af 93       	push	r26
    19b0:	bf 93       	push	r27
    19b2:	ef 93       	push	r30
    19b4:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    19b6:	e0 91 8e 26 	lds	r30, 0x268E
    19ba:	f0 91 8f 26 	lds	r31, 0x268F
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    19c2:	19 95       	eicall
	}
}
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	bf 91       	pop	r27
    19ca:	af 91       	pop	r26
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	7f 91       	pop	r23
    19d2:	6f 91       	pop	r22
    19d4:	5f 91       	pop	r21
    19d6:	4f 91       	pop	r20
    19d8:	3f 91       	pop	r19
    19da:	2f 91       	pop	r18
    19dc:	0f 90       	pop	r0
    19de:	0b be       	out	0x3b, r0	; 59
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	0b b6       	in	r0, 0x3b	; 59
    19f6:	0f 92       	push	r0
    19f8:	2f 93       	push	r18
    19fa:	3f 93       	push	r19
    19fc:	4f 93       	push	r20
    19fe:	5f 93       	push	r21
    1a00:	6f 93       	push	r22
    1a02:	7f 93       	push	r23
    1a04:	8f 93       	push	r24
    1a06:	9f 93       	push	r25
    1a08:	af 93       	push	r26
    1a0a:	bf 93       	push	r27
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1a10:	e0 91 8c 26 	lds	r30, 0x268C
    1a14:	f0 91 8d 26 	lds	r31, 0x268D
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <__vector_48+0x34>
		tc_tce0_err_callback();
    1a1c:	19 95       	eicall
	}
}
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0b be       	out	0x3b, r0	; 59
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1a44:	1f 92       	push	r1
    1a46:	0f 92       	push	r0
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	0f 92       	push	r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	0b b6       	in	r0, 0x3b	; 59
    1a50:	0f 92       	push	r0
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1a6a:	e0 91 8a 26 	lds	r30, 0x268A
    1a6e:	f0 91 8b 26 	lds	r31, 0x268B
    1a72:	30 97       	sbiw	r30, 0x00	; 0
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1a76:	19 95       	eicall
	}
}
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0b be       	out	0x3b, r0	; 59
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	0b b6       	in	r0, 0x3b	; 59
    1aaa:	0f 92       	push	r0
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1ac4:	e0 91 88 26 	lds	r30, 0x2688
    1ac8:	f0 91 89 26 	lds	r31, 0x2689
    1acc:	30 97       	sbiw	r30, 0x00	; 0
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    1ad0:	19 95       	eicall
	}
}
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	bf 91       	pop	r27
    1ad8:	af 91       	pop	r26
    1ada:	9f 91       	pop	r25
    1adc:	8f 91       	pop	r24
    1ade:	7f 91       	pop	r23
    1ae0:	6f 91       	pop	r22
    1ae2:	5f 91       	pop	r21
    1ae4:	4f 91       	pop	r20
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0b be       	out	0x3b, r0	; 59
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1b1e:	e0 91 86 26 	lds	r30, 0x2686
    1b22:	f0 91 87 26 	lds	r31, 0x2687
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1b2a:	19 95       	eicall
	}
}
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0b be       	out	0x3b, r0	; 59
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	0f 90       	pop	r0
    1b4e:	1f 90       	pop	r1
    1b50:	18 95       	reti

00001b52 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1b52:	1f 92       	push	r1
    1b54:	0f 92       	push	r0
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	0f 92       	push	r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	0b b6       	in	r0, 0x3b	; 59
    1b5e:	0f 92       	push	r0
    1b60:	2f 93       	push	r18
    1b62:	3f 93       	push	r19
    1b64:	4f 93       	push	r20
    1b66:	5f 93       	push	r21
    1b68:	6f 93       	push	r22
    1b6a:	7f 93       	push	r23
    1b6c:	8f 93       	push	r24
    1b6e:	9f 93       	push	r25
    1b70:	af 93       	push	r26
    1b72:	bf 93       	push	r27
    1b74:	ef 93       	push	r30
    1b76:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1b78:	e0 91 84 26 	lds	r30, 0x2684
    1b7c:	f0 91 85 26 	lds	r31, 0x2685
    1b80:	30 97       	sbiw	r30, 0x00	; 0
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1b84:	19 95       	eicall
	}
}
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	7f 91       	pop	r23
    1b94:	6f 91       	pop	r22
    1b96:	5f 91       	pop	r21
    1b98:	4f 91       	pop	r20
    1b9a:	3f 91       	pop	r19
    1b9c:	2f 91       	pop	r18
    1b9e:	0f 90       	pop	r0
    1ba0:	0b be       	out	0x3b, r0	; 59
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1bac:	1f 92       	push	r1
    1bae:	0f 92       	push	r0
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	0f 92       	push	r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	0b b6       	in	r0, 0x3b	; 59
    1bb8:	0f 92       	push	r0
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1bd2:	e0 91 82 26 	lds	r30, 0x2682
    1bd6:	f0 91 83 26 	lds	r31, 0x2683
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1bde:	19 95       	eicall
	}
}
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0b be       	out	0x3b, r0	; 59
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	0f 90       	pop	r0
    1c02:	1f 90       	pop	r1
    1c04:	18 95       	reti

00001c06 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1c2c:	e0 91 80 26 	lds	r30, 0x2680
    1c30:	f0 91 81 26 	lds	r31, 0x2681
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <__vector_54+0x34>
		tc_tce1_err_callback();
    1c38:	19 95       	eicall
	}
}
    1c3a:	ff 91       	pop	r31
    1c3c:	ef 91       	pop	r30
    1c3e:	bf 91       	pop	r27
    1c40:	af 91       	pop	r26
    1c42:	9f 91       	pop	r25
    1c44:	8f 91       	pop	r24
    1c46:	7f 91       	pop	r23
    1c48:	6f 91       	pop	r22
    1c4a:	5f 91       	pop	r21
    1c4c:	4f 91       	pop	r20
    1c4e:	3f 91       	pop	r19
    1c50:	2f 91       	pop	r18
    1c52:	0f 90       	pop	r0
    1c54:	0b be       	out	0x3b, r0	; 59
    1c56:	0f 90       	pop	r0
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	0f 90       	pop	r0
    1c5c:	1f 90       	pop	r1
    1c5e:	18 95       	reti

00001c60 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1c60:	1f 92       	push	r1
    1c62:	0f 92       	push	r0
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	0f 92       	push	r0
    1c68:	11 24       	eor	r1, r1
    1c6a:	0b b6       	in	r0, 0x3b	; 59
    1c6c:	0f 92       	push	r0
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1c86:	e0 91 7e 26 	lds	r30, 0x267E
    1c8a:	f0 91 7f 26 	lds	r31, 0x267F
    1c8e:	30 97       	sbiw	r30, 0x00	; 0
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <__vector_55+0x34>
		tc_tce1_cca_callback();
    1c92:	19 95       	eicall
	}
}
    1c94:	ff 91       	pop	r31
    1c96:	ef 91       	pop	r30
    1c98:	bf 91       	pop	r27
    1c9a:	af 91       	pop	r26
    1c9c:	9f 91       	pop	r25
    1c9e:	8f 91       	pop	r24
    1ca0:	7f 91       	pop	r23
    1ca2:	6f 91       	pop	r22
    1ca4:	5f 91       	pop	r21
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0b be       	out	0x3b, r0	; 59
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	0b b6       	in	r0, 0x3b	; 59
    1cc6:	0f 92       	push	r0
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1ce0:	e0 91 7c 26 	lds	r30, 0x267C
    1ce4:	f0 91 7d 26 	lds	r31, 0x267D
    1ce8:	30 97       	sbiw	r30, 0x00	; 0
    1cea:	09 f0       	breq	.+2      	; 0x1cee <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1cec:	19 95       	eicall
	}
}
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0b be       	out	0x3b, r0	; 59
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	0b b6       	in	r0, 0x3b	; 59
    1d20:	0f 92       	push	r0
    1d22:	2f 93       	push	r18
    1d24:	3f 93       	push	r19
    1d26:	4f 93       	push	r20
    1d28:	5f 93       	push	r21
    1d2a:	6f 93       	push	r22
    1d2c:	7f 93       	push	r23
    1d2e:	8f 93       	push	r24
    1d30:	9f 93       	push	r25
    1d32:	af 93       	push	r26
    1d34:	bf 93       	push	r27
    1d36:	ef 93       	push	r30
    1d38:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1d3a:	e0 91 7a 26 	lds	r30, 0x267A
    1d3e:	f0 91 7b 26 	lds	r31, 0x267B
    1d42:	30 97       	sbiw	r30, 0x00	; 0
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1d46:	19 95       	eicall
	}
}
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	bf 91       	pop	r27
    1d4e:	af 91       	pop	r26
    1d50:	9f 91       	pop	r25
    1d52:	8f 91       	pop	r24
    1d54:	7f 91       	pop	r23
    1d56:	6f 91       	pop	r22
    1d58:	5f 91       	pop	r21
    1d5a:	4f 91       	pop	r20
    1d5c:	3f 91       	pop	r19
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	0b be       	out	0x3b, r0	; 59
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	0b b6       	in	r0, 0x3b	; 59
    1d7a:	0f 92       	push	r0
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1d94:	e0 91 78 26 	lds	r30, 0x2678
    1d98:	f0 91 79 26 	lds	r31, 0x2679
    1d9c:	30 97       	sbiw	r30, 0x00	; 0
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <__vector_109+0x34>
		tc_tcf0_err_callback();
    1da0:	19 95       	eicall
	}
}
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0b be       	out	0x3b, r0	; 59
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	0b b6       	in	r0, 0x3b	; 59
    1dd4:	0f 92       	push	r0
    1dd6:	2f 93       	push	r18
    1dd8:	3f 93       	push	r19
    1dda:	4f 93       	push	r20
    1ddc:	5f 93       	push	r21
    1dde:	6f 93       	push	r22
    1de0:	7f 93       	push	r23
    1de2:	8f 93       	push	r24
    1de4:	9f 93       	push	r25
    1de6:	af 93       	push	r26
    1de8:	bf 93       	push	r27
    1dea:	ef 93       	push	r30
    1dec:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1dee:	e0 91 76 26 	lds	r30, 0x2676
    1df2:	f0 91 77 26 	lds	r31, 0x2677
    1df6:	30 97       	sbiw	r30, 0x00	; 0
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1dfa:	19 95       	eicall
	}
}
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0b be       	out	0x3b, r0	; 59
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	0b b6       	in	r0, 0x3b	; 59
    1e2e:	0f 92       	push	r0
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1e48:	e0 91 74 26 	lds	r30, 0x2674
    1e4c:	f0 91 75 26 	lds	r31, 0x2675
    1e50:	30 97       	sbiw	r30, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1e54:	19 95       	eicall
	}
}
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0b be       	out	0x3b, r0	; 59
    1e72:	0f 90       	pop	r0
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	0f 90       	pop	r0
    1e78:	1f 90       	pop	r1
    1e7a:	18 95       	reti

00001e7c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1e7c:	1f 92       	push	r1
    1e7e:	0f 92       	push	r0
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	0f 92       	push	r0
    1e84:	11 24       	eor	r1, r1
    1e86:	0b b6       	in	r0, 0x3b	; 59
    1e88:	0f 92       	push	r0
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1ea2:	e0 91 72 26 	lds	r30, 0x2672
    1ea6:	f0 91 73 26 	lds	r31, 0x2673
    1eaa:	30 97       	sbiw	r30, 0x00	; 0
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1eae:	19 95       	eicall
	}
}
    1eb0:	ff 91       	pop	r31
    1eb2:	ef 91       	pop	r30
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	7f 91       	pop	r23
    1ebe:	6f 91       	pop	r22
    1ec0:	5f 91       	pop	r21
    1ec2:	4f 91       	pop	r20
    1ec4:	3f 91       	pop	r19
    1ec6:	2f 91       	pop	r18
    1ec8:	0f 90       	pop	r0
    1eca:	0b be       	out	0x3b, r0	; 59
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	0b b6       	in	r0, 0x3b	; 59
    1ee2:	0f 92       	push	r0
    1ee4:	2f 93       	push	r18
    1ee6:	3f 93       	push	r19
    1ee8:	4f 93       	push	r20
    1eea:	5f 93       	push	r21
    1eec:	6f 93       	push	r22
    1eee:	7f 93       	push	r23
    1ef0:	8f 93       	push	r24
    1ef2:	9f 93       	push	r25
    1ef4:	af 93       	push	r26
    1ef6:	bf 93       	push	r27
    1ef8:	ef 93       	push	r30
    1efa:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1efc:	e0 91 70 26 	lds	r30, 0x2670
    1f00:	f0 91 71 26 	lds	r31, 0x2671
    1f04:	30 97       	sbiw	r30, 0x00	; 0
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1f08:	19 95       	eicall
	}
}
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0b be       	out	0x3b, r0	; 59
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1f30:	81 11       	cpse	r24, r1
    1f32:	18 c0       	rjmp	.+48     	; 0x1f64 <udd_sleep_mode+0x34>
    1f34:	90 91 e4 27 	lds	r25, 0x27E4
    1f38:	99 23       	and	r25, r25
    1f3a:	89 f0       	breq	.+34     	; 0x1f5e <udd_sleep_mode+0x2e>
    1f3c:	2f b7       	in	r18, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	e5 ee       	ldi	r30, 0xE5	; 229
    1f42:	f7 e2       	ldi	r31, 0x27	; 39
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	91 50       	subi	r25, 0x01	; 1
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	2f bf       	out	0x3f, r18	; 63
    1f4c:	08 c0       	rjmp	.+16     	; 0x1f5e <udd_sleep_mode+0x2e>
    1f4e:	2f b7       	in	r18, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	e5 ee       	ldi	r30, 0xE5	; 229
    1f54:	f7 e2       	ldi	r31, 0x27	; 39
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	9f 5f       	subi	r25, 0xFF	; 255
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	2f bf       	out	0x3f, r18	; 63
    1f5e:	80 93 e4 27 	sts	0x27E4, r24
    1f62:	08 95       	ret
    1f64:	90 91 e4 27 	lds	r25, 0x27E4
    1f68:	99 23       	and	r25, r25
    1f6a:	89 f3       	breq	.-30     	; 0x1f4e <udd_sleep_mode+0x1e>
    1f6c:	f8 cf       	rjmp	.-16     	; 0x1f5e <udd_sleep_mode+0x2e>

00001f6e <udd_ctrl_init>:
    1f6e:	0f 93       	push	r16
    1f70:	e8 ec       	ldi	r30, 0xC8	; 200
    1f72:	f4 e0       	ldi	r31, 0x04	; 4
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 7d       	andi	r24, 0xDF	; 223
    1f78:	80 83       	st	Z, r24
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8f 7d       	andi	r24, 0xDF	; 223
    1f7e:	80 83       	st	Z, r24
    1f80:	e8 eb       	ldi	r30, 0xB8	; 184
    1f82:	f7 e2       	ldi	r31, 0x27	; 39
    1f84:	02 e0       	ldi	r16, 0x02	; 2
    1f86:	05 93       	las	Z, r16
    1f88:	10 92 ba 27 	sts	0x27BA, r1
    1f8c:	10 92 bb 27 	sts	0x27BB, r1
    1f90:	00 e2       	ldi	r16, 0x20	; 32
    1f92:	06 93       	lac	Z, r16
    1f94:	00 e4       	ldi	r16, 0x40	; 64
    1f96:	06 93       	lac	Z, r16
    1f98:	e0 eb       	ldi	r30, 0xB0	; 176
    1f9a:	f7 e2       	ldi	r31, 0x27	; 39
    1f9c:	00 e2       	ldi	r16, 0x20	; 32
    1f9e:	06 93       	lac	Z, r16
    1fa0:	00 e4       	ldi	r16, 0x40	; 64
    1fa2:	06 93       	lac	Z, r16
    1fa4:	e1 ef       	ldi	r30, 0xF1	; 241
    1fa6:	f7 e2       	ldi	r31, 0x27	; 39
    1fa8:	14 86       	std	Z+12, r1	; 0x0c
    1faa:	15 86       	std	Z+13, r1	; 0x0d
    1fac:	16 86       	std	Z+14, r1	; 0x0e
    1fae:	17 86       	std	Z+15, r1	; 0x0f
    1fb0:	12 86       	std	Z+10, r1	; 0x0a
    1fb2:	13 86       	std	Z+11, r1	; 0x0b
    1fb4:	10 92 a1 27 	sts	0x27A1, r1
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

00001fbc <udd_ctrl_stall_data>:
    1fbc:	0f 93       	push	r16
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	80 93 a1 27 	sts	0x27A1, r24
    1fc4:	e9 eb       	ldi	r30, 0xB9	; 185
    1fc6:	f7 e2       	ldi	r31, 0x27	; 39
    1fc8:	04 e0       	ldi	r16, 0x04	; 4
    1fca:	05 93       	las	Z, r16
    1fcc:	e1 eb       	ldi	r30, 0xB1	; 177
    1fce:	f7 e2       	ldi	r31, 0x27	; 39
    1fd0:	04 e0       	ldi	r16, 0x04	; 4
    1fd2:	05 93       	las	Z, r16
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <udd_ctrl_send_zlp_in>:
    1fd8:	0f 93       	push	r16
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	80 93 a1 27 	sts	0x27A1, r24
    1fe0:	10 92 ba 27 	sts	0x27BA, r1
    1fe4:	10 92 bb 27 	sts	0x27BB, r1
    1fe8:	e8 eb       	ldi	r30, 0xB8	; 184
    1fea:	f7 e2       	ldi	r31, 0x27	; 39
    1fec:	02 e0       	ldi	r16, 0x02	; 2
    1fee:	06 93       	lac	Z, r16
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <udd_ctrl_endofrequest>:
    1ff4:	e0 91 fd 27 	lds	r30, 0x27FD
    1ff8:	f0 91 fe 27 	lds	r31, 0x27FE
    1ffc:	30 97       	sbiw	r30, 0x00	; 0
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <udd_ctrl_endofrequest+0xe>
    2000:	19 95       	eicall
    2002:	08 95       	ret

00002004 <udd_ctrl_in_sent>:
    2004:	0f 93       	push	r16
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	80 91 a1 27 	lds	r24, 0x27A1
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	19 f4       	brne	.+6      	; 0x2018 <udd_ctrl_in_sent+0x14>
    2012:	f0 df       	rcall	.-32     	; 0x1ff4 <udd_ctrl_endofrequest>
    2014:	ac df       	rcall	.-168    	; 0x1f6e <udd_ctrl_init>
    2016:	5e c0       	rjmp	.+188    	; 0x20d4 <udd_ctrl_in_sent+0xd0>
    2018:	80 91 9d 27 	lds	r24, 0x279D
    201c:	90 91 9e 27 	lds	r25, 0x279E
    2020:	c0 91 fb 27 	lds	r28, 0x27FB
    2024:	d0 91 fc 27 	lds	r29, 0x27FC
    2028:	c8 1b       	sub	r28, r24
    202a:	d9 0b       	sbc	r29, r25
    202c:	71 f5       	brne	.+92     	; 0x208a <udd_ctrl_in_sent+0x86>
    202e:	20 91 9f 27 	lds	r18, 0x279F
    2032:	30 91 a0 27 	lds	r19, 0x27A0
    2036:	82 0f       	add	r24, r18
    2038:	93 1f       	adc	r25, r19
    203a:	80 93 9f 27 	sts	0x279F, r24
    203e:	90 93 a0 27 	sts	0x27A0, r25
    2042:	20 91 f7 27 	lds	r18, 0x27F7
    2046:	30 91 f8 27 	lds	r19, 0x27F8
    204a:	82 17       	cp	r24, r18
    204c:	93 07       	cpc	r25, r19
    204e:	21 f0       	breq	.+8      	; 0x2058 <udd_ctrl_in_sent+0x54>
    2050:	80 91 b8 26 	lds	r24, 0x26B8
    2054:	88 23       	and	r24, r24
    2056:	41 f0       	breq	.+16     	; 0x2068 <udd_ctrl_in_sent+0x64>
    2058:	84 e0       	ldi	r24, 0x04	; 4
    205a:	80 93 a1 27 	sts	0x27A1, r24
    205e:	e0 eb       	ldi	r30, 0xB0	; 176
    2060:	f7 e2       	ldi	r31, 0x27	; 39
    2062:	02 e0       	ldi	r16, 0x02	; 2
    2064:	06 93       	lac	Z, r16
    2066:	36 c0       	rjmp	.+108    	; 0x20d4 <udd_ctrl_in_sent+0xd0>
    2068:	e0 91 ff 27 	lds	r30, 0x27FF
    206c:	f0 91 00 28 	lds	r31, 0x2800
    2070:	30 97       	sbiw	r30, 0x00	; 0
    2072:	99 f0       	breq	.+38     	; 0x209a <udd_ctrl_in_sent+0x96>
    2074:	19 95       	eicall
    2076:	88 23       	and	r24, r24
    2078:	81 f0       	breq	.+32     	; 0x209a <udd_ctrl_in_sent+0x96>
    207a:	10 92 9d 27 	sts	0x279D, r1
    207e:	10 92 9e 27 	sts	0x279E, r1
    2082:	c0 91 fb 27 	lds	r28, 0x27FB
    2086:	d0 91 fc 27 	lds	r29, 0x27FC
    208a:	c0 34       	cpi	r28, 0x40	; 64
    208c:	d1 05       	cpc	r29, r1
    208e:	28 f0       	brcs	.+10     	; 0x209a <udd_ctrl_in_sent+0x96>
    2090:	10 92 b8 26 	sts	0x26B8, r1
    2094:	c0 e4       	ldi	r28, 0x40	; 64
    2096:	d0 e0       	ldi	r29, 0x00	; 0
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <udd_ctrl_in_sent+0x9c>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	80 93 b8 26 	sts	0x26B8, r24
    20a0:	e4 ea       	ldi	r30, 0xA4	; 164
    20a2:	f7 e2       	ldi	r31, 0x27	; 39
    20a4:	c6 8b       	std	Z+22, r28	; 0x16
    20a6:	d7 8b       	std	Z+23, r29	; 0x17
    20a8:	80 91 9d 27 	lds	r24, 0x279D
    20ac:	90 91 9e 27 	lds	r25, 0x279E
    20b0:	20 91 f9 27 	lds	r18, 0x27F9
    20b4:	30 91 fa 27 	lds	r19, 0x27FA
    20b8:	28 0f       	add	r18, r24
    20ba:	39 1f       	adc	r19, r25
    20bc:	20 8f       	std	Z+24, r18	; 0x18
    20be:	31 8f       	std	Z+25, r19	; 0x19
    20c0:	c8 0f       	add	r28, r24
    20c2:	d9 1f       	adc	r29, r25
    20c4:	c0 93 9d 27 	sts	0x279D, r28
    20c8:	d0 93 9e 27 	sts	0x279E, r29
    20cc:	e8 eb       	ldi	r30, 0xB8	; 184
    20ce:	f7 e2       	ldi	r31, 0x27	; 39
    20d0:	02 e0       	ldi	r16, 0x02	; 2
    20d2:	06 93       	lac	Z, r16
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	0f 91       	pop	r16
    20da:	08 95       	ret

000020dc <udd_ep_get_size>:
    20dc:	fc 01       	movw	r30, r24
    20de:	81 81       	ldd	r24, Z+1	; 0x01
    20e0:	e8 2f       	mov	r30, r24
    20e2:	e7 70       	andi	r30, 0x07	; 7
    20e4:	8e 2f       	mov	r24, r30
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	fc 01       	movw	r30, r24
    20ea:	31 97       	sbiw	r30, 0x01	; 1
    20ec:	e7 30       	cpi	r30, 0x07	; 7
    20ee:	f1 05       	cpc	r31, r1
    20f0:	d8 f4       	brcc	.+54     	; 0x2128 <udd_ep_get_size+0x4c>
    20f2:	88 27       	eor	r24, r24
    20f4:	e2 50       	subi	r30, 0x02	; 2
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	0c 94 36 19 	jmp	0x326c	; 0x326c <__tablejump2__>
    20fe:	80 e1       	ldi	r24, 0x10	; 16
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	08 95       	ret
    2104:	80 e2       	ldi	r24, 0x20	; 32
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	08 95       	ret
    210a:	80 e4       	ldi	r24, 0x40	; 64
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	08 95       	ret
    2110:	80 e8       	ldi	r24, 0x80	; 128
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	08 95       	ret
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	08 95       	ret
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	92 e0       	ldi	r25, 0x02	; 2
    2120:	08 95       	ret
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	93 e0       	ldi	r25, 0x03	; 3
    2126:	08 95       	ret
    2128:	88 e0       	ldi	r24, 0x08	; 8
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	08 95       	ret

0000212e <udd_ep_get_job>:
    212e:	28 2f       	mov	r18, r24
    2130:	2f 70       	andi	r18, 0x0F	; 15
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	08 2e       	mov	r0, r24
    213a:	00 0c       	add	r0, r0
    213c:	99 0b       	sbc	r25, r25
    213e:	88 27       	eor	r24, r24
    2140:	99 0f       	add	r25, r25
    2142:	88 1f       	adc	r24, r24
    2144:	99 27       	eor	r25, r25
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	02 97       	sbiw	r24, 0x02	; 2
    214c:	9c 01       	movw	r18, r24
    214e:	22 0f       	add	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	22 0f       	add	r18, r18
    2154:	33 1f       	adc	r19, r19
    2156:	22 0f       	add	r18, r18
    2158:	33 1f       	adc	r19, r19
    215a:	82 0f       	add	r24, r18
    215c:	93 1f       	adc	r25, r19
    215e:	87 5c       	subi	r24, 0xC7	; 199
    2160:	98 4d       	sbci	r25, 0xD8	; 216
    2162:	08 95       	ret

00002164 <udd_ctrl_interrupt_tc_setup>:
    2164:	0f 93       	push	r16
    2166:	cf 93       	push	r28
    2168:	80 91 cc 04 	lds	r24, 0x04CC
    216c:	80 ff       	sbrs	r24, 0
    216e:	63 c0       	rjmp	.+198    	; 0x2236 <udd_ctrl_interrupt_tc_setup+0xd2>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 cc 04 	sts	0x04CC, r24
    2176:	e0 eb       	ldi	r30, 0xB0	; 176
    2178:	f7 e2       	ldi	r31, 0x27	; 39
    217a:	00 e8       	ldi	r16, 0x80	; 128
    217c:	06 93       	lac	Z, r16
    217e:	e8 eb       	ldi	r30, 0xB8	; 184
    2180:	f7 e2       	ldi	r31, 0x27	; 39
    2182:	00 e8       	ldi	r16, 0x80	; 128
    2184:	06 93       	lac	Z, r16
    2186:	80 93 ca 04 	sts	0x04CA, r24
    218a:	e0 eb       	ldi	r30, 0xB0	; 176
    218c:	f7 e2       	ldi	r31, 0x27	; 39
    218e:	00 e1       	ldi	r16, 0x10	; 16
    2190:	06 93       	lac	Z, r16
    2192:	80 91 a1 27 	lds	r24, 0x27A1
    2196:	88 23       	and	r24, r24
    2198:	29 f0       	breq	.+10     	; 0x21a4 <udd_ctrl_interrupt_tc_setup+0x40>
    219a:	83 50       	subi	r24, 0x03	; 3
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	08 f4       	brcc	.+2      	; 0x21a2 <udd_ctrl_interrupt_tc_setup+0x3e>
    21a0:	29 df       	rcall	.-430    	; 0x1ff4 <udd_ctrl_endofrequest>
    21a2:	e5 de       	rcall	.-566    	; 0x1f6e <udd_ctrl_init>
    21a4:	80 91 b2 27 	lds	r24, 0x27B2
    21a8:	90 91 b3 27 	lds	r25, 0x27B3
    21ac:	08 97       	sbiw	r24, 0x08	; 8
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <udd_ctrl_interrupt_tc_setup+0x4e>
    21b0:	44 c0       	rjmp	.+136    	; 0x223a <udd_ctrl_interrupt_tc_setup+0xd6>
    21b2:	88 e0       	ldi	r24, 0x08	; 8
    21b4:	ed e5       	ldi	r30, 0x5D	; 93
    21b6:	f7 e2       	ldi	r31, 0x27	; 39
    21b8:	a1 ef       	ldi	r26, 0xF1	; 241
    21ba:	b7 e2       	ldi	r27, 0x27	; 39
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	8a 95       	dec	r24
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <udd_ctrl_interrupt_tc_setup+0x58>
    21c4:	e8 ec       	ldi	r30, 0xC8	; 200
    21c6:	f4 e0       	ldi	r31, 0x04	; 4
    21c8:	80 81       	ld	r24, Z
    21ca:	80 62       	ori	r24, 0x20	; 32
    21cc:	80 83       	st	Z, r24
    21ce:	80 81       	ld	r24, Z
    21d0:	80 62       	ori	r24, 0x20	; 32
    21d2:	80 83       	st	Z, r24
    21d4:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <udc_process_setup>
    21d8:	c8 2f       	mov	r28, r24
    21da:	81 11       	cpse	r24, r1
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <udd_ctrl_interrupt_tc_setup+0x80>
    21de:	ee de       	rcall	.-548    	; 0x1fbc <udd_ctrl_stall_data>
    21e0:	c1 e0       	ldi	r28, 0x01	; 1
    21e2:	2c c0       	rjmp	.+88     	; 0x223c <udd_ctrl_interrupt_tc_setup+0xd8>
    21e4:	80 91 f1 27 	lds	r24, 0x27F1
    21e8:	88 23       	and	r24, r24
    21ea:	6c f4       	brge	.+26     	; 0x2206 <udd_ctrl_interrupt_tc_setup+0xa2>
    21ec:	10 92 9f 27 	sts	0x279F, r1
    21f0:	10 92 a0 27 	sts	0x27A0, r1
    21f4:	10 92 9d 27 	sts	0x279D, r1
    21f8:	10 92 9e 27 	sts	0x279E, r1
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	80 93 a1 27 	sts	0x27A1, r24
    2202:	00 df       	rcall	.-512    	; 0x2004 <udd_ctrl_in_sent>
    2204:	1b c0       	rjmp	.+54     	; 0x223c <udd_ctrl_interrupt_tc_setup+0xd8>
    2206:	80 91 f7 27 	lds	r24, 0x27F7
    220a:	90 91 f8 27 	lds	r25, 0x27F8
    220e:	89 2b       	or	r24, r25
    2210:	11 f4       	brne	.+4      	; 0x2216 <udd_ctrl_interrupt_tc_setup+0xb2>
    2212:	e2 de       	rcall	.-572    	; 0x1fd8 <udd_ctrl_send_zlp_in>
    2214:	13 c0       	rjmp	.+38     	; 0x223c <udd_ctrl_interrupt_tc_setup+0xd8>
    2216:	10 92 9f 27 	sts	0x279F, r1
    221a:	10 92 a0 27 	sts	0x27A0, r1
    221e:	10 92 9d 27 	sts	0x279D, r1
    2222:	10 92 9e 27 	sts	0x279E, r1
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 93 a1 27 	sts	0x27A1, r24
    222c:	e0 eb       	ldi	r30, 0xB0	; 176
    222e:	f7 e2       	ldi	r31, 0x27	; 39
    2230:	02 e0       	ldi	r16, 0x02	; 2
    2232:	06 93       	lac	Z, r16
    2234:	03 c0       	rjmp	.+6      	; 0x223c <udd_ctrl_interrupt_tc_setup+0xd8>
    2236:	c0 e0       	ldi	r28, 0x00	; 0
    2238:	01 c0       	rjmp	.+2      	; 0x223c <udd_ctrl_interrupt_tc_setup+0xd8>
    223a:	c1 e0       	ldi	r28, 0x01	; 1
    223c:	8c 2f       	mov	r24, r28
    223e:	cf 91       	pop	r28
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <udd_ep_trans_complet>:
    2244:	8f 92       	push	r8
    2246:	9f 92       	push	r9
    2248:	af 92       	push	r10
    224a:	bf 92       	push	r11
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	d8 2e       	mov	r13, r24
    225c:	68 df       	rcall	.-304    	; 0x212e <udd_ep_get_job>
    225e:	8c 01       	movw	r16, r24
    2260:	bd 2c       	mov	r11, r13
    2262:	bb 1c       	adc	r11, r11
    2264:	bb 24       	eor	r11, r11
    2266:	bb 1c       	adc	r11, r11
    2268:	cd 2d       	mov	r28, r13
    226a:	cf 70       	andi	r28, 0x0F	; 15
    226c:	d0 e0       	ldi	r29, 0x00	; 0
    226e:	cc 0f       	add	r28, r28
    2270:	dd 1f       	adc	r29, r29
    2272:	cb 0d       	add	r28, r11
    2274:	d1 1d       	adc	r29, r1
    2276:	ce 01       	movw	r24, r28
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	9c 01       	movw	r18, r24
    2286:	20 55       	subi	r18, 0x50	; 80
    2288:	38 4d       	sbci	r19, 0xD8	; 216
    228a:	79 01       	movw	r14, r18
    228c:	c9 01       	movw	r24, r18
    228e:	26 df       	rcall	.-436    	; 0x20dc <udd_ep_get_size>
    2290:	4c 01       	movw	r8, r24
    2292:	bb 20       	and	r11, r11
    2294:	09 f4       	brne	.+2      	; 0x2298 <udd_ep_trans_complet+0x54>
    2296:	79 c0       	rjmp	.+242    	; 0x238a <udd_ep_trans_complet+0x146>
    2298:	fe 01       	movw	r30, r28
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	ec 55       	subi	r30, 0x5C	; 92
    22a8:	f8 4d       	sbci	r31, 0xD8	; 216
    22aa:	22 89       	ldd	r18, Z+18	; 0x12
    22ac:	33 89       	ldd	r19, Z+19	; 0x13
    22ae:	d8 01       	movw	r26, r16
    22b0:	15 96       	adiw	r26, 0x05	; 5
    22b2:	8d 91       	ld	r24, X+
    22b4:	9c 91       	ld	r25, X
    22b6:	16 97       	sbiw	r26, 0x06	; 6
    22b8:	82 0f       	add	r24, r18
    22ba:	93 1f       	adc	r25, r19
    22bc:	15 96       	adiw	r26, 0x05	; 5
    22be:	8d 93       	st	X+, r24
    22c0:	9c 93       	st	X, r25
    22c2:	16 97       	sbiw	r26, 0x06	; 6
    22c4:	13 96       	adiw	r26, 0x03	; 3
    22c6:	2d 91       	ld	r18, X+
    22c8:	3c 91       	ld	r19, X
    22ca:	14 97       	sbiw	r26, 0x04	; 4
    22cc:	82 17       	cp	r24, r18
    22ce:	93 07       	cpc	r25, r19
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <udd_ep_trans_complet+0x90>
    22d2:	45 c0       	rjmp	.+138    	; 0x235e <udd_ep_trans_complet+0x11a>
    22d4:	28 1b       	sub	r18, r24
    22d6:	39 0b       	sbc	r19, r25
    22d8:	21 15       	cp	r18, r1
    22da:	b4 e0       	ldi	r27, 0x04	; 4
    22dc:	3b 07       	cpc	r19, r27
    22de:	38 f0       	brcs	.+14     	; 0x22ee <udd_ep_trans_complet+0xaa>
    22e0:	2f ef       	ldi	r18, 0xFF	; 255
    22e2:	33 e0       	ldi	r19, 0x03	; 3
    22e4:	c9 01       	movw	r24, r18
    22e6:	b4 01       	movw	r22, r8
    22e8:	9a d7       	rcall	.+3892   	; 0x321e <__udivmodhi4>
    22ea:	28 1b       	sub	r18, r24
    22ec:	39 0b       	sbc	r19, r25
    22ee:	f8 01       	movw	r30, r16
    22f0:	80 81       	ld	r24, Z
    22f2:	81 ff       	sbrs	r24, 1
    22f4:	09 c0       	rjmp	.+18     	; 0x2308 <udd_ep_trans_complet+0xc4>
    22f6:	c9 01       	movw	r24, r18
    22f8:	b4 01       	movw	r22, r8
    22fa:	91 d7       	rcall	.+3874   	; 0x321e <__udivmodhi4>
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	89 2b       	or	r24, r25
    2300:	09 f0       	breq	.+2      	; 0x2304 <udd_ep_trans_complet+0xc0>
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	84 2f       	mov	r24, r20
    2306:	01 c0       	rjmp	.+2      	; 0x230a <udd_ep_trans_complet+0xc6>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	d8 01       	movw	r26, r16
    230c:	9c 91       	ld	r25, X
    230e:	80 fb       	bst	r24, 0
    2310:	91 f9       	bld	r25, 1
    2312:	9c 93       	st	X, r25
    2314:	fe 01       	movw	r30, r28
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	ec 55       	subi	r30, 0x5C	; 92
    2324:	f8 4d       	sbci	r31, 0xD8	; 216
    2326:	12 8a       	std	Z+18, r1	; 0x12
    2328:	13 8a       	std	Z+19, r1	; 0x13
    232a:	26 87       	std	Z+14, r18	; 0x0e
    232c:	37 87       	std	Z+15, r19	; 0x0f
    232e:	11 96       	adiw	r26, 0x01	; 1
    2330:	2d 91       	ld	r18, X+
    2332:	3c 91       	ld	r19, X
    2334:	12 97       	sbiw	r26, 0x02	; 2
    2336:	15 96       	adiw	r26, 0x05	; 5
    2338:	8d 91       	ld	r24, X+
    233a:	9c 91       	ld	r25, X
    233c:	16 97       	sbiw	r26, 0x06	; 6
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	cc 0f       	add	r28, r28
    2344:	dd 1f       	adc	r29, r29
    2346:	cc 0f       	add	r28, r28
    2348:	dd 1f       	adc	r29, r29
    234a:	cc 0f       	add	r28, r28
    234c:	dd 1f       	adc	r29, r29
    234e:	cc 54       	subi	r28, 0x4C	; 76
    2350:	d8 4d       	sbci	r29, 0xD8	; 216
    2352:	88 83       	st	Y, r24
    2354:	99 83       	std	Y+1, r25	; 0x01
    2356:	f7 01       	movw	r30, r14
    2358:	02 e0       	ldi	r16, 0x02	; 2
    235a:	06 93       	lac	Z, r16
    235c:	e4 c0       	rjmp	.+456    	; 0x2526 <udd_ep_trans_complet+0x2e2>
    235e:	d8 01       	movw	r26, r16
    2360:	8c 91       	ld	r24, X
    2362:	81 ff       	sbrs	r24, 1
    2364:	cd c0       	rjmp	.+410    	; 0x2500 <udd_ep_trans_complet+0x2bc>
    2366:	8d 7f       	andi	r24, 0xFD	; 253
    2368:	8c 93       	st	X, r24
    236a:	cc 0f       	add	r28, r28
    236c:	dd 1f       	adc	r29, r29
    236e:	cc 0f       	add	r28, r28
    2370:	dd 1f       	adc	r29, r29
    2372:	cc 0f       	add	r28, r28
    2374:	dd 1f       	adc	r29, r29
    2376:	cc 55       	subi	r28, 0x5C	; 92
    2378:	d8 4d       	sbci	r29, 0xD8	; 216
    237a:	1a 8a       	std	Y+18, r1	; 0x12
    237c:	1b 8a       	std	Y+19, r1	; 0x13
    237e:	1e 86       	std	Y+14, r1	; 0x0e
    2380:	1f 86       	std	Y+15, r1	; 0x0f
    2382:	f7 01       	movw	r30, r14
    2384:	02 e0       	ldi	r16, 0x02	; 2
    2386:	06 93       	lac	Z, r16
    2388:	ce c0       	rjmp	.+412    	; 0x2526 <udd_ep_trans_complet+0x2e2>
    238a:	fe 01       	movw	r30, r28
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ec 55       	subi	r30, 0x5C	; 92
    239a:	f8 4d       	sbci	r31, 0xD8	; 216
    239c:	a6 84       	ldd	r10, Z+14	; 0x0e
    239e:	b7 84       	ldd	r11, Z+15	; 0x0f
    23a0:	d8 01       	movw	r26, r16
    23a2:	8c 91       	ld	r24, X
    23a4:	82 ff       	sbrs	r24, 2
    23a6:	19 c0       	rjmp	.+50     	; 0x23da <udd_ep_trans_complet+0x196>
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	12 97       	sbiw	r26, 0x02	; 2
    23b0:	15 96       	adiw	r26, 0x05	; 5
    23b2:	2d 91       	ld	r18, X+
    23b4:	3c 91       	ld	r19, X
    23b6:	16 97       	sbiw	r26, 0x06	; 6
    23b8:	13 96       	adiw	r26, 0x03	; 3
    23ba:	8d 91       	ld	r24, X+
    23bc:	9c 91       	ld	r25, X
    23be:	14 97       	sbiw	r26, 0x04	; 4
    23c0:	b4 01       	movw	r22, r8
    23c2:	2d d7       	rcall	.+3674   	; 0x321e <__udivmodhi4>
    23c4:	b0 e4       	ldi	r27, 0x40	; 64
    23c6:	db 9e       	mul	r13, r27
    23c8:	b0 01       	movw	r22, r0
    23ca:	11 24       	eor	r1, r1
    23cc:	67 58       	subi	r22, 0x87	; 135
    23ce:	79 4d       	sbci	r23, 0xD9	; 217
    23d0:	ac 01       	movw	r20, r24
    23d2:	cf 01       	movw	r24, r30
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	60 d7       	rcall	.+3776   	; 0x329a <memcpy>
    23da:	f8 01       	movw	r30, r16
    23dc:	25 81       	ldd	r18, Z+5	; 0x05
    23de:	36 81       	ldd	r19, Z+6	; 0x06
    23e0:	2a 0d       	add	r18, r10
    23e2:	3b 1d       	adc	r19, r11
    23e4:	25 83       	std	Z+5, r18	; 0x05
    23e6:	36 83       	std	Z+6, r19	; 0x06
    23e8:	83 81       	ldd	r24, Z+3	; 0x03
    23ea:	94 81       	ldd	r25, Z+4	; 0x04
    23ec:	82 17       	cp	r24, r18
    23ee:	93 07       	cpc	r25, r19
    23f0:	68 f4       	brcc	.+26     	; 0x240c <udd_ep_trans_complet+0x1c8>
    23f2:	85 83       	std	Z+5, r24	; 0x05
    23f4:	96 83       	std	Z+6, r25	; 0x06
    23f6:	cc 0f       	add	r28, r28
    23f8:	dd 1f       	adc	r29, r29
    23fa:	cc 0f       	add	r28, r28
    23fc:	dd 1f       	adc	r29, r29
    23fe:	cc 0f       	add	r28, r28
    2400:	dd 1f       	adc	r29, r29
    2402:	cc 55       	subi	r28, 0x5C	; 92
    2404:	d8 4d       	sbci	r29, 0xD8	; 216
    2406:	8a 89       	ldd	r24, Y+18	; 0x12
    2408:	9b 89       	ldd	r25, Y+19	; 0x13
    240a:	7a c0       	rjmp	.+244    	; 0x2500 <udd_ep_trans_complet+0x2bc>
    240c:	fe 01       	movw	r30, r28
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	ee 0f       	add	r30, r30
    2418:	ff 1f       	adc	r31, r31
    241a:	ec 55       	subi	r30, 0x5C	; 92
    241c:	f8 4d       	sbci	r31, 0xD8	; 216
    241e:	42 89       	ldd	r20, Z+18	; 0x12
    2420:	53 89       	ldd	r21, Z+19	; 0x13
    2422:	4a 15       	cp	r20, r10
    2424:	5b 05       	cpc	r21, r11
    2426:	09 f0       	breq	.+2      	; 0x242a <udd_ep_trans_complet+0x1e6>
    2428:	6b c0       	rjmp	.+214    	; 0x2500 <udd_ep_trans_complet+0x2bc>
    242a:	28 17       	cp	r18, r24
    242c:	39 07       	cpc	r19, r25
    242e:	09 f4       	brne	.+2      	; 0x2432 <udd_ep_trans_complet+0x1ee>
    2430:	67 c0       	rjmp	.+206    	; 0x2500 <udd_ep_trans_complet+0x2bc>
    2432:	ac 01       	movw	r20, r24
    2434:	42 1b       	sub	r20, r18
    2436:	53 0b       	sbc	r21, r19
    2438:	9a 01       	movw	r18, r20
    243a:	21 15       	cp	r18, r1
    243c:	54 e0       	ldi	r21, 0x04	; 4
    243e:	35 07       	cpc	r19, r21
    2440:	50 f0       	brcs	.+20     	; 0x2456 <udd_ep_trans_complet+0x212>
    2442:	2f ef       	ldi	r18, 0xFF	; 255
    2444:	33 e0       	ldi	r19, 0x03	; 3
    2446:	c9 01       	movw	r24, r18
    2448:	b4 01       	movw	r22, r8
    244a:	e9 d6       	rcall	.+3538   	; 0x321e <__udivmodhi4>
    244c:	d9 01       	movw	r26, r18
    244e:	a8 1b       	sub	r26, r24
    2450:	b9 0b       	sbc	r27, r25
    2452:	cd 01       	movw	r24, r26
    2454:	07 c0       	rjmp	.+14     	; 0x2464 <udd_ep_trans_complet+0x220>
    2456:	c9 01       	movw	r24, r18
    2458:	b4 01       	movw	r22, r8
    245a:	e1 d6       	rcall	.+3522   	; 0x321e <__udivmodhi4>
    245c:	f9 01       	movw	r30, r18
    245e:	e8 1b       	sub	r30, r24
    2460:	f9 0b       	sbc	r31, r25
    2462:	cf 01       	movw	r24, r30
    2464:	fe 01       	movw	r30, r28
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	ee 0f       	add	r30, r30
    2470:	ff 1f       	adc	r31, r31
    2472:	ec 55       	subi	r30, 0x5C	; 92
    2474:	f8 4d       	sbci	r31, 0xD8	; 216
    2476:	16 86       	std	Z+14, r1	; 0x0e
    2478:	17 86       	std	Z+15, r1	; 0x0f
    247a:	88 15       	cp	r24, r8
    247c:	99 05       	cpc	r25, r9
    247e:	00 f5       	brcc	.+64     	; 0x24c0 <udd_ep_trans_complet+0x27c>
    2480:	d8 01       	movw	r26, r16
    2482:	8c 91       	ld	r24, X
    2484:	84 60       	ori	r24, 0x04	; 4
    2486:	8c 93       	st	X, r24
    2488:	b0 e4       	ldi	r27, 0x40	; 64
    248a:	db 9e       	mul	r13, r27
    248c:	c0 01       	movw	r24, r0
    248e:	11 24       	eor	r1, r1
    2490:	87 58       	subi	r24, 0x87	; 135
    2492:	99 4d       	sbci	r25, 0xD9	; 217
    2494:	fe 01       	movw	r30, r28
    2496:	ee 0f       	add	r30, r30
    2498:	ff 1f       	adc	r31, r31
    249a:	ee 0f       	add	r30, r30
    249c:	ff 1f       	adc	r31, r31
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	ec 54       	subi	r30, 0x4C	; 76
    24a4:	f8 4d       	sbci	r31, 0xD8	; 216
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	cc 0f       	add	r28, r28
    24ac:	dd 1f       	adc	r29, r29
    24ae:	cc 0f       	add	r28, r28
    24b0:	dd 1f       	adc	r29, r29
    24b2:	cc 0f       	add	r28, r28
    24b4:	dd 1f       	adc	r29, r29
    24b6:	cc 55       	subi	r28, 0x5C	; 92
    24b8:	d8 4d       	sbci	r29, 0xD8	; 216
    24ba:	8a 8a       	std	Y+18, r8	; 0x12
    24bc:	9b 8a       	std	Y+19, r9	; 0x13
    24be:	1c c0       	rjmp	.+56     	; 0x24f8 <udd_ep_trans_complet+0x2b4>
    24c0:	f8 01       	movw	r30, r16
    24c2:	41 81       	ldd	r20, Z+1	; 0x01
    24c4:	52 81       	ldd	r21, Z+2	; 0x02
    24c6:	25 81       	ldd	r18, Z+5	; 0x05
    24c8:	36 81       	ldd	r19, Z+6	; 0x06
    24ca:	24 0f       	add	r18, r20
    24cc:	35 1f       	adc	r19, r21
    24ce:	fe 01       	movw	r30, r28
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	ec 54       	subi	r30, 0x4C	; 76
    24de:	f8 4d       	sbci	r31, 0xD8	; 216
    24e0:	20 83       	st	Z, r18
    24e2:	31 83       	std	Z+1, r19	; 0x01
    24e4:	cc 0f       	add	r28, r28
    24e6:	dd 1f       	adc	r29, r29
    24e8:	cc 0f       	add	r28, r28
    24ea:	dd 1f       	adc	r29, r29
    24ec:	cc 0f       	add	r28, r28
    24ee:	dd 1f       	adc	r29, r29
    24f0:	cc 55       	subi	r28, 0x5C	; 92
    24f2:	d8 4d       	sbci	r29, 0xD8	; 216
    24f4:	8a 8b       	std	Y+18, r24	; 0x12
    24f6:	9b 8b       	std	Y+19, r25	; 0x13
    24f8:	f7 01       	movw	r30, r14
    24fa:	02 e0       	ldi	r16, 0x02	; 2
    24fc:	06 93       	lac	Z, r16
    24fe:	13 c0       	rjmp	.+38     	; 0x2526 <udd_ep_trans_complet+0x2e2>
    2500:	d8 01       	movw	r26, r16
    2502:	8c 91       	ld	r24, X
    2504:	80 ff       	sbrs	r24, 0
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <udd_ep_trans_complet+0x2e2>
    2508:	8e 7f       	andi	r24, 0xFE	; 254
    250a:	8c 93       	st	X, r24
    250c:	17 96       	adiw	r26, 0x07	; 7
    250e:	ed 91       	ld	r30, X+
    2510:	fc 91       	ld	r31, X
    2512:	18 97       	sbiw	r26, 0x08	; 8
    2514:	30 97       	sbiw	r30, 0x00	; 0
    2516:	39 f0       	breq	.+14     	; 0x2526 <udd_ep_trans_complet+0x2e2>
    2518:	15 96       	adiw	r26, 0x05	; 5
    251a:	6d 91       	ld	r22, X+
    251c:	7c 91       	ld	r23, X
    251e:	16 97       	sbiw	r26, 0x06	; 6
    2520:	4d 2d       	mov	r20, r13
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	19 95       	eicall
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	df 90       	pop	r13
    2534:	bf 90       	pop	r11
    2536:	af 90       	pop	r10
    2538:	9f 90       	pop	r9
    253a:	8f 90       	pop	r8
    253c:	08 95       	ret

0000253e <udd_enable>:
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	c0 e6       	ldi	r28, 0x60	; 96
    2544:	d0 e0       	ldi	r29, 0x00	; 0
    2546:	18 82       	st	Y, r1
    2548:	80 e3       	ldi	r24, 0x30	; 48
    254a:	0e 94 9a 01 	call	0x334	; 0x334 <sysclk_enable_usb>
    254e:	e0 ec       	ldi	r30, 0xC0	; 192
    2550:	f4 e0       	ldi	r31, 0x04	; 4
    2552:	80 81       	ld	r24, Z
    2554:	80 64       	ori	r24, 0x40	; 64
    2556:	80 83       	st	Z, r24
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	88 83       	st	Y, r24
    255c:	cf b7       	in	r28, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	e4 ea       	ldi	r30, 0xA4	; 164
    2562:	f7 e2       	ldi	r31, 0x27	; 39
    2564:	15 86       	std	Z+13, r1	; 0x0d
    2566:	15 8a       	std	Z+21, r1	; 0x15
    2568:	15 8e       	std	Z+29, r1	; 0x1d
    256a:	15 a2       	std	Z+37, r1	; 0x25
    256c:	15 a6       	std	Z+45, r1	; 0x2d
    256e:	15 aa       	std	Z+53, r1	; 0x35
    2570:	e9 e3       	ldi	r30, 0x39	; 57
    2572:	f7 e2       	ldi	r31, 0x27	; 39
    2574:	80 81       	ld	r24, Z
    2576:	8e 7f       	andi	r24, 0xFE	; 254
    2578:	80 83       	st	Z, r24
    257a:	e2 e4       	ldi	r30, 0x42	; 66
    257c:	f7 e2       	ldi	r31, 0x27	; 39
    257e:	80 81       	ld	r24, Z
    2580:	8e 7f       	andi	r24, 0xFE	; 254
    2582:	80 83       	st	Z, r24
    2584:	eb e4       	ldi	r30, 0x4B	; 75
    2586:	f7 e2       	ldi	r31, 0x27	; 39
    2588:	80 81       	ld	r24, Z
    258a:	8e 7f       	andi	r24, 0xFE	; 254
    258c:	80 83       	st	Z, r24
    258e:	e4 e5       	ldi	r30, 0x54	; 84
    2590:	f7 e2       	ldi	r31, 0x27	; 39
    2592:	80 81       	ld	r24, Z
    2594:	8e 7f       	andi	r24, 0xFE	; 254
    2596:	80 83       	st	Z, r24
    2598:	6a e1       	ldi	r22, 0x1A	; 26
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	0e 94 3a 09 	call	0x1274	; 0x1274 <nvm_read_byte>
    25a2:	8f 3f       	cpi	r24, 0xFF	; 255
    25a4:	19 f0       	breq	.+6      	; 0x25ac <udd_enable+0x6e>
    25a6:	80 93 fa 04 	sts	0x04FA, r24
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <udd_enable+0x74>
    25ac:	8f e1       	ldi	r24, 0x1F	; 31
    25ae:	80 93 fa 04 	sts	0x04FA, r24
    25b2:	6b e1       	ldi	r22, 0x1B	; 27
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	82 e0       	ldi	r24, 0x02	; 2
    25b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <nvm_read_byte>
    25bc:	8f 3f       	cpi	r24, 0xFF	; 255
    25be:	19 f0       	breq	.+6      	; 0x25c6 <udd_enable+0x88>
    25c0:	80 93 fb 04 	sts	0x04FB, r24
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <udd_enable+0x8e>
    25c6:	8f e1       	ldi	r24, 0x1F	; 31
    25c8:	80 93 fb 04 	sts	0x04FB, r24
    25cc:	e0 ec       	ldi	r30, 0xC0	; 192
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	80 81       	ld	r24, Z
    25d2:	82 60       	ori	r24, 0x02	; 2
    25d4:	80 83       	st	Z, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	80 68       	ori	r24, 0x80	; 128
    25da:	80 83       	st	Z, r24
    25dc:	80 81       	ld	r24, Z
    25de:	80 61       	ori	r24, 0x10	; 16
    25e0:	80 83       	st	Z, r24
    25e2:	80 eb       	ldi	r24, 0xB0	; 176
    25e4:	97 e2       	ldi	r25, 0x27	; 39
    25e6:	86 83       	std	Z+6, r24	; 0x06
    25e8:	97 83       	std	Z+7, r25	; 0x07
    25ea:	80 81       	ld	r24, Z
    25ec:	80 62       	ori	r24, 0x20	; 32
    25ee:	80 83       	st	Z, r24
    25f0:	8f ef       	ldi	r24, 0xFF	; 255
    25f2:	80 93 c5 04 	sts	0x04C5, r24
    25f6:	e8 ec       	ldi	r30, 0xC8	; 200
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	80 81       	ld	r24, Z
    25fc:	81 60       	ori	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	10 92 e4 27 	sts	0x27E4, r1
    2604:	9f b7       	in	r25, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	e5 ee       	ldi	r30, 0xE5	; 229
    260a:	f7 e2       	ldi	r31, 0x27	; 39
    260c:	85 81       	ldd	r24, Z+5	; 0x05
    260e:	8f 5f       	subi	r24, 0xFF	; 255
    2610:	85 83       	std	Z+5, r24	; 0x05
    2612:	9f bf       	out	0x3f, r25	; 63
    2614:	cf bf       	out	0x3f, r28	; 63
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <udd_include_vbus_monitoring>:
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	08 95       	ret

00002620 <udd_attach>:
    2620:	cf 93       	push	r28
    2622:	cf b7       	in	r28, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	83 dc       	rcall	.-1786   	; 0x1f30 <udd_sleep_mode>
    262a:	ea ec       	ldi	r30, 0xCA	; 202
    262c:	f4 e0       	ldi	r31, 0x04	; 4
    262e:	80 e4       	ldi	r24, 0x40	; 64
    2630:	80 83       	st	Z, r24
    2632:	80 e2       	ldi	r24, 0x20	; 32
    2634:	80 83       	st	Z, r24
    2636:	e1 ec       	ldi	r30, 0xC1	; 193
    2638:	f4 e0       	ldi	r31, 0x04	; 4
    263a:	80 81       	ld	r24, Z
    263c:	81 60       	ori	r24, 0x01	; 1
    263e:	80 83       	st	Z, r24
    2640:	a9 ec       	ldi	r26, 0xC9	; 201
    2642:	b4 e0       	ldi	r27, 0x04	; 4
    2644:	8c 91       	ld	r24, X
    2646:	82 60       	ori	r24, 0x02	; 2
    2648:	8c 93       	st	X, r24
    264a:	e8 ec       	ldi	r30, 0xC8	; 200
    264c:	f4 e0       	ldi	r31, 0x04	; 4
    264e:	80 81       	ld	r24, Z
    2650:	80 64       	ori	r24, 0x40	; 64
    2652:	80 83       	st	Z, r24
    2654:	8c 91       	ld	r24, X
    2656:	81 60       	ori	r24, 0x01	; 1
    2658:	8c 93       	st	X, r24
    265a:	80 81       	ld	r24, Z
    265c:	80 68       	ori	r24, 0x80	; 128
    265e:	80 83       	st	Z, r24
    2660:	cf bf       	out	0x3f, r28	; 63
    2662:	cf 91       	pop	r28
    2664:	08 95       	ret

00002666 <udd_is_high_speed>:
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	08 95       	ret

0000266a <udd_set_address>:
    266a:	80 93 c3 04 	sts	0x04C3, r24
    266e:	08 95       	ret

00002670 <udd_getaddress>:
    2670:	80 91 c3 04 	lds	r24, 0x04C3
    2674:	08 95       	ret

00002676 <udd_get_frame_number>:
    2676:	80 91 e0 27 	lds	r24, 0x27E0
    267a:	90 91 e1 27 	lds	r25, 0x27E1
    267e:	08 95       	ret

00002680 <udd_get_micro_frame_number>:
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	08 95       	ret

00002686 <udd_set_setup_payload>:
    2686:	e1 ef       	ldi	r30, 0xF1	; 241
    2688:	f7 e2       	ldi	r31, 0x27	; 39
    268a:	80 87       	std	Z+8, r24	; 0x08
    268c:	91 87       	std	Z+9, r25	; 0x09
    268e:	62 87       	std	Z+10, r22	; 0x0a
    2690:	73 87       	std	Z+11, r23	; 0x0b
    2692:	08 95       	ret

00002694 <udd_ep_alloc>:
    2694:	28 2f       	mov	r18, r24
    2696:	2f 70       	andi	r18, 0x0F	; 15
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	08 2e       	mov	r0, r24
    26a0:	00 0c       	add	r0, r0
    26a2:	99 0b       	sbc	r25, r25
    26a4:	88 27       	eor	r24, r24
    26a6:	99 0f       	add	r25, r25
    26a8:	88 1f       	adc	r24, r24
    26aa:	99 27       	eor	r25, r25
    26ac:	82 0f       	add	r24, r18
    26ae:	93 1f       	adc	r25, r19
    26b0:	fc 01       	movw	r30, r24
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ec 55       	subi	r30, 0x5C	; 92
    26c0:	f8 4d       	sbci	r31, 0xD8	; 216
    26c2:	25 85       	ldd	r18, Z+13	; 0x0d
    26c4:	20 7c       	andi	r18, 0xC0	; 192
    26c6:	09 f0       	breq	.+2      	; 0x26ca <udd_ep_alloc+0x36>
    26c8:	5f c0       	rjmp	.+190    	; 0x2788 <udd_ep_alloc+0xf4>
    26ca:	63 70       	andi	r22, 0x03	; 3
    26cc:	61 30       	cpi	r22, 0x01	; 1
    26ce:	19 f0       	breq	.+6      	; 0x26d6 <udd_ep_alloc+0x42>
    26d0:	20 f4       	brcc	.+8      	; 0x26da <udd_ep_alloc+0x46>
    26d2:	20 e4       	ldi	r18, 0x40	; 64
    26d4:	03 c0       	rjmp	.+6      	; 0x26dc <udd_ep_alloc+0x48>
    26d6:	20 ec       	ldi	r18, 0xC0	; 192
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <udd_ep_alloc+0x48>
    26da:	20 e8       	ldi	r18, 0x80	; 128
    26dc:	40 38       	cpi	r20, 0x80	; 128
    26de:	51 05       	cpc	r21, r1
    26e0:	e9 f0       	breq	.+58     	; 0x271c <udd_ep_alloc+0x88>
    26e2:	50 f4       	brcc	.+20     	; 0x26f8 <udd_ep_alloc+0x64>
    26e4:	40 32       	cpi	r20, 0x20	; 32
    26e6:	51 05       	cpc	r21, r1
    26e8:	a9 f0       	breq	.+42     	; 0x2714 <udd_ep_alloc+0x80>
    26ea:	40 34       	cpi	r20, 0x40	; 64
    26ec:	51 05       	cpc	r21, r1
    26ee:	a1 f0       	breq	.+40     	; 0x2718 <udd_ep_alloc+0x84>
    26f0:	40 31       	cpi	r20, 0x10	; 16
    26f2:	51 05       	cpc	r21, r1
    26f4:	d9 f4       	brne	.+54     	; 0x272c <udd_ep_alloc+0x98>
    26f6:	0c c0       	rjmp	.+24     	; 0x2710 <udd_ep_alloc+0x7c>
    26f8:	41 15       	cp	r20, r1
    26fa:	32 e0       	ldi	r19, 0x02	; 2
    26fc:	53 07       	cpc	r21, r19
    26fe:	91 f0       	breq	.+36     	; 0x2724 <udd_ep_alloc+0x90>
    2700:	4f 3f       	cpi	r20, 0xFF	; 255
    2702:	33 e0       	ldi	r19, 0x03	; 3
    2704:	53 07       	cpc	r21, r19
    2706:	81 f0       	breq	.+32     	; 0x2728 <udd_ep_alloc+0x94>
    2708:	41 15       	cp	r20, r1
    270a:	51 40       	sbci	r21, 0x01	; 1
    270c:	79 f4       	brne	.+30     	; 0x272c <udd_ep_alloc+0x98>
    270e:	08 c0       	rjmp	.+16     	; 0x2720 <udd_ep_alloc+0x8c>
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0d c0       	rjmp	.+26     	; 0x272e <udd_ep_alloc+0x9a>
    2714:	42 e0       	ldi	r20, 0x02	; 2
    2716:	0b c0       	rjmp	.+22     	; 0x272e <udd_ep_alloc+0x9a>
    2718:	43 e0       	ldi	r20, 0x03	; 3
    271a:	09 c0       	rjmp	.+18     	; 0x272e <udd_ep_alloc+0x9a>
    271c:	44 e0       	ldi	r20, 0x04	; 4
    271e:	07 c0       	rjmp	.+14     	; 0x272e <udd_ep_alloc+0x9a>
    2720:	45 e0       	ldi	r20, 0x05	; 5
    2722:	05 c0       	rjmp	.+10     	; 0x272e <udd_ep_alloc+0x9a>
    2724:	46 e0       	ldi	r20, 0x06	; 6
    2726:	03 c0       	rjmp	.+6      	; 0x272e <udd_ep_alloc+0x9a>
    2728:	47 e0       	ldi	r20, 0x07	; 7
    272a:	01 c0       	rjmp	.+2      	; 0x272e <udd_ep_alloc+0x9a>
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	fc 01       	movw	r30, r24
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	ec 55       	subi	r30, 0x5C	; 92
    273e:	f8 4d       	sbci	r31, 0xD8	; 216
    2740:	15 86       	std	Z+13, r1	; 0x0d
    2742:	36 e0       	ldi	r19, 0x06	; 6
    2744:	34 87       	std	Z+12, r19	; 0x0c
    2746:	24 2b       	or	r18, r20
    2748:	25 87       	std	Z+13, r18	; 0x0d
    274a:	25 85       	ldd	r18, Z+13	; 0x0d
    274c:	20 7c       	andi	r18, 0xC0	; 192
    274e:	20 3c       	cpi	r18, 0xC0	; 192
    2750:	69 f4       	brne	.+26     	; 0x276c <udd_ep_alloc+0xd8>
    2752:	fc 01       	movw	r30, r24
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	ec 55       	subi	r30, 0x5C	; 92
    2762:	f8 4d       	sbci	r31, 0xD8	; 216
    2764:	25 85       	ldd	r18, Z+13	; 0x0d
    2766:	27 70       	andi	r18, 0x07	; 7
    2768:	27 30       	cpi	r18, 0x07	; 7
    276a:	81 f0       	breq	.+32     	; 0x278c <udd_ep_alloc+0xf8>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	fc 01       	movw	r30, r24
    277a:	ec 55       	subi	r30, 0x5C	; 92
    277c:	f8 4d       	sbci	r31, 0xD8	; 216
    277e:	85 85       	ldd	r24, Z+13	; 0x0d
    2780:	80 62       	ori	r24, 0x20	; 32
    2782:	85 87       	std	Z+13, r24	; 0x0d
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	08 95       	ret
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	08 95       	ret
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	08 95       	ret

00002790 <udd_ep_is_halted>:
    2790:	e8 2f       	mov	r30, r24
    2792:	ef 70       	andi	r30, 0x0F	; 15
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	08 2e       	mov	r0, r24
    279c:	00 0c       	add	r0, r0
    279e:	99 0b       	sbc	r25, r25
    27a0:	88 27       	eor	r24, r24
    27a2:	99 0f       	add	r25, r25
    27a4:	88 1f       	adc	r24, r24
    27a6:	99 27       	eor	r25, r25
    27a8:	e8 0f       	add	r30, r24
    27aa:	f9 1f       	adc	r31, r25
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	ee 0f       	add	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	ee 0f       	add	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	ec 55       	subi	r30, 0x5C	; 92
    27ba:	f8 4d       	sbci	r31, 0xD8	; 216
    27bc:	85 85       	ldd	r24, Z+13	; 0x0d
    27be:	82 fb       	bst	r24, 2
    27c0:	88 27       	eor	r24, r24
    27c2:	80 f9       	bld	r24, 0
    27c4:	08 95       	ret

000027c6 <udd_ep_clear_halt>:
    27c6:	28 2f       	mov	r18, r24
    27c8:	2f 70       	andi	r18, 0x0F	; 15
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	a9 01       	movw	r20, r18
    27ce:	44 0f       	add	r20, r20
    27d0:	55 1f       	adc	r21, r21
    27d2:	28 2f       	mov	r18, r24
    27d4:	08 2e       	mov	r0, r24
    27d6:	00 0c       	add	r0, r0
    27d8:	33 0b       	sbc	r19, r19
    27da:	22 27       	eor	r18, r18
    27dc:	33 0f       	add	r19, r19
    27de:	22 1f       	adc	r18, r18
    27e0:	33 27       	eor	r19, r19
    27e2:	24 0f       	add	r18, r20
    27e4:	35 1f       	adc	r19, r21
    27e6:	f9 01       	movw	r30, r18
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	ec 55       	subi	r30, 0x5C	; 92
    27f6:	f8 4d       	sbci	r31, 0xD8	; 216
    27f8:	95 85       	ldd	r25, Z+13	; 0x0d
    27fa:	92 ff       	sbrs	r25, 2
    27fc:	17 c0       	rjmp	.+46     	; 0x282c <udd_ep_clear_halt+0x66>
    27fe:	22 0f       	add	r18, r18
    2800:	33 1f       	adc	r19, r19
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	22 0f       	add	r18, r18
    2808:	33 1f       	adc	r19, r19
    280a:	f9 01       	movw	r30, r18
    280c:	ec 55       	subi	r30, 0x5C	; 92
    280e:	f8 4d       	sbci	r31, 0xD8	; 216
    2810:	95 85       	ldd	r25, Z+13	; 0x0d
    2812:	9b 7f       	andi	r25, 0xFB	; 251
    2814:	95 87       	std	Z+13, r25	; 0x0d
    2816:	8b dc       	rcall	.-1770   	; 0x212e <udd_ep_get_job>
    2818:	fc 01       	movw	r30, r24
    281a:	80 81       	ld	r24, Z
    281c:	80 ff       	sbrs	r24, 0
    281e:	06 c0       	rjmp	.+12     	; 0x282c <udd_ep_clear_halt+0x66>
    2820:	8e 7f       	andi	r24, 0xFE	; 254
    2822:	80 83       	st	Z, r24
    2824:	07 80       	ldd	r0, Z+7	; 0x07
    2826:	f0 85       	ldd	r31, Z+8	; 0x08
    2828:	e0 2d       	mov	r30, r0
    282a:	19 95       	eicall
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	08 95       	ret

00002830 <udd_ep_run>:
    2830:	7f 92       	push	r7
    2832:	8f 92       	push	r8
    2834:	9f 92       	push	r9
    2836:	af 92       	push	r10
    2838:	bf 92       	push	r11
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	98 2e       	mov	r9, r24
    284c:	86 2e       	mov	r8, r22
    284e:	6a 01       	movw	r12, r20
    2850:	79 01       	movw	r14, r18
    2852:	6d dc       	rcall	.-1830   	; 0x212e <udd_ep_get_job>
    2854:	5c 01       	movw	r10, r24
    2856:	79 2c       	mov	r7, r9
    2858:	77 1c       	adc	r7, r7
    285a:	77 24       	eor	r7, r7
    285c:	77 1c       	adc	r7, r7
    285e:	c9 2d       	mov	r28, r9
    2860:	cf 70       	andi	r28, 0x0F	; 15
    2862:	d0 e0       	ldi	r29, 0x00	; 0
    2864:	cc 0f       	add	r28, r28
    2866:	dd 1f       	adc	r29, r29
    2868:	c7 0d       	add	r28, r7
    286a:	d1 1d       	adc	r29, r1
    286c:	fe 01       	movw	r30, r28
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	ec 55       	subi	r30, 0x5C	; 92
    287c:	f8 4d       	sbci	r31, 0xD8	; 216
    287e:	85 85       	ldd	r24, Z+13	; 0x0d
    2880:	80 7c       	andi	r24, 0xC0	; 192
    2882:	09 f4       	brne	.+2      	; 0x2886 <udd_ep_run+0x56>
    2884:	7d c0       	rjmp	.+250    	; 0x2980 <udd_ep_run+0x150>
    2886:	fe 01       	movw	r30, r28
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	ec 55       	subi	r30, 0x5C	; 92
    2896:	f8 4d       	sbci	r31, 0xD8	; 216
    2898:	85 85       	ldd	r24, Z+13	; 0x0d
    289a:	80 7c       	andi	r24, 0xC0	; 192
    289c:	80 3c       	cpi	r24, 0xC0	; 192
    289e:	61 f0       	breq	.+24     	; 0x28b8 <udd_ep_run+0x88>
    28a0:	fe 01       	movw	r30, r28
    28a2:	ee 0f       	add	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	ee 0f       	add	r30, r30
    28a8:	ff 1f       	adc	r31, r31
    28aa:	ee 0f       	add	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	ec 55       	subi	r30, 0x5C	; 92
    28b0:	f8 4d       	sbci	r31, 0xD8	; 216
    28b2:	85 85       	ldd	r24, Z+13	; 0x0d
    28b4:	82 fd       	sbrc	r24, 2
    28b6:	66 c0       	rjmp	.+204    	; 0x2984 <udd_ep_run+0x154>
    28b8:	8f b7       	in	r24, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	f5 01       	movw	r30, r10
    28be:	90 81       	ld	r25, Z
    28c0:	90 ff       	sbrs	r25, 0
    28c2:	03 c0       	rjmp	.+6      	; 0x28ca <udd_ep_run+0x9a>
    28c4:	8f bf       	out	0x3f, r24	; 63
    28c6:	71 2c       	mov	r7, r1
    28c8:	5e c0       	rjmp	.+188    	; 0x2986 <udd_ep_run+0x156>
    28ca:	f5 01       	movw	r30, r10
    28cc:	90 81       	ld	r25, Z
    28ce:	91 60       	ori	r25, 0x01	; 1
    28d0:	90 83       	st	Z, r25
    28d2:	8f bf       	out	0x3f, r24	; 63
    28d4:	c1 82       	std	Z+1, r12	; 0x01
    28d6:	d2 82       	std	Z+2, r13	; 0x02
    28d8:	e3 82       	std	Z+3, r14	; 0x03
    28da:	f4 82       	std	Z+4, r15	; 0x04
    28dc:	15 82       	std	Z+5, r1	; 0x05
    28de:	16 82       	std	Z+6, r1	; 0x06
    28e0:	07 83       	std	Z+7, r16	; 0x07
    28e2:	10 87       	std	Z+8, r17	; 0x08
    28e4:	81 10       	cpse	r8, r1
    28e6:	06 c0       	rjmp	.+12     	; 0x28f4 <udd_ep_run+0xc4>
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	e1 14       	cp	r14, r1
    28ec:	f1 04       	cpc	r15, r1
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <udd_ep_run+0xc6>
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <udd_ep_run+0xc6>
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	f5 01       	movw	r30, r10
    28f8:	80 81       	ld	r24, Z
    28fa:	90 fb       	bst	r25, 0
    28fc:	81 f9       	bld	r24, 1
    28fe:	8b 7f       	andi	r24, 0xFB	; 251
    2900:	80 83       	st	Z, r24
    2902:	77 20       	and	r7, r7
    2904:	59 f0       	breq	.+22     	; 0x291c <udd_ep_run+0xec>
    2906:	cc 0f       	add	r28, r28
    2908:	dd 1f       	adc	r29, r29
    290a:	cc 0f       	add	r28, r28
    290c:	dd 1f       	adc	r29, r29
    290e:	cc 0f       	add	r28, r28
    2910:	dd 1f       	adc	r29, r29
    2912:	cc 55       	subi	r28, 0x5C	; 92
    2914:	d8 4d       	sbci	r29, 0xD8	; 216
    2916:	1a 8a       	std	Y+18, r1	; 0x12
    2918:	1b 8a       	std	Y+19, r1	; 0x13
    291a:	2d c0       	rjmp	.+90     	; 0x2976 <udd_ep_run+0x146>
    291c:	fe 01       	movw	r30, r28
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	ee 0f       	add	r30, r30
    2924:	ff 1f       	adc	r31, r31
    2926:	ee 0f       	add	r30, r30
    2928:	ff 1f       	adc	r31, r31
    292a:	ec 55       	subi	r30, 0x5C	; 92
    292c:	f8 4d       	sbci	r31, 0xD8	; 216
    292e:	85 85       	ldd	r24, Z+13	; 0x0d
    2930:	80 7c       	andi	r24, 0xC0	; 192
    2932:	80 3c       	cpi	r24, 0xC0	; 192
    2934:	a1 f4       	brne	.+40     	; 0x295e <udd_ep_run+0x12e>
    2936:	ce 01       	movw	r24, r28
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	80 55       	subi	r24, 0x50	; 80
    2946:	98 4d       	sbci	r25, 0xD8	; 216
    2948:	c9 db       	rcall	.-2158   	; 0x20dc <udd_ep_get_size>
    294a:	bc 01       	movw	r22, r24
    294c:	c7 01       	movw	r24, r14
    294e:	67 d4       	rcall	.+2254   	; 0x321e <__udivmodhi4>
    2950:	89 2b       	or	r24, r25
    2952:	29 f0       	breq	.+10     	; 0x295e <udd_ep_run+0x12e>
    2954:	f5 01       	movw	r30, r10
    2956:	80 81       	ld	r24, Z
    2958:	8e 7f       	andi	r24, 0xFE	; 254
    295a:	80 83       	st	Z, r24
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <udd_ep_run+0x156>
    295e:	cc 0f       	add	r28, r28
    2960:	dd 1f       	adc	r29, r29
    2962:	cc 0f       	add	r28, r28
    2964:	dd 1f       	adc	r29, r29
    2966:	cc 0f       	add	r28, r28
    2968:	dd 1f       	adc	r29, r29
    296a:	cc 55       	subi	r28, 0x5C	; 92
    296c:	d8 4d       	sbci	r29, 0xD8	; 216
    296e:	1e 86       	std	Y+14, r1	; 0x0e
    2970:	1f 86       	std	Y+15, r1	; 0x0f
    2972:	1a 8a       	std	Y+18, r1	; 0x12
    2974:	1b 8a       	std	Y+19, r1	; 0x13
    2976:	89 2d       	mov	r24, r9
    2978:	65 dc       	rcall	.-1846   	; 0x2244 <udd_ep_trans_complet>
    297a:	77 24       	eor	r7, r7
    297c:	73 94       	inc	r7
    297e:	03 c0       	rjmp	.+6      	; 0x2986 <udd_ep_run+0x156>
    2980:	71 2c       	mov	r7, r1
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <udd_ep_run+0x156>
    2984:	71 2c       	mov	r7, r1
    2986:	87 2d       	mov	r24, r7
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	ff 90       	pop	r15
    2992:	ef 90       	pop	r14
    2994:	df 90       	pop	r13
    2996:	cf 90       	pop	r12
    2998:	bf 90       	pop	r11
    299a:	af 90       	pop	r10
    299c:	9f 90       	pop	r9
    299e:	8f 90       	pop	r8
    29a0:	7f 90       	pop	r7
    29a2:	08 95       	ret

000029a4 <udd_ep_abort>:
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	18 2f       	mov	r17, r24
    29b0:	f8 2e       	mov	r15, r24
    29b2:	ff 1c       	adc	r15, r15
    29b4:	ff 24       	eor	r15, r15
    29b6:	ff 1c       	adc	r15, r15
    29b8:	c8 2f       	mov	r28, r24
    29ba:	cf 70       	andi	r28, 0x0F	; 15
    29bc:	d0 e0       	ldi	r29, 0x00	; 0
    29be:	cc 0f       	add	r28, r28
    29c0:	dd 1f       	adc	r29, r29
    29c2:	cf 0d       	add	r28, r15
    29c4:	d1 1d       	adc	r29, r1
    29c6:	b3 db       	rcall	.-2202   	; 0x212e <udd_ep_get_job>
    29c8:	dc 01       	movw	r26, r24
    29ca:	fe 01       	movw	r30, r28
    29cc:	ee 0f       	add	r30, r30
    29ce:	ff 1f       	adc	r31, r31
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	e0 55       	subi	r30, 0x50	; 80
    29da:	f8 4d       	sbci	r31, 0xD8	; 216
    29dc:	02 e0       	ldi	r16, 0x02	; 2
    29de:	05 93       	las	Z, r16
    29e0:	8c 91       	ld	r24, X
    29e2:	80 ff       	sbrs	r24, 0
    29e4:	22 c0       	rjmp	.+68     	; 0x2a2a <udd_ep_abort+0x86>
    29e6:	8e 7f       	andi	r24, 0xFE	; 254
    29e8:	8c 93       	st	X, r24
    29ea:	17 96       	adiw	r26, 0x07	; 7
    29ec:	ed 91       	ld	r30, X+
    29ee:	fc 91       	ld	r31, X
    29f0:	18 97       	sbiw	r26, 0x08	; 8
    29f2:	30 97       	sbiw	r30, 0x00	; 0
    29f4:	d1 f0       	breq	.+52     	; 0x2a2a <udd_ep_abort+0x86>
    29f6:	ff 20       	and	r15, r15
    29f8:	59 f0       	breq	.+22     	; 0x2a10 <udd_ep_abort+0x6c>
    29fa:	cc 0f       	add	r28, r28
    29fc:	dd 1f       	adc	r29, r29
    29fe:	cc 0f       	add	r28, r28
    2a00:	dd 1f       	adc	r29, r29
    2a02:	cc 0f       	add	r28, r28
    2a04:	dd 1f       	adc	r29, r29
    2a06:	cc 55       	subi	r28, 0x5C	; 92
    2a08:	d8 4d       	sbci	r29, 0xD8	; 216
    2a0a:	6a 89       	ldd	r22, Y+18	; 0x12
    2a0c:	7b 89       	ldd	r23, Y+19	; 0x13
    2a0e:	0a c0       	rjmp	.+20     	; 0x2a24 <udd_ep_abort+0x80>
    2a10:	cc 0f       	add	r28, r28
    2a12:	dd 1f       	adc	r29, r29
    2a14:	cc 0f       	add	r28, r28
    2a16:	dd 1f       	adc	r29, r29
    2a18:	cc 0f       	add	r28, r28
    2a1a:	dd 1f       	adc	r29, r29
    2a1c:	cc 55       	subi	r28, 0x5C	; 92
    2a1e:	d8 4d       	sbci	r29, 0xD8	; 216
    2a20:	6e 85       	ldd	r22, Y+14	; 0x0e
    2a22:	7f 85       	ldd	r23, Y+15	; 0x0f
    2a24:	41 2f       	mov	r20, r17
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	19 95       	eicall
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	ff 90       	pop	r15
    2a34:	08 95       	ret

00002a36 <udd_ep_free>:
    2a36:	cf 93       	push	r28
    2a38:	c8 2f       	mov	r28, r24
    2a3a:	b4 df       	rcall	.-152    	; 0x29a4 <udd_ep_abort>
    2a3c:	ec 2f       	mov	r30, r28
    2a3e:	ef 70       	andi	r30, 0x0F	; 15
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	ee 0f       	add	r30, r30
    2a44:	ff 1f       	adc	r31, r31
    2a46:	8c 2f       	mov	r24, r28
    2a48:	cc 0f       	add	r28, r28
    2a4a:	99 0b       	sbc	r25, r25
    2a4c:	88 27       	eor	r24, r24
    2a4e:	99 0f       	add	r25, r25
    2a50:	88 1f       	adc	r24, r24
    2a52:	99 27       	eor	r25, r25
    2a54:	e8 0f       	add	r30, r24
    2a56:	f9 1f       	adc	r31, r25
    2a58:	ee 0f       	add	r30, r30
    2a5a:	ff 1f       	adc	r31, r31
    2a5c:	ee 0f       	add	r30, r30
    2a5e:	ff 1f       	adc	r31, r31
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ec 55       	subi	r30, 0x5C	; 92
    2a66:	f8 4d       	sbci	r31, 0xD8	; 216
    2a68:	15 86       	std	Z+13, r1	; 0x0d
    2a6a:	cf 91       	pop	r28
    2a6c:	08 95       	ret

00002a6e <udd_ep_set_halt>:
    2a6e:	0f 93       	push	r16
    2a70:	e8 2f       	mov	r30, r24
    2a72:	ef 70       	andi	r30, 0x0F	; 15
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	ee 0f       	add	r30, r30
    2a78:	ff 1f       	adc	r31, r31
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	08 2e       	mov	r0, r24
    2a7e:	00 0c       	add	r0, r0
    2a80:	33 0b       	sbc	r19, r19
    2a82:	22 27       	eor	r18, r18
    2a84:	33 0f       	add	r19, r19
    2a86:	22 1f       	adc	r18, r18
    2a88:	33 27       	eor	r19, r19
    2a8a:	e2 0f       	add	r30, r18
    2a8c:	f3 1f       	adc	r31, r19
    2a8e:	ee 0f       	add	r30, r30
    2a90:	ff 1f       	adc	r31, r31
    2a92:	ee 0f       	add	r30, r30
    2a94:	ff 1f       	adc	r31, r31
    2a96:	ee 0f       	add	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	df 01       	movw	r26, r30
    2a9c:	ac 55       	subi	r26, 0x5C	; 92
    2a9e:	b8 4d       	sbci	r27, 0xD8	; 216
    2aa0:	1d 96       	adiw	r26, 0x0d	; 13
    2aa2:	9c 91       	ld	r25, X
    2aa4:	1d 97       	sbiw	r26, 0x0d	; 13
    2aa6:	94 60       	ori	r25, 0x04	; 4
    2aa8:	1d 96       	adiw	r26, 0x0d	; 13
    2aaa:	9c 93       	st	X, r25
    2aac:	e0 55       	subi	r30, 0x50	; 80
    2aae:	f8 4d       	sbci	r31, 0xD8	; 216
    2ab0:	01 e0       	ldi	r16, 0x01	; 1
    2ab2:	06 93       	lac	Z, r16
    2ab4:	77 df       	rcall	.-274    	; 0x29a4 <udd_ep_abort>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0f 91       	pop	r16
    2aba:	08 95       	ret

00002abc <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2abc:	1f 92       	push	r1
    2abe:	0f 92       	push	r0
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	0f 92       	push	r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	0b b6       	in	r0, 0x3b	; 59
    2ac8:	0f 92       	push	r0
    2aca:	0f 93       	push	r16
    2acc:	2f 93       	push	r18
    2ace:	3f 93       	push	r19
    2ad0:	4f 93       	push	r20
    2ad2:	5f 93       	push	r21
    2ad4:	6f 93       	push	r22
    2ad6:	7f 93       	push	r23
    2ad8:	8f 93       	push	r24
    2ada:	9f 93       	push	r25
    2adc:	af 93       	push	r26
    2ade:	bf 93       	push	r27
    2ae0:	ef 93       	push	r30
    2ae2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2ae4:	80 91 cb 04 	lds	r24, 0x04CB
    2ae8:	88 23       	and	r24, r24
    2aea:	34 f4       	brge	.+12     	; 0x2af8 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2aec:	80 e8       	ldi	r24, 0x80	; 128
    2aee:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2af2:	0e 94 b3 05 	call	0xb66	; 0xb66 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2af6:	82 c0       	rjmp	.+260    	; 0x2bfc <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2af8:	80 91 cb 04 	lds	r24, 0x04CB
    2afc:	82 ff       	sbrs	r24, 2
    2afe:	20 c0       	rjmp	.+64     	; 0x2b40 <__vector_125+0x84>
		udd_ack_underflow_event();
    2b00:	84 e0       	ldi	r24, 0x04	; 4
    2b02:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2b06:	80 91 b8 27 	lds	r24, 0x27B8
    2b0a:	86 ff       	sbrs	r24, 6
    2b0c:	77 c0       	rjmp	.+238    	; 0x2bfc <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b0e:	80 91 cc 04 	lds	r24, 0x04CC
    2b12:	81 fd       	sbrc	r24, 1
    2b14:	73 c0       	rjmp	.+230    	; 0x2bfc <__vector_125+0x140>
    2b16:	26 db       	rcall	.-2484   	; 0x2164 <udd_ctrl_interrupt_tc_setup>
    2b18:	81 11       	cpse	r24, r1
    2b1a:	70 c0       	rjmp	.+224    	; 0x2bfc <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2b1c:	80 91 a1 27 	lds	r24, 0x27A1
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2b24:	59 da       	rcall	.-2894   	; 0x1fd8 <udd_ctrl_send_zlp_in>
    2b26:	6a c0       	rjmp	.+212    	; 0x2bfc <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b28:	84 30       	cpi	r24, 0x04	; 4
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <__vector_125+0x72>
    2b2c:	67 c0       	rjmp	.+206    	; 0x2bfc <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2b2e:	e9 eb       	ldi	r30, 0xB9	; 185
    2b30:	f7 e2       	ldi	r31, 0x27	; 39
    2b32:	04 e0       	ldi	r16, 0x04	; 4
    2b34:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b36:	e1 eb       	ldi	r30, 0xB1	; 177
    2b38:	f7 e2       	ldi	r31, 0x27	; 39
    2b3a:	04 e0       	ldi	r16, 0x04	; 4
    2b3c:	05 93       	las	Z, r16
    2b3e:	5e c0       	rjmp	.+188    	; 0x2bfc <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2b40:	80 91 cb 04 	lds	r24, 0x04CB
    2b44:	81 ff       	sbrs	r24, 1
    2b46:	55 c0       	rjmp	.+170    	; 0x2bf2 <__vector_125+0x136>
		udd_ack_overflow_event();
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2b4e:	80 91 b0 27 	lds	r24, 0x27B0
    2b52:	86 ff       	sbrs	r24, 6
    2b54:	53 c0       	rjmp	.+166    	; 0x2bfc <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b56:	80 91 cc 04 	lds	r24, 0x04CC
    2b5a:	81 fd       	sbrc	r24, 1
    2b5c:	4f c0       	rjmp	.+158    	; 0x2bfc <__vector_125+0x140>
    2b5e:	02 db       	rcall	.-2556   	; 0x2164 <udd_ctrl_interrupt_tc_setup>
    2b60:	81 11       	cpse	r24, r1
    2b62:	4c c0       	rjmp	.+152    	; 0x2bfc <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2b64:	80 91 a1 27 	lds	r24, 0x27A1
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	41 f4       	brne	.+16     	; 0x2b7c <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	80 93 a1 27 	sts	0x27A1, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2b72:	e0 eb       	ldi	r30, 0xB0	; 176
    2b74:	f7 e2       	ldi	r31, 0x27	; 39
    2b76:	02 e0       	ldi	r16, 0x02	; 2
    2b78:	06 93       	lac	Z, r16
    2b7a:	40 c0       	rjmp	.+128    	; 0x2bfc <__vector_125+0x140>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b7c:	83 30       	cpi	r24, 0x03	; 3
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <__vector_125+0xc6>
    2b80:	3d c0       	rjmp	.+122    	; 0x2bfc <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b82:	e9 eb       	ldi	r30, 0xB9	; 185
    2b84:	f7 e2       	ldi	r31, 0x27	; 39
    2b86:	04 e0       	ldi	r16, 0x04	; 4
    2b88:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b8a:	e1 eb       	ldi	r30, 0xB1	; 177
    2b8c:	f7 e2       	ldi	r31, 0x27	; 39
    2b8e:	04 e0       	ldi	r16, 0x04	; 4
    2b90:	05 93       	las	Z, r16
    2b92:	34 c0       	rjmp	.+104    	; 0x2bfc <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b94:	80 e1       	ldi	r24, 0x10	; 16
    2b96:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	03 df       	rcall	.-506    	; 0x29a4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b9e:	81 e8       	ldi	r24, 0x81	; 129
    2ba0:	01 df       	rcall	.-510    	; 0x29a4 <udd_ep_abort>
		}
#endif
		udc_reset();
    2ba2:	0e 94 8c 05 	call	0xb18	; 0xb18 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2ba6:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2baa:	e4 ea       	ldi	r30, 0xA4	; 164
    2bac:	f7 e2       	ldi	r31, 0x27	; 39
    2bae:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2bb0:	96 e0       	ldi	r25, 0x06	; 6
    2bb2:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2bb4:	83 e4       	ldi	r24, 0x43	; 67
    2bb6:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2bb8:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2bba:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2bbc:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2bbe:	8d e5       	ldi	r24, 0x5D	; 93
    2bc0:	97 e2       	ldi	r25, 0x27	; 39
    2bc2:	80 8b       	std	Z+16, r24	; 0x10
    2bc4:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    2bc6:	d3 d9       	rcall	.-3162   	; 0x1f6e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2bc8:	19 c0       	rjmp	.+50     	; 0x2bfc <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    2bca:	80 91 cb 04 	lds	r24, 0x04CB
    2bce:	86 ff       	sbrs	r24, 6
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <__vector_125+0x122>
		udd_ack_suspend_event();
    2bd2:	80 e4       	ldi	r24, 0x40	; 64
    2bd4:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	aa d9       	rcall	.-3244   	; 0x1f30 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    2bde:	80 91 cb 04 	lds	r24, 0x04CB
    2be2:	85 ff       	sbrs	r24, 5
    2be4:	0b c0       	rjmp	.+22     	; 0x2bfc <__vector_125+0x140>
		udd_ack_resume_event();
    2be6:	80 e2       	ldi	r24, 0x20	; 32
    2be8:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	a0 d9       	rcall	.-3264   	; 0x1f30 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2bf0:	05 c0       	rjmp	.+10     	; 0x2bfc <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2bf2:	80 91 cb 04 	lds	r24, 0x04CB
    2bf6:	84 ff       	sbrs	r24, 4
    2bf8:	e8 cf       	rjmp	.-48     	; 0x2bca <__vector_125+0x10e>
    2bfa:	cc cf       	rjmp	.-104    	; 0x2b94 <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2bfc:	ff 91       	pop	r31
    2bfe:	ef 91       	pop	r30
    2c00:	bf 91       	pop	r27
    2c02:	af 91       	pop	r26
    2c04:	9f 91       	pop	r25
    2c06:	8f 91       	pop	r24
    2c08:	7f 91       	pop	r23
    2c0a:	6f 91       	pop	r22
    2c0c:	5f 91       	pop	r21
    2c0e:	4f 91       	pop	r20
    2c10:	3f 91       	pop	r19
    2c12:	2f 91       	pop	r18
    2c14:	0f 91       	pop	r16
    2c16:	0f 90       	pop	r0
    2c18:	0b be       	out	0x3b, r0	; 59
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	0f 90       	pop	r0
    2c20:	1f 90       	pop	r1
    2c22:	18 95       	reti

00002c24 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	0b b6       	in	r0, 0x3b	; 59
    2c30:	0f 92       	push	r0
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	2f 93       	push	r18
    2c38:	3f 93       	push	r19
    2c3a:	4f 93       	push	r20
    2c3c:	5f 93       	push	r21
    2c3e:	6f 93       	push	r22
    2c40:	7f 93       	push	r23
    2c42:	8f 93       	push	r24
    2c44:	9f 93       	push	r25
    2c46:	af 93       	push	r26
    2c48:	bf 93       	push	r27
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	ef 93       	push	r30
    2c50:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2c52:	80 91 cc 04 	lds	r24, 0x04CC
    2c56:	81 fd       	sbrc	r24, 1
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2c5a:	84 da       	rcall	.-2808   	; 0x2164 <udd_ctrl_interrupt_tc_setup>
    2c5c:	81 11       	cpse	r24, r1
    2c5e:	c1 c0       	rjmp	.+386    	; 0x2de2 <__vector_126+0x1be>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c66:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    2c6a:	81 95       	neg	r24
    2c6c:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2c6e:	e0 eb       	ldi	r30, 0xB0	; 176
    2c70:	f7 e2       	ldi	r31, 0x27	; 39
    2c72:	e8 1b       	sub	r30, r24
    2c74:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c76:	20 81       	ld	r18, Z
    2c78:	31 81       	ldd	r19, Z+1	; 0x01
    2c7a:	20 5b       	subi	r18, 0xB0	; 176
    2c7c:	37 42       	sbci	r19, 0x27	; 39
    2c7e:	36 95       	lsr	r19
    2c80:	27 95       	ror	r18
    2c82:	36 95       	lsr	r19
    2c84:	27 95       	ror	r18
    2c86:	36 95       	lsr	r19
    2c88:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c8a:	82 2f       	mov	r24, r18
    2c8c:	86 95       	lsr	r24
    2c8e:	20 fd       	sbrc	r18, 0
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <__vector_126+0x72>
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <__vector_126+0x74>
    2c96:	90 e8       	ldi	r25, 0x80	; 128
    2c98:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c9a:	e8 2f       	mov	r30, r24
    2c9c:	ef 70       	andi	r30, 0x0F	; 15
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	ee 0f       	add	r30, r30
    2ca2:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	08 2e       	mov	r0, r24
    2ca8:	00 0c       	add	r0, r0
    2caa:	33 0b       	sbc	r19, r19
    2cac:	22 27       	eor	r18, r18
    2cae:	33 0f       	add	r19, r19
    2cb0:	22 1f       	adc	r18, r18
    2cb2:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2cb8:	df 01       	movw	r26, r30
    2cba:	aa 0f       	add	r26, r26
    2cbc:	bb 1f       	adc	r27, r27
    2cbe:	aa 0f       	add	r26, r26
    2cc0:	bb 1f       	adc	r27, r27
    2cc2:	aa 0f       	add	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	ac 55       	subi	r26, 0x5C	; 92
    2cc8:	b8 4d       	sbci	r27, 0xD8	; 216
    2cca:	1c 96       	adiw	r26, 0x0c	; 12
    2ccc:	9c 91       	ld	r25, X
    2cce:	95 ff       	sbrs	r25, 5
    2cd0:	88 c0       	rjmp	.+272    	; 0x2de2 <__vector_126+0x1be>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2cd2:	ee 0f       	add	r30, r30
    2cd4:	ff 1f       	adc	r31, r31
    2cd6:	ee 0f       	add	r30, r30
    2cd8:	ff 1f       	adc	r31, r31
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	e0 55       	subi	r30, 0x50	; 80
    2ce0:	f8 4d       	sbci	r31, 0xD8	; 216
    2ce2:	00 e2       	ldi	r16, 0x20	; 32
    2ce4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	77 c0       	rjmp	.+238    	; 0x2dd8 <__vector_126+0x1b4>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cea:	80 91 a1 27 	lds	r24, 0x27A1
    2cee:	84 30       	cpi	r24, 0x04	; 4
    2cf0:	19 f4       	brne	.+6      	; 0x2cf8 <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2cf2:	80 d9       	rcall	.-3328   	; 0x1ff4 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2cf4:	3c d9       	rcall	.-3464   	; 0x1f6e <udd_ctrl_init>
    2cf6:	75 c0       	rjmp	.+234    	; 0x2de2 <__vector_126+0x1be>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2cf8:	00 91 b2 27 	lds	r16, 0x27B2
    2cfc:	10 91 b3 27 	lds	r17, 0x27B3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2d00:	80 91 fb 27 	lds	r24, 0x27FB
    2d04:	90 91 fc 27 	lds	r25, 0x27FC
    2d08:	c0 91 9d 27 	lds	r28, 0x279D
    2d0c:	d0 91 9e 27 	lds	r29, 0x279E
    2d10:	9e 01       	movw	r18, r28
    2d12:	20 0f       	add	r18, r16
    2d14:	31 1f       	adc	r19, r17
    2d16:	82 17       	cp	r24, r18
    2d18:	93 07       	cpc	r25, r19
    2d1a:	18 f4       	brcc	.+6      	; 0x2d22 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2d1c:	8c 01       	movw	r16, r24
    2d1e:	0c 1b       	sub	r16, r28
    2d20:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2d22:	80 91 f9 27 	lds	r24, 0x27F9
    2d26:	90 91 fa 27 	lds	r25, 0x27FA
    2d2a:	a8 01       	movw	r20, r16
    2d2c:	6d e5       	ldi	r22, 0x5D	; 93
    2d2e:	77 e2       	ldi	r23, 0x27	; 39
    2d30:	8c 0f       	add	r24, r28
    2d32:	9d 1f       	adc	r25, r29
    2d34:	b2 d2       	rcall	.+1380   	; 0x329a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2d36:	c0 0f       	add	r28, r16
    2d38:	d1 1f       	adc	r29, r17
    2d3a:	c0 93 9d 27 	sts	0x279D, r28
    2d3e:	d0 93 9e 27 	sts	0x279E, r29

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2d42:	00 34       	cpi	r16, 0x40	; 64
    2d44:	11 05       	cpc	r17, r1
    2d46:	69 f4       	brne	.+26     	; 0x2d62 <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2d48:	80 91 9f 27 	lds	r24, 0x279F
    2d4c:	90 91 a0 27 	lds	r25, 0x27A0
    2d50:	8c 0f       	add	r24, r28
    2d52:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2d54:	20 91 f7 27 	lds	r18, 0x27F7
    2d58:	30 91 f8 27 	lds	r19, 0x27F8
    2d5c:	82 17       	cp	r24, r18
    2d5e:	93 07       	cpc	r25, r19
    2d60:	80 f0       	brcs	.+32     	; 0x2d82 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2d62:	e1 ef       	ldi	r30, 0xF1	; 241
    2d64:	f7 e2       	ldi	r31, 0x27	; 39
    2d66:	c2 87       	std	Z+10, r28	; 0x0a
    2d68:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d6a:	06 84       	ldd	r0, Z+14	; 0x0e
    2d6c:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d6e:	e0 2d       	mov	r30, r0
    2d70:	30 97       	sbiw	r30, 0x00	; 0
    2d72:	29 f0       	breq	.+10     	; 0x2d7e <__vector_126+0x15a>
			if (!udd_g_ctrlreq.over_under_run()) {
    2d74:	19 95       	eicall
    2d76:	81 11       	cpse	r24, r1
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <__vector_126+0x15a>
				// Stall ZLP
				udd_ctrl_stall_data();
    2d7a:	20 d9       	rcall	.-3520   	; 0x1fbc <udd_ctrl_stall_data>
    2d7c:	32 c0       	rjmp	.+100    	; 0x2de2 <__vector_126+0x1be>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d7e:	2c d9       	rcall	.-3496   	; 0x1fd8 <udd_ctrl_send_zlp_in>
    2d80:	30 c0       	rjmp	.+96     	; 0x2de2 <__vector_126+0x1be>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d82:	80 91 fb 27 	lds	r24, 0x27FB
    2d86:	90 91 fc 27 	lds	r25, 0x27FC
    2d8a:	c8 17       	cp	r28, r24
    2d8c:	d9 07       	cpc	r29, r25
    2d8e:	f9 f4       	brne	.+62     	; 0x2dce <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d90:	e0 91 ff 27 	lds	r30, 0x27FF
    2d94:	f0 91 00 28 	lds	r31, 0x2800
    2d98:	30 97       	sbiw	r30, 0x00	; 0
    2d9a:	11 f4       	brne	.+4      	; 0x2da0 <__vector_126+0x17c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d9c:	0f d9       	rcall	.-3554   	; 0x1fbc <udd_ctrl_stall_data>
    2d9e:	21 c0       	rjmp	.+66     	; 0x2de2 <__vector_126+0x1be>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2da0:	19 95       	eicall
    2da2:	81 11       	cpse	r24, r1
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2da6:	0a d9       	rcall	.-3564   	; 0x1fbc <udd_ctrl_stall_data>
    2da8:	1c c0       	rjmp	.+56     	; 0x2de2 <__vector_126+0x1be>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2daa:	20 91 9f 27 	lds	r18, 0x279F
    2dae:	30 91 a0 27 	lds	r19, 0x27A0
    2db2:	80 91 9d 27 	lds	r24, 0x279D
    2db6:	90 91 9e 27 	lds	r25, 0x279E
    2dba:	82 0f       	add	r24, r18
    2dbc:	93 1f       	adc	r25, r19
    2dbe:	80 93 9f 27 	sts	0x279F, r24
    2dc2:	90 93 a0 27 	sts	0x27A0, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2dc6:	10 92 9d 27 	sts	0x279D, r1
    2dca:	10 92 9e 27 	sts	0x279E, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2dce:	e0 eb       	ldi	r30, 0xB0	; 176
    2dd0:	f7 e2       	ldi	r31, 0x27	; 39
    2dd2:	02 e0       	ldi	r16, 0x02	; 2
    2dd4:	06 93       	lac	Z, r16
    2dd6:	05 c0       	rjmp	.+10     	; 0x2de2 <__vector_126+0x1be>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2dd8:	80 38       	cpi	r24, 0x80	; 128
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <__vector_126+0x1bc>
		udd_ctrl_in_sent();
    2ddc:	13 d9       	rcall	.-3546   	; 0x2004 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <__vector_126+0x1be>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2de0:	31 da       	rcall	.-2974   	; 0x2244 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2de2:	ff 91       	pop	r31
    2de4:	ef 91       	pop	r30
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	bf 91       	pop	r27
    2dec:	af 91       	pop	r26
    2dee:	9f 91       	pop	r25
    2df0:	8f 91       	pop	r24
    2df2:	7f 91       	pop	r23
    2df4:	6f 91       	pop	r22
    2df6:	5f 91       	pop	r21
    2df8:	4f 91       	pop	r20
    2dfa:	3f 91       	pop	r19
    2dfc:	2f 91       	pop	r18
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	0f 90       	pop	r0
    2e04:	0b be       	out	0x3b, r0	; 59
    2e06:	0f 90       	pop	r0
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	0f 90       	pop	r0
    2e0c:	1f 90       	pop	r1
    2e0e:	18 95       	reti

00002e10 <init_pwm_motor_driver>:
		delay_ms(100);
		linear_speed_setting -= 10;
		setSpeed(linear_speed_setting,angular_speed_setting);
	}
	setSpeed(0,0);
}
    2e10:	a0 e4       	ldi	r26, 0x40	; 64
    2e12:	b6 e0       	ldi	r27, 0x06	; 6
    2e14:	8f e0       	ldi	r24, 0x0F	; 15
    2e16:	8c 93       	st	X, r24
    2e18:	e0 e0       	ldi	r30, 0x00	; 0
    2e1a:	f8 e0       	ldi	r31, 0x08	; 8
    2e1c:	80 81       	ld	r24, Z
    2e1e:	84 60       	ori	r24, 0x04	; 4
    2e20:	80 83       	st	Z, r24
    2e22:	81 81       	ldd	r24, Z+1	; 0x01
    2e24:	83 63       	ori	r24, 0x33	; 51
    2e26:	81 83       	std	Z+1, r24	; 0x01
    2e28:	80 ed       	ldi	r24, 0xD0	; 208
    2e2a:	97 e0       	ldi	r25, 0x07	; 7
    2e2c:	86 a3       	std	Z+38, r24	; 0x26
    2e2e:	97 a3       	std	Z+39, r25	; 0x27
    2e30:	12 a6       	std	Z+42, r1	; 0x2a
    2e32:	13 a6       	std	Z+43, r1	; 0x2b
    2e34:	10 a6       	std	Z+40, r1	; 0x28
    2e36:	11 a6       	std	Z+41, r1	; 0x29
    2e38:	14 96       	adiw	r26, 0x04	; 4
    2e3a:	8c 91       	ld	r24, X
    2e3c:	14 97       	sbiw	r26, 0x04	; 4
    2e3e:	84 60       	ori	r24, 0x04	; 4
    2e40:	14 96       	adiw	r26, 0x04	; 4
    2e42:	8c 93       	st	X, r24
    2e44:	14 97       	sbiw	r26, 0x04	; 4
    2e46:	14 96       	adiw	r26, 0x04	; 4
    2e48:	8c 91       	ld	r24, X
    2e4a:	14 97       	sbiw	r26, 0x04	; 4
    2e4c:	88 60       	ori	r24, 0x08	; 8
    2e4e:	14 96       	adiw	r26, 0x04	; 4
    2e50:	8c 93       	st	X, r24
    2e52:	08 95       	ret

00002e54 <calculate_left_wheel_speed>:
    2e54:	9c 01       	movw	r18, r24
    2e56:	22 0f       	add	r18, r18
    2e58:	33 1f       	adc	r19, r19
    2e5a:	4c e2       	ldi	r20, 0x2C	; 44
    2e5c:	46 9f       	mul	r20, r22
    2e5e:	c0 01       	movw	r24, r0
    2e60:	47 9f       	mul	r20, r23
    2e62:	90 0d       	add	r25, r0
    2e64:	11 24       	eor	r1, r1
    2e66:	64 e6       	ldi	r22, 0x64	; 100
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	ed d1       	rcall	.+986    	; 0x3246 <__divmodhi4>
    2e6c:	26 1b       	sub	r18, r22
    2e6e:	37 0b       	sbc	r19, r23
    2e70:	c9 01       	movw	r24, r18
    2e72:	99 23       	and	r25, r25
    2e74:	0c f4       	brge	.+2      	; 0x2e78 <calculate_left_wheel_speed+0x24>
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	95 95       	asr	r25
    2e7a:	87 95       	ror	r24
    2e7c:	08 95       	ret

00002e7e <calculate_right_wheel_speed>:
    2e7e:	9c 01       	movw	r18, r24
    2e80:	22 0f       	add	r18, r18
    2e82:	33 1f       	adc	r19, r19
    2e84:	4c e2       	ldi	r20, 0x2C	; 44
    2e86:	46 9f       	mul	r20, r22
    2e88:	c0 01       	movw	r24, r0
    2e8a:	47 9f       	mul	r20, r23
    2e8c:	90 0d       	add	r25, r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	64 e6       	ldi	r22, 0x64	; 100
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	d8 d1       	rcall	.+944    	; 0x3246 <__divmodhi4>
    2e96:	c9 01       	movw	r24, r18
    2e98:	86 0f       	add	r24, r22
    2e9a:	97 1f       	adc	r25, r23
    2e9c:	99 23       	and	r25, r25
    2e9e:	0c f4       	brge	.+2      	; 0x2ea2 <calculate_right_wheel_speed+0x24>
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	95 95       	asr	r25
    2ea4:	87 95       	ror	r24
    2ea6:	08 95       	ret

00002ea8 <speedToMotorSetting>:
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	ec 01       	movw	r28, r24
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	82 ea       	ldi	r24, 0xA2	; 162
    2eb4:	90 e2       	ldi	r25, 0x20	; 32
    2eb6:	9f 93       	push	r25
    2eb8:	8f 93       	push	r24
    2eba:	42 d2       	rcall	.+1156   	; 0x3340 <printf>
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	20 97       	sbiw	r28, 0x00	; 0
    2ec6:	01 f1       	breq	.+64     	; 0x2f08 <speedToMotorSetting+0x60>
    2ec8:	8d e7       	ldi	r24, 0x7D	; 125
    2eca:	8c 9f       	mul	r24, r28
    2ecc:	90 01       	movw	r18, r0
    2ece:	8d 9f       	mul	r24, r29
    2ed0:	30 0d       	add	r19, r0
    2ed2:	11 24       	eor	r1, r1
    2ed4:	27 50       	subi	r18, 0x07	; 7
    2ed6:	31 09       	sbc	r19, r1
    2ed8:	ad ec       	ldi	r26, 0xCD	; 205
    2eda:	bc ec       	ldi	r27, 0xCC	; 204
    2edc:	cf d1       	rcall	.+926    	; 0x327c <__umulhisi3>
    2ede:	ec 01       	movw	r28, r24
    2ee0:	d6 95       	lsr	r29
    2ee2:	c7 95       	ror	r28
    2ee4:	d6 95       	lsr	r29
    2ee6:	c7 95       	ror	r28
    2ee8:	d6 95       	lsr	r29
    2eea:	c7 95       	ror	r28
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	8e ea       	ldi	r24, 0xAE	; 174
    2ef2:	90 e2       	ldi	r25, 0x20	; 32
    2ef4:	9f 93       	push	r25
    2ef6:	8f 93       	push	r24
    2ef8:	23 d2       	rcall	.+1094   	; 0x3340 <printf>
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	8c 2f       	mov	r24, r28
    2f04:	9d 2f       	mov	r25, r29
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <speedToMotorSetting+0x64>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <left_set_wheel_speed>:
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	49 2f       	mov	r20, r25
    2f1a:	44 1f       	adc	r20, r20
    2f1c:	44 27       	eor	r20, r20
    2f1e:	44 1f       	adc	r20, r20
    2f20:	c4 2f       	mov	r28, r20
    2f22:	28 2f       	mov	r18, r24
    2f24:	39 2f       	mov	r19, r25
    2f26:	33 23       	and	r19, r19
    2f28:	1c f4       	brge	.+6      	; 0x2f30 <left_set_wheel_speed+0x1e>
    2f2a:	31 95       	neg	r19
    2f2c:	21 95       	neg	r18
    2f2e:	31 09       	sbc	r19, r1
    2f30:	12 2f       	mov	r17, r18
    2f32:	d3 2f       	mov	r29, r19
    2f34:	1f 92       	push	r1
    2f36:	4f 93       	push	r20
    2f38:	3f 93       	push	r19
    2f3a:	2f 93       	push	r18
    2f3c:	21 ec       	ldi	r18, 0xC1	; 193
    2f3e:	30 e2       	ldi	r19, 0x20	; 32
    2f40:	3f 93       	push	r19
    2f42:	2f 93       	push	r18
    2f44:	fd d1       	rcall	.+1018   	; 0x3340 <printf>
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	c1 30       	cpi	r28, 0x01	; 1
    2f54:	31 f4       	brne	.+12     	; 0x2f62 <left_set_wheel_speed+0x50>
    2f56:	e0 e4       	ldi	r30, 0x40	; 64
    2f58:	f6 e0       	ldi	r31, 0x06	; 6
    2f5a:	84 81       	ldd	r24, Z+4	; 0x04
    2f5c:	87 7f       	andi	r24, 0xF7	; 247
    2f5e:	84 83       	std	Z+4, r24	; 0x04
    2f60:	07 c0       	rjmp	.+14     	; 0x2f70 <left_set_wheel_speed+0x5e>
    2f62:	c1 11       	cpse	r28, r1
    2f64:	05 c0       	rjmp	.+10     	; 0x2f70 <left_set_wheel_speed+0x5e>
    2f66:	e0 e4       	ldi	r30, 0x40	; 64
    2f68:	f6 e0       	ldi	r31, 0x06	; 6
    2f6a:	84 81       	ldd	r24, Z+4	; 0x04
    2f6c:	88 60       	ori	r24, 0x08	; 8
    2f6e:	84 83       	std	Z+4, r24	; 0x04
    2f70:	81 2f       	mov	r24, r17
    2f72:	9d 2f       	mov	r25, r29
    2f74:	99 df       	rcall	.-206    	; 0x2ea8 <speedToMotorSetting>
    2f76:	80 93 2a 08 	sts	0x082A, r24
    2f7a:	90 93 2b 08 	sts	0x082B, r25
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	08 95       	ret

00002f86 <right_set_wheel_speed>:
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	49 2f       	mov	r20, r25
    2f8e:	44 1f       	adc	r20, r20
    2f90:	44 27       	eor	r20, r20
    2f92:	44 1f       	adc	r20, r20
    2f94:	c4 2f       	mov	r28, r20
    2f96:	28 2f       	mov	r18, r24
    2f98:	39 2f       	mov	r19, r25
    2f9a:	33 23       	and	r19, r19
    2f9c:	1c f4       	brge	.+6      	; 0x2fa4 <right_set_wheel_speed+0x1e>
    2f9e:	31 95       	neg	r19
    2fa0:	21 95       	neg	r18
    2fa2:	31 09       	sbc	r19, r1
    2fa4:	12 2f       	mov	r17, r18
    2fa6:	d3 2f       	mov	r29, r19
    2fa8:	1f 92       	push	r1
    2faa:	4f 93       	push	r20
    2fac:	3f 93       	push	r19
    2fae:	2f 93       	push	r18
    2fb0:	29 ed       	ldi	r18, 0xD9	; 217
    2fb2:	30 e2       	ldi	r19, 0x20	; 32
    2fb4:	3f 93       	push	r19
    2fb6:	2f 93       	push	r18
    2fb8:	c3 d1       	rcall	.+902    	; 0x3340 <printf>
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	c1 30       	cpi	r28, 0x01	; 1
    2fc8:	31 f4       	brne	.+12     	; 0x2fd6 <right_set_wheel_speed+0x50>
    2fca:	e0 e4       	ldi	r30, 0x40	; 64
    2fcc:	f6 e0       	ldi	r31, 0x06	; 6
    2fce:	84 81       	ldd	r24, Z+4	; 0x04
    2fd0:	8b 7f       	andi	r24, 0xFB	; 251
    2fd2:	84 83       	std	Z+4, r24	; 0x04
    2fd4:	07 c0       	rjmp	.+14     	; 0x2fe4 <right_set_wheel_speed+0x5e>
    2fd6:	c1 11       	cpse	r28, r1
    2fd8:	05 c0       	rjmp	.+10     	; 0x2fe4 <right_set_wheel_speed+0x5e>
    2fda:	e0 e4       	ldi	r30, 0x40	; 64
    2fdc:	f6 e0       	ldi	r31, 0x06	; 6
    2fde:	84 81       	ldd	r24, Z+4	; 0x04
    2fe0:	84 60       	ori	r24, 0x04	; 4
    2fe2:	84 83       	std	Z+4, r24	; 0x04
    2fe4:	81 2f       	mov	r24, r17
    2fe6:	9d 2f       	mov	r25, r29
    2fe8:	5f df       	rcall	.-322    	; 0x2ea8 <speedToMotorSetting>
    2fea:	80 93 28 08 	sts	0x0828, r24
    2fee:	90 93 29 08 	sts	0x0829, r25
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	08 95       	ret

00002ffa <charToMotorSetting>:
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	c8 2f       	mov	r28, r24
    3000:	d0 e0       	ldi	r29, 0x00	; 0
    3002:	6d 32       	cpi	r22, 0x2D	; 45
    3004:	11 f4       	brne	.+4      	; 0x300a <charToMotorSetting+0x10>
    3006:	c0 95       	com	r28
    3008:	d0 95       	com	r29
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	81 ef       	ldi	r24, 0xF1	; 241
    3010:	90 e2       	ldi	r25, 0x20	; 32
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	94 d1       	rcall	.+808    	; 0x3340 <printf>
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	ce 01       	movw	r24, r28
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	08 95       	ret

00003028 <setSpeed>:
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	ec 01       	movw	r28, r24
    3036:	8b 01       	movw	r16, r22
    3038:	0d df       	rcall	.-486    	; 0x2e54 <calculate_left_wheel_speed>
    303a:	7c 01       	movw	r14, r24
    303c:	b8 01       	movw	r22, r16
    303e:	ce 01       	movw	r24, r28
    3040:	1e df       	rcall	.-452    	; 0x2e7e <calculate_right_wheel_speed>
    3042:	ec 01       	movw	r28, r24
    3044:	c7 01       	movw	r24, r14
    3046:	65 df       	rcall	.-310    	; 0x2f12 <left_set_wheel_speed>
    3048:	ce 01       	movw	r24, r28
    304a:	9d df       	rcall	.-198    	; 0x2f86 <right_set_wheel_speed>
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	08 95       	ret

0000305a <main>:
	
/**
 * \brief main function
 */
int main (void)
{
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	29 97       	sbiw	r28, 0x09	; 9
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	de bf       	out	0x3e, r29	; 62
	 * - Initialize system clock sources according to device-specific
	 *   configuration parameters supplied in a conf_clock.h file.
	 * - Set up GPIO and board-specific features using additional configuration
	 *   parameters, if any, specified in a conf_board.h file.
	 */
	sysclk_init();
    3068:	0e 94 2d 01 	call	0x25a	; 0x25a <sysclk_init>
	board_init();
    306c:	0e 94 97 08 	call	0x112e	; 0x112e <board_init>

	// Initialize interrupt vector table support.
	irq_initialize_vectors();
    3070:	87 e0       	ldi	r24, 0x07	; 7
    3072:	80 93 a2 00 	sts	0x00A2, r24

	// Enable interrupts
	cpu_irq_enable();
    3076:	78 94       	sei
	* Run TIMER_EXAMPLE at TIMER_EXAMPLE_PERIOD(31250Hz) resolution
	*/
	//tc_set_resolution(&TCC1, TIMER_EXAMPLE_PERIOD);

		
	stdio_usb_init();
    3078:	0e 94 67 08 	call	0x10ce	; 0x10ce <stdio_usb_init>

	init_pwm_motor_driver();
    307c:	c9 de       	rcall	.-622    	; 0x2e10 <init_pwm_motor_driver>
	left_set_wheel_speed(0);
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	47 df       	rcall	.-370    	; 0x2f12 <left_set_wheel_speed>
	right_set_wheel_speed(0);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	7e df       	rcall	.-260    	; 0x2f86 <right_set_wheel_speed>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    308a:	80 e2       	ldi	r24, 0x20	; 32
    308c:	80 93 66 06 	sts	0x0666, r24
	//wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_250CLK);
	//wdt_enable(); //enable watchdog
	
	ioport_set_pin_low(LED3_GPIO);
	
	rx_state = idle;
    3090:	10 92 01 28 	sts	0x2801, r1
		
	int16_t left_speed_setting = 0;
	int16_t right_speed_setting = 0;
	
	int16_t linear_speed_setting = 0;
	int16_t angular_speed_setting = 0;
    3094:	18 86       	std	Y+8, r1	; 0x08
    3096:	19 86       	std	Y+9, r1	; 0x09
	uint8_t ch;
		
	int16_t left_speed_setting = 0;
	int16_t right_speed_setting = 0;
	
	int16_t linear_speed_setting = 0;
    3098:	21 2c       	mov	r2, r1
    309a:	31 2c       	mov	r3, r1
					rx_state = after_message;
				}
				break;
				
			case after_message:
				printf("After Message.\n\r");
    309c:	0f 2e       	mov	r0, r31
    309e:	fa e1       	ldi	r31, 0x1A	; 26
    30a0:	8f 2e       	mov	r8, r31
    30a2:	f1 e2       	ldi	r31, 0x21	; 33
    30a4:	9f 2e       	mov	r9, r31
    30a6:	f0 2d       	mov	r31, r0
				left_set_wheel_speed(left_speed_setting);
				right_set_wheel_speed(right_speed_setting);
				*/
				setSpeed(linear_speed_setting,angular_speed_setting);
				rx_state = idle;
				printf("e\n\r"); // Confirm out of receive mode. 
    30a8:	0f 2e       	mov	r0, r31
    30aa:	fb e2       	ldi	r31, 0x2B	; 43
    30ac:	af 2e       	mov	r10, r31
    30ae:	f1 e2       	ldi	r31, 0x21	; 33
    30b0:	bf 2e       	mov	r11, r31
    30b2:	f0 2d       	mov	r31, r0
				
				//tc_restart(&TCC1);
				break;
				
			case idle:
				printf("Idle.\n\r");
    30b4:	0f 2e       	mov	r0, r31
    30b6:	ff e2       	ldi	r31, 0x2F	; 47
    30b8:	cf 2e       	mov	r12, r31
    30ba:	f1 e2       	ldi	r31, 0x21	; 33
    30bc:	df 2e       	mov	r13, r31
    30be:	f0 2d       	mov	r31, r0
				scanf("%c",&ch); // get one input character
    30c0:	9e 01       	movw	r18, r28
    30c2:	2f 5f       	subi	r18, 0xFF	; 255
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	79 01       	movw	r14, r18
    30c8:	02 e0       	ldi	r16, 0x02	; 2
    30ca:	11 e2       	ldi	r17, 0x21	; 33
		* - ANGULAR SPEED: Speed setting, a 0 to 127 value.
		* - END OF MESSAGE: ascii value for "ESC"
		*/
		switch(rx_state){
			case receiving:
				printf("Receiving.\n\r");
    30cc:	0f 2e       	mov	r0, r31
    30ce:	f5 ef       	ldi	r31, 0xF5	; 245
    30d0:	6f 2e       	mov	r6, r31
    30d2:	f0 e2       	ldi	r31, 0x20	; 32
    30d4:	7f 2e       	mov	r7, r31
    30d6:	f0 2d       	mov	r31, r0
				scanf("%c",&ch);
				printf("Echo: %c\n\r",ch); // echo to output
    30d8:	0f 2e       	mov	r0, r31
    30da:	f5 e0       	ldi	r31, 0x05	; 5
    30dc:	4f 2e       	mov	r4, r31
    30de:	f1 e2       	ldi	r31, 0x21	; 33
    30e0:	5f 2e       	mov	r5, r31
    30e2:	f0 2d       	mov	r31, r0
				else if (ch == 97) // if "a"
				{
					uint8_t new_setting, val_sign;
					int16_t result;
					// Set angular speed;
					scanf("%c",&val_sign);
    30e4:	ce 01       	movw	r24, r28
    30e6:	02 96       	adiw	r24, 0x02	; 2
    30e8:	8c 83       	std	Y+4, r24	; 0x04
    30ea:	9d 83       	std	Y+5, r25	; 0x05
					//printf("Echo: %c\n",ch); // echo to output
					scanf("%c",&new_setting);
    30ec:	de 01       	movw	r26, r28
    30ee:	13 96       	adiw	r26, 0x03	; 3
    30f0:	ae 83       	std	Y+6, r26	; 0x06
    30f2:	bf 83       	std	Y+7, r27	; 0x07
		* - BEGINNING OF ANGULAR SPEED: ascii value for "a"
		* - +/-, ANGULAR SPEED: a char with the ascii value for + or -
		* - ANGULAR SPEED: Speed setting, a 0 to 127 value.
		* - END OF MESSAGE: ascii value for "ESC"
		*/
		switch(rx_state){
    30f4:	80 91 01 28 	lds	r24, 0x2801
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	09 f4       	brne	.+2      	; 0x30fe <main+0xa4>
    30fc:	62 c0       	rjmp	.+196    	; 0x31c2 <main+0x168>
    30fe:	08 f4       	brcc	.+2      	; 0x3102 <main+0xa8>
    3100:	71 c0       	rjmp	.+226    	; 0x31e4 <main+0x18a>
    3102:	82 30       	cpi	r24, 0x02	; 2
    3104:	c9 f7       	brne	.-14     	; 0x30f8 <main+0x9e>
			case receiving:
				printf("Receiving.\n\r");
    3106:	7f 92       	push	r7
    3108:	6f 92       	push	r6
    310a:	1a d1       	rcall	.+564    	; 0x3340 <printf>
				scanf("%c",&ch);
    310c:	ff 92       	push	r15
    310e:	ef 92       	push	r14
    3110:	1f 93       	push	r17
    3112:	0f 93       	push	r16
    3114:	28 d1       	rcall	.+592    	; 0x3366 <scanf>
				printf("Echo: %c\n\r",ch); // echo to output
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	1f 92       	push	r1
    311a:	8f 93       	push	r24
    311c:	5f 92       	push	r5
    311e:	4f 92       	push	r4
    3120:	0f d1       	rcall	.+542    	; 0x3340 <printf>
				if (ch == 115) // if "s"
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	83 37       	cpi	r24, 0x73	; 115
    312a:	61 f5       	brne	.+88     	; 0x3184 <main+0x12a>
				{
					int16_t result;
					uint8_t new_setting, val_sign;
					// Set linear speed;
					scanf("%c",&val_sign);
    312c:	3d 81       	ldd	r19, Y+5	; 0x05
    312e:	3f 93       	push	r19
    3130:	8c 81       	ldd	r24, Y+4	; 0x04
    3132:	8f 93       	push	r24
    3134:	1f 93       	push	r17
    3136:	0f 93       	push	r16
    3138:	16 d1       	rcall	.+556    	; 0x3366 <scanf>
					//printf("Echo: %c\n",ch); // echo to output
					printf("%c\n",val_sign); // echo to output
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	1f 92       	push	r1
    313e:	8f 93       	push	r24
    3140:	a6 e1       	ldi	r26, 0x16	; 22
    3142:	b1 e2       	ldi	r27, 0x21	; 33
    3144:	bf 93       	push	r27
    3146:	af 93       	push	r26
    3148:	fb d0       	rcall	.+502    	; 0x3340 <printf>
					scanf("%c",&new_setting);
    314a:	3f 81       	ldd	r19, Y+7	; 0x07
    314c:	3f 93       	push	r19
    314e:	8e 81       	ldd	r24, Y+6	; 0x06
    3150:	8f 93       	push	r24
    3152:	1f 93       	push	r17
    3154:	0f 93       	push	r16
    3156:	07 d1       	rcall	.+526    	; 0x3366 <scanf>
					printf("Echo: %c\n",new_setting); // echo to output
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	1f 92       	push	r1
    315c:	8f 93       	push	r24
    315e:	a0 e1       	ldi	r26, 0x10	; 16
    3160:	b1 e2       	ldi	r27, 0x21	; 33
    3162:	bf 93       	push	r27
    3164:	af 93       	push	r26
    3166:	ec d0       	rcall	.+472    	; 0x3340 <printf>

					linear_speed_setting = charToMotorSetting(new_setting, val_sign);
    3168:	6a 81       	ldd	r22, Y+2	; 0x02
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	46 df       	rcall	.-372    	; 0x2ffa <charToMotorSetting>
    316e:	1c 01       	movw	r2, r24
					printf("%d\n",result); // echo to output
    3170:	1f 92       	push	r1
    3172:	1f 92       	push	r1
    3174:	a1 ef       	ldi	r26, 0xF1	; 241
    3176:	b0 e2       	ldi	r27, 0x20	; 32
    3178:	bf 93       	push	r27
    317a:	af 93       	push	r26
    317c:	e1 d0       	rcall	.+450    	; 0x3340 <printf>
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	b8 cf       	rjmp	.-144    	; 0x30f4 <main+0x9a>
				}
				else if (ch == 97) // if "a"
    3184:	81 36       	cpi	r24, 0x61	; 97
    3186:	b1 f4       	brne	.+44     	; 0x31b4 <main+0x15a>
				{
					uint8_t new_setting, val_sign;
					int16_t result;
					// Set angular speed;
					scanf("%c",&val_sign);
    3188:	9d 81       	ldd	r25, Y+5	; 0x05
    318a:	9f 93       	push	r25
    318c:	ac 81       	ldd	r26, Y+4	; 0x04
    318e:	af 93       	push	r26
    3190:	1f 93       	push	r17
    3192:	0f 93       	push	r16
    3194:	e8 d0       	rcall	.+464    	; 0x3366 <scanf>
					//printf("Echo: %c\n",ch); // echo to output
					scanf("%c",&new_setting);
    3196:	bf 81       	ldd	r27, Y+7	; 0x07
    3198:	bf 93       	push	r27
    319a:	2e 81       	ldd	r18, Y+6	; 0x06
    319c:	2f 93       	push	r18
    319e:	1f 93       	push	r17
    31a0:	0f 93       	push	r16
    31a2:	e1 d0       	rcall	.+450    	; 0x3366 <scanf>

					
					angular_speed_setting = charToMotorSetting(new_setting, val_sign);
    31a4:	6a 81       	ldd	r22, Y+2	; 0x02
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	28 df       	rcall	.-432    	; 0x2ffa <charToMotorSetting>
    31aa:	88 87       	std	Y+8, r24	; 0x08
    31ac:	99 87       	std	Y+9, r25	; 0x09
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	a0 cf       	rjmp	.-192    	; 0x30f4 <main+0x9a>
				}
				else if (ch == 27) //if "Escape"
    31b4:	8b 31       	cpi	r24, 0x1B	; 27
    31b6:	09 f0       	breq	.+2      	; 0x31ba <main+0x160>
    31b8:	9d cf       	rjmp	.-198    	; 0x30f4 <main+0x9a>
				{
					rx_state = after_message;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 01 28 	sts	0x2801, r24
    31c0:	99 cf       	rjmp	.-206    	; 0x30f4 <main+0x9a>
				}
				break;
				
			case after_message:
				printf("After Message.\n\r");
    31c2:	9f 92       	push	r9
    31c4:	8f 92       	push	r8
    31c6:	bc d0       	rcall	.+376    	; 0x3340 <printf>
				right_speed_setting = calculate_right_wheel_speed(linear_speed_setting,
																angular_speed_setting);
				left_set_wheel_speed(left_speed_setting);
				right_set_wheel_speed(right_speed_setting);
				*/
				setSpeed(linear_speed_setting,angular_speed_setting);
    31c8:	68 85       	ldd	r22, Y+8	; 0x08
    31ca:	79 85       	ldd	r23, Y+9	; 0x09
    31cc:	c1 01       	movw	r24, r2
    31ce:	2c df       	rcall	.-424    	; 0x3028 <setSpeed>
				rx_state = idle;
    31d0:	10 92 01 28 	sts	0x2801, r1
				printf("e\n\r"); // Confirm out of receive mode. 
    31d4:	bf 92       	push	r11
    31d6:	af 92       	push	r10
    31d8:	b3 d0       	rcall	.+358    	; 0x3340 <printf>
				
				//tc_restart(&TCC1);
				break;
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	88 cf       	rjmp	.-240    	; 0x30f4 <main+0x9a>
				
			case idle:
				printf("Idle.\n\r");
    31e4:	df 92       	push	r13
    31e6:	cf 92       	push	r12
    31e8:	ab d0       	rcall	.+342    	; 0x3340 <printf>
				scanf("%c",&ch); // get one input character
    31ea:	ff 92       	push	r15
    31ec:	ef 92       	push	r14
    31ee:	1f 93       	push	r17
    31f0:	0f 93       	push	r16
    31f2:	b9 d0       	rcall	.+370    	; 0x3366 <scanf>
				//printf("Echo: %c\n\r",ch); // echo to output
				if (ch == 58) { // if ":"
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	8a 33       	cpi	r24, 0x3A	; 58
    3204:	51 f4       	brne	.+20     	; 0x321a <main+0x1c0>
					printf("r\n\r"); // Confirm in receive mode
    3206:	a7 e3       	ldi	r26, 0x37	; 55
    3208:	b1 e2       	ldi	r27, 0x21	; 33
    320a:	bf 93       	push	r27
    320c:	af 93       	push	r26
    320e:	98 d0       	rcall	.+304    	; 0x3340 <printf>
					rx_state = receiving;
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	80 93 01 28 	sts	0x2801, r24
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
				}		
				wdt_reset();		
    321a:	a8 95       	wdr
    321c:	6b cf       	rjmp	.-298    	; 0x30f4 <main+0x9a>

0000321e <__udivmodhi4>:
    321e:	aa 1b       	sub	r26, r26
    3220:	bb 1b       	sub	r27, r27
    3222:	51 e1       	ldi	r21, 0x11	; 17
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <__udivmodhi4_ep>

00003226 <__udivmodhi4_loop>:
    3226:	aa 1f       	adc	r26, r26
    3228:	bb 1f       	adc	r27, r27
    322a:	a6 17       	cp	r26, r22
    322c:	b7 07       	cpc	r27, r23
    322e:	10 f0       	brcs	.+4      	; 0x3234 <__udivmodhi4_ep>
    3230:	a6 1b       	sub	r26, r22
    3232:	b7 0b       	sbc	r27, r23

00003234 <__udivmodhi4_ep>:
    3234:	88 1f       	adc	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	5a 95       	dec	r21
    323a:	a9 f7       	brne	.-22     	; 0x3226 <__udivmodhi4_loop>
    323c:	80 95       	com	r24
    323e:	90 95       	com	r25
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	08 95       	ret

00003246 <__divmodhi4>:
    3246:	97 fb       	bst	r25, 7
    3248:	07 2e       	mov	r0, r23
    324a:	16 f4       	brtc	.+4      	; 0x3250 <__divmodhi4+0xa>
    324c:	00 94       	com	r0
    324e:	06 d0       	rcall	.+12     	; 0x325c <__divmodhi4_neg1>
    3250:	77 fd       	sbrc	r23, 7
    3252:	08 d0       	rcall	.+16     	; 0x3264 <__divmodhi4_neg2>
    3254:	e4 df       	rcall	.-56     	; 0x321e <__udivmodhi4>
    3256:	07 fc       	sbrc	r0, 7
    3258:	05 d0       	rcall	.+10     	; 0x3264 <__divmodhi4_neg2>
    325a:	3e f4       	brtc	.+14     	; 0x326a <__divmodhi4_exit>

0000325c <__divmodhi4_neg1>:
    325c:	90 95       	com	r25
    325e:	81 95       	neg	r24
    3260:	9f 4f       	sbci	r25, 0xFF	; 255
    3262:	08 95       	ret

00003264 <__divmodhi4_neg2>:
    3264:	70 95       	com	r23
    3266:	61 95       	neg	r22
    3268:	7f 4f       	sbci	r23, 0xFF	; 255

0000326a <__divmodhi4_exit>:
    326a:	08 95       	ret

0000326c <__tablejump2__>:
    326c:	ee 0f       	add	r30, r30
    326e:	ff 1f       	adc	r31, r31
    3270:	88 1f       	adc	r24, r24
    3272:	8b bf       	out	0x3b, r24	; 59
    3274:	07 90       	elpm	r0, Z+
    3276:	f6 91       	elpm	r31, Z
    3278:	e0 2d       	mov	r30, r0
    327a:	19 94       	eijmp

0000327c <__umulhisi3>:
    327c:	a2 9f       	mul	r26, r18
    327e:	b0 01       	movw	r22, r0
    3280:	b3 9f       	mul	r27, r19
    3282:	c0 01       	movw	r24, r0
    3284:	a3 9f       	mul	r26, r19
    3286:	70 0d       	add	r23, r0
    3288:	81 1d       	adc	r24, r1
    328a:	11 24       	eor	r1, r1
    328c:	91 1d       	adc	r25, r1
    328e:	b2 9f       	mul	r27, r18
    3290:	70 0d       	add	r23, r0
    3292:	81 1d       	adc	r24, r1
    3294:	11 24       	eor	r1, r1
    3296:	91 1d       	adc	r25, r1
    3298:	08 95       	ret

0000329a <memcpy>:
    329a:	fb 01       	movw	r30, r22
    329c:	dc 01       	movw	r26, r24
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <memcpy+0xa>
    32a0:	01 90       	ld	r0, Z+
    32a2:	0d 92       	st	X+, r0
    32a4:	41 50       	subi	r20, 0x01	; 1
    32a6:	50 40       	sbci	r21, 0x00	; 0
    32a8:	d8 f7       	brcc	.-10     	; 0x32a0 <memcpy+0x6>
    32aa:	08 95       	ret

000032ac <fdevopen>:
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	31 f4       	brne	.+12     	; 0x32c4 <fdevopen+0x18>
    32b8:	61 15       	cp	r22, r1
    32ba:	71 05       	cpc	r23, r1
    32bc:	19 f4       	brne	.+6      	; 0x32c4 <fdevopen+0x18>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	39 c0       	rjmp	.+114    	; 0x3336 <fdevopen+0x8a>
    32c4:	8b 01       	movw	r16, r22
    32c6:	ec 01       	movw	r28, r24
    32c8:	6e e0       	ldi	r22, 0x0E	; 14
    32ca:	70 e0       	ldi	r23, 0x00	; 0
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	06 d5       	rcall	.+2572   	; 0x3cde <calloc>
    32d2:	fc 01       	movw	r30, r24
    32d4:	89 2b       	or	r24, r25
    32d6:	99 f3       	breq	.-26     	; 0x32be <fdevopen+0x12>
    32d8:	80 e8       	ldi	r24, 0x80	; 128
    32da:	83 83       	std	Z+3, r24	; 0x03
    32dc:	01 15       	cp	r16, r1
    32de:	11 05       	cpc	r17, r1
    32e0:	71 f0       	breq	.+28     	; 0x32fe <fdevopen+0x52>
    32e2:	02 87       	std	Z+10, r16	; 0x0a
    32e4:	13 87       	std	Z+11, r17	; 0x0b
    32e6:	81 e8       	ldi	r24, 0x81	; 129
    32e8:	83 83       	std	Z+3, r24	; 0x03
    32ea:	80 91 02 28 	lds	r24, 0x2802
    32ee:	90 91 03 28 	lds	r25, 0x2803
    32f2:	89 2b       	or	r24, r25
    32f4:	21 f4       	brne	.+8      	; 0x32fe <fdevopen+0x52>
    32f6:	e0 93 02 28 	sts	0x2802, r30
    32fa:	f0 93 03 28 	sts	0x2803, r31
    32fe:	20 97       	sbiw	r28, 0x00	; 0
    3300:	c9 f0       	breq	.+50     	; 0x3334 <fdevopen+0x88>
    3302:	c0 87       	std	Z+8, r28	; 0x08
    3304:	d1 87       	std	Z+9, r29	; 0x09
    3306:	83 81       	ldd	r24, Z+3	; 0x03
    3308:	82 60       	ori	r24, 0x02	; 2
    330a:	83 83       	std	Z+3, r24	; 0x03
    330c:	80 91 04 28 	lds	r24, 0x2804
    3310:	90 91 05 28 	lds	r25, 0x2805
    3314:	89 2b       	or	r24, r25
    3316:	71 f4       	brne	.+28     	; 0x3334 <fdevopen+0x88>
    3318:	e0 93 04 28 	sts	0x2804, r30
    331c:	f0 93 05 28 	sts	0x2805, r31
    3320:	80 91 06 28 	lds	r24, 0x2806
    3324:	90 91 07 28 	lds	r25, 0x2807
    3328:	89 2b       	or	r24, r25
    332a:	21 f4       	brne	.+8      	; 0x3334 <fdevopen+0x88>
    332c:	e0 93 06 28 	sts	0x2806, r30
    3330:	f0 93 07 28 	sts	0x2807, r31
    3334:	cf 01       	movw	r24, r30
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	08 95       	ret

00003340 <printf>:
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	ae 01       	movw	r20, r28
    334a:	4a 5f       	subi	r20, 0xFA	; 250
    334c:	5f 4f       	sbci	r21, 0xFF	; 255
    334e:	fa 01       	movw	r30, r20
    3350:	61 91       	ld	r22, Z+
    3352:	71 91       	ld	r23, Z+
    3354:	af 01       	movw	r20, r30
    3356:	80 91 04 28 	lds	r24, 0x2804
    335a:	90 91 05 28 	lds	r25, 0x2805
    335e:	16 d0       	rcall	.+44     	; 0x338c <vfprintf>
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret

00003366 <scanf>:
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	ae 01       	movw	r20, r28
    3370:	4a 5f       	subi	r20, 0xFA	; 250
    3372:	5f 4f       	sbci	r21, 0xFF	; 255
    3374:	fa 01       	movw	r30, r20
    3376:	61 91       	ld	r22, Z+
    3378:	71 91       	ld	r23, Z+
    337a:	af 01       	movw	r20, r30
    337c:	80 91 02 28 	lds	r24, 0x2802
    3380:	90 91 03 28 	lds	r25, 0x2803
    3384:	8c d3       	rcall	.+1816   	; 0x3a9e <vfscanf>
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	08 95       	ret

0000338c <vfprintf>:
    338c:	2f 92       	push	r2
    338e:	3f 92       	push	r3
    3390:	4f 92       	push	r4
    3392:	5f 92       	push	r5
    3394:	6f 92       	push	r6
    3396:	7f 92       	push	r7
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	2c 97       	sbiw	r28, 0x0c	; 12
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	7c 01       	movw	r14, r24
    33bc:	6b 01       	movw	r12, r22
    33be:	8a 01       	movw	r16, r20
    33c0:	fc 01       	movw	r30, r24
    33c2:	16 82       	std	Z+6, r1	; 0x06
    33c4:	17 82       	std	Z+7, r1	; 0x07
    33c6:	83 81       	ldd	r24, Z+3	; 0x03
    33c8:	81 ff       	sbrs	r24, 1
    33ca:	b0 c1       	rjmp	.+864    	; 0x372c <vfprintf+0x3a0>
    33cc:	ce 01       	movw	r24, r28
    33ce:	01 96       	adiw	r24, 0x01	; 1
    33d0:	4c 01       	movw	r8, r24
    33d2:	f7 01       	movw	r30, r14
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	f6 01       	movw	r30, r12
    33d8:	93 fd       	sbrc	r25, 3
    33da:	85 91       	lpm	r24, Z+
    33dc:	93 ff       	sbrs	r25, 3
    33de:	81 91       	ld	r24, Z+
    33e0:	6f 01       	movw	r12, r30
    33e2:	88 23       	and	r24, r24
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <vfprintf+0x5c>
    33e6:	9e c1       	rjmp	.+828    	; 0x3724 <vfprintf+0x398>
    33e8:	85 32       	cpi	r24, 0x25	; 37
    33ea:	39 f4       	brne	.+14     	; 0x33fa <vfprintf+0x6e>
    33ec:	93 fd       	sbrc	r25, 3
    33ee:	85 91       	lpm	r24, Z+
    33f0:	93 ff       	sbrs	r25, 3
    33f2:	81 91       	ld	r24, Z+
    33f4:	6f 01       	movw	r12, r30
    33f6:	85 32       	cpi	r24, 0x25	; 37
    33f8:	21 f4       	brne	.+8      	; 0x3402 <vfprintf+0x76>
    33fa:	b7 01       	movw	r22, r14
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	24 d6       	rcall	.+3144   	; 0x4048 <fputc>
    3400:	e8 cf       	rjmp	.-48     	; 0x33d2 <vfprintf+0x46>
    3402:	51 2c       	mov	r5, r1
    3404:	31 2c       	mov	r3, r1
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	20 32       	cpi	r18, 0x20	; 32
    340a:	a0 f4       	brcc	.+40     	; 0x3434 <vfprintf+0xa8>
    340c:	8b 32       	cpi	r24, 0x2B	; 43
    340e:	69 f0       	breq	.+26     	; 0x342a <vfprintf+0x9e>
    3410:	30 f4       	brcc	.+12     	; 0x341e <vfprintf+0x92>
    3412:	80 32       	cpi	r24, 0x20	; 32
    3414:	59 f0       	breq	.+22     	; 0x342c <vfprintf+0xa0>
    3416:	83 32       	cpi	r24, 0x23	; 35
    3418:	69 f4       	brne	.+26     	; 0x3434 <vfprintf+0xa8>
    341a:	20 61       	ori	r18, 0x10	; 16
    341c:	2c c0       	rjmp	.+88     	; 0x3476 <vfprintf+0xea>
    341e:	8d 32       	cpi	r24, 0x2D	; 45
    3420:	39 f0       	breq	.+14     	; 0x3430 <vfprintf+0xa4>
    3422:	80 33       	cpi	r24, 0x30	; 48
    3424:	39 f4       	brne	.+14     	; 0x3434 <vfprintf+0xa8>
    3426:	21 60       	ori	r18, 0x01	; 1
    3428:	26 c0       	rjmp	.+76     	; 0x3476 <vfprintf+0xea>
    342a:	22 60       	ori	r18, 0x02	; 2
    342c:	24 60       	ori	r18, 0x04	; 4
    342e:	23 c0       	rjmp	.+70     	; 0x3476 <vfprintf+0xea>
    3430:	28 60       	ori	r18, 0x08	; 8
    3432:	21 c0       	rjmp	.+66     	; 0x3476 <vfprintf+0xea>
    3434:	27 fd       	sbrc	r18, 7
    3436:	27 c0       	rjmp	.+78     	; 0x3486 <vfprintf+0xfa>
    3438:	30 ed       	ldi	r19, 0xD0	; 208
    343a:	38 0f       	add	r19, r24
    343c:	3a 30       	cpi	r19, 0x0A	; 10
    343e:	78 f4       	brcc	.+30     	; 0x345e <vfprintf+0xd2>
    3440:	26 ff       	sbrs	r18, 6
    3442:	06 c0       	rjmp	.+12     	; 0x3450 <vfprintf+0xc4>
    3444:	fa e0       	ldi	r31, 0x0A	; 10
    3446:	5f 9e       	mul	r5, r31
    3448:	30 0d       	add	r19, r0
    344a:	11 24       	eor	r1, r1
    344c:	53 2e       	mov	r5, r19
    344e:	13 c0       	rjmp	.+38     	; 0x3476 <vfprintf+0xea>
    3450:	8a e0       	ldi	r24, 0x0A	; 10
    3452:	38 9e       	mul	r3, r24
    3454:	30 0d       	add	r19, r0
    3456:	11 24       	eor	r1, r1
    3458:	33 2e       	mov	r3, r19
    345a:	20 62       	ori	r18, 0x20	; 32
    345c:	0c c0       	rjmp	.+24     	; 0x3476 <vfprintf+0xea>
    345e:	8e 32       	cpi	r24, 0x2E	; 46
    3460:	21 f4       	brne	.+8      	; 0x346a <vfprintf+0xde>
    3462:	26 fd       	sbrc	r18, 6
    3464:	5f c1       	rjmp	.+702    	; 0x3724 <vfprintf+0x398>
    3466:	20 64       	ori	r18, 0x40	; 64
    3468:	06 c0       	rjmp	.+12     	; 0x3476 <vfprintf+0xea>
    346a:	8c 36       	cpi	r24, 0x6C	; 108
    346c:	11 f4       	brne	.+4      	; 0x3472 <vfprintf+0xe6>
    346e:	20 68       	ori	r18, 0x80	; 128
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <vfprintf+0xea>
    3472:	88 36       	cpi	r24, 0x68	; 104
    3474:	41 f4       	brne	.+16     	; 0x3486 <vfprintf+0xfa>
    3476:	f6 01       	movw	r30, r12
    3478:	93 fd       	sbrc	r25, 3
    347a:	85 91       	lpm	r24, Z+
    347c:	93 ff       	sbrs	r25, 3
    347e:	81 91       	ld	r24, Z+
    3480:	6f 01       	movw	r12, r30
    3482:	81 11       	cpse	r24, r1
    3484:	c1 cf       	rjmp	.-126    	; 0x3408 <vfprintf+0x7c>
    3486:	98 2f       	mov	r25, r24
    3488:	9f 7d       	andi	r25, 0xDF	; 223
    348a:	95 54       	subi	r25, 0x45	; 69
    348c:	93 30       	cpi	r25, 0x03	; 3
    348e:	28 f4       	brcc	.+10     	; 0x349a <vfprintf+0x10e>
    3490:	0c 5f       	subi	r16, 0xFC	; 252
    3492:	1f 4f       	sbci	r17, 0xFF	; 255
    3494:	ff e3       	ldi	r31, 0x3F	; 63
    3496:	f9 83       	std	Y+1, r31	; 0x01
    3498:	0d c0       	rjmp	.+26     	; 0x34b4 <vfprintf+0x128>
    349a:	83 36       	cpi	r24, 0x63	; 99
    349c:	31 f0       	breq	.+12     	; 0x34aa <vfprintf+0x11e>
    349e:	83 37       	cpi	r24, 0x73	; 115
    34a0:	71 f0       	breq	.+28     	; 0x34be <vfprintf+0x132>
    34a2:	83 35       	cpi	r24, 0x53	; 83
    34a4:	09 f0       	breq	.+2      	; 0x34a8 <vfprintf+0x11c>
    34a6:	57 c0       	rjmp	.+174    	; 0x3556 <vfprintf+0x1ca>
    34a8:	21 c0       	rjmp	.+66     	; 0x34ec <vfprintf+0x160>
    34aa:	f8 01       	movw	r30, r16
    34ac:	80 81       	ld	r24, Z
    34ae:	89 83       	std	Y+1, r24	; 0x01
    34b0:	0e 5f       	subi	r16, 0xFE	; 254
    34b2:	1f 4f       	sbci	r17, 0xFF	; 255
    34b4:	44 24       	eor	r4, r4
    34b6:	43 94       	inc	r4
    34b8:	51 2c       	mov	r5, r1
    34ba:	54 01       	movw	r10, r8
    34bc:	14 c0       	rjmp	.+40     	; 0x34e6 <vfprintf+0x15a>
    34be:	38 01       	movw	r6, r16
    34c0:	f2 e0       	ldi	r31, 0x02	; 2
    34c2:	6f 0e       	add	r6, r31
    34c4:	71 1c       	adc	r7, r1
    34c6:	f8 01       	movw	r30, r16
    34c8:	a0 80       	ld	r10, Z
    34ca:	b1 80       	ldd	r11, Z+1	; 0x01
    34cc:	26 ff       	sbrs	r18, 6
    34ce:	03 c0       	rjmp	.+6      	; 0x34d6 <vfprintf+0x14a>
    34d0:	65 2d       	mov	r22, r5
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <vfprintf+0x14e>
    34d6:	6f ef       	ldi	r22, 0xFF	; 255
    34d8:	7f ef       	ldi	r23, 0xFF	; 255
    34da:	c5 01       	movw	r24, r10
    34dc:	2c 87       	std	Y+12, r18	; 0x0c
    34de:	6b d5       	rcall	.+2774   	; 0x3fb6 <strnlen>
    34e0:	2c 01       	movw	r4, r24
    34e2:	83 01       	movw	r16, r6
    34e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    34e6:	2f 77       	andi	r18, 0x7F	; 127
    34e8:	22 2e       	mov	r2, r18
    34ea:	16 c0       	rjmp	.+44     	; 0x3518 <vfprintf+0x18c>
    34ec:	38 01       	movw	r6, r16
    34ee:	f2 e0       	ldi	r31, 0x02	; 2
    34f0:	6f 0e       	add	r6, r31
    34f2:	71 1c       	adc	r7, r1
    34f4:	f8 01       	movw	r30, r16
    34f6:	a0 80       	ld	r10, Z
    34f8:	b1 80       	ldd	r11, Z+1	; 0x01
    34fa:	26 ff       	sbrs	r18, 6
    34fc:	03 c0       	rjmp	.+6      	; 0x3504 <vfprintf+0x178>
    34fe:	65 2d       	mov	r22, r5
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <vfprintf+0x17c>
    3504:	6f ef       	ldi	r22, 0xFF	; 255
    3506:	7f ef       	ldi	r23, 0xFF	; 255
    3508:	c5 01       	movw	r24, r10
    350a:	2c 87       	std	Y+12, r18	; 0x0c
    350c:	42 d5       	rcall	.+2692   	; 0x3f92 <strnlen_P>
    350e:	2c 01       	movw	r4, r24
    3510:	2c 85       	ldd	r18, Y+12	; 0x0c
    3512:	20 68       	ori	r18, 0x80	; 128
    3514:	22 2e       	mov	r2, r18
    3516:	83 01       	movw	r16, r6
    3518:	23 fc       	sbrc	r2, 3
    351a:	19 c0       	rjmp	.+50     	; 0x354e <vfprintf+0x1c2>
    351c:	83 2d       	mov	r24, r3
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	48 16       	cp	r4, r24
    3522:	59 06       	cpc	r5, r25
    3524:	a0 f4       	brcc	.+40     	; 0x354e <vfprintf+0x1c2>
    3526:	b7 01       	movw	r22, r14
    3528:	80 e2       	ldi	r24, 0x20	; 32
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	8d d5       	rcall	.+2842   	; 0x4048 <fputc>
    352e:	3a 94       	dec	r3
    3530:	f5 cf       	rjmp	.-22     	; 0x351c <vfprintf+0x190>
    3532:	f5 01       	movw	r30, r10
    3534:	27 fc       	sbrc	r2, 7
    3536:	85 91       	lpm	r24, Z+
    3538:	27 fe       	sbrs	r2, 7
    353a:	81 91       	ld	r24, Z+
    353c:	5f 01       	movw	r10, r30
    353e:	b7 01       	movw	r22, r14
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	82 d5       	rcall	.+2820   	; 0x4048 <fputc>
    3544:	31 10       	cpse	r3, r1
    3546:	3a 94       	dec	r3
    3548:	f1 e0       	ldi	r31, 0x01	; 1
    354a:	4f 1a       	sub	r4, r31
    354c:	51 08       	sbc	r5, r1
    354e:	41 14       	cp	r4, r1
    3550:	51 04       	cpc	r5, r1
    3552:	79 f7       	brne	.-34     	; 0x3532 <vfprintf+0x1a6>
    3554:	de c0       	rjmp	.+444    	; 0x3712 <vfprintf+0x386>
    3556:	84 36       	cpi	r24, 0x64	; 100
    3558:	11 f0       	breq	.+4      	; 0x355e <vfprintf+0x1d2>
    355a:	89 36       	cpi	r24, 0x69	; 105
    355c:	31 f5       	brne	.+76     	; 0x35aa <vfprintf+0x21e>
    355e:	f8 01       	movw	r30, r16
    3560:	27 ff       	sbrs	r18, 7
    3562:	07 c0       	rjmp	.+14     	; 0x3572 <vfprintf+0x1e6>
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	0c 5f       	subi	r16, 0xFC	; 252
    356e:	1f 4f       	sbci	r17, 0xFF	; 255
    3570:	08 c0       	rjmp	.+16     	; 0x3582 <vfprintf+0x1f6>
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	07 2e       	mov	r0, r23
    3578:	00 0c       	add	r0, r0
    357a:	88 0b       	sbc	r24, r24
    357c:	99 0b       	sbc	r25, r25
    357e:	0e 5f       	subi	r16, 0xFE	; 254
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	2f 76       	andi	r18, 0x6F	; 111
    3584:	72 2e       	mov	r7, r18
    3586:	97 ff       	sbrs	r25, 7
    3588:	09 c0       	rjmp	.+18     	; 0x359c <vfprintf+0x210>
    358a:	90 95       	com	r25
    358c:	80 95       	com	r24
    358e:	70 95       	com	r23
    3590:	61 95       	neg	r22
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	8f 4f       	sbci	r24, 0xFF	; 255
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	20 68       	ori	r18, 0x80	; 128
    359a:	72 2e       	mov	r7, r18
    359c:	2a e0       	ldi	r18, 0x0A	; 10
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	a4 01       	movw	r20, r8
    35a2:	a3 d5       	rcall	.+2886   	; 0x40ea <__ultoa_invert>
    35a4:	a8 2e       	mov	r10, r24
    35a6:	a8 18       	sub	r10, r8
    35a8:	43 c0       	rjmp	.+134    	; 0x3630 <vfprintf+0x2a4>
    35aa:	85 37       	cpi	r24, 0x75	; 117
    35ac:	29 f4       	brne	.+10     	; 0x35b8 <vfprintf+0x22c>
    35ae:	2f 7e       	andi	r18, 0xEF	; 239
    35b0:	b2 2e       	mov	r11, r18
    35b2:	2a e0       	ldi	r18, 0x0A	; 10
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	25 c0       	rjmp	.+74     	; 0x3602 <vfprintf+0x276>
    35b8:	f2 2f       	mov	r31, r18
    35ba:	f9 7f       	andi	r31, 0xF9	; 249
    35bc:	bf 2e       	mov	r11, r31
    35be:	8f 36       	cpi	r24, 0x6F	; 111
    35c0:	c1 f0       	breq	.+48     	; 0x35f2 <vfprintf+0x266>
    35c2:	18 f4       	brcc	.+6      	; 0x35ca <vfprintf+0x23e>
    35c4:	88 35       	cpi	r24, 0x58	; 88
    35c6:	79 f0       	breq	.+30     	; 0x35e6 <vfprintf+0x25a>
    35c8:	ad c0       	rjmp	.+346    	; 0x3724 <vfprintf+0x398>
    35ca:	80 37       	cpi	r24, 0x70	; 112
    35cc:	19 f0       	breq	.+6      	; 0x35d4 <vfprintf+0x248>
    35ce:	88 37       	cpi	r24, 0x78	; 120
    35d0:	21 f0       	breq	.+8      	; 0x35da <vfprintf+0x24e>
    35d2:	a8 c0       	rjmp	.+336    	; 0x3724 <vfprintf+0x398>
    35d4:	2f 2f       	mov	r18, r31
    35d6:	20 61       	ori	r18, 0x10	; 16
    35d8:	b2 2e       	mov	r11, r18
    35da:	b4 fe       	sbrs	r11, 4
    35dc:	0d c0       	rjmp	.+26     	; 0x35f8 <vfprintf+0x26c>
    35de:	8b 2d       	mov	r24, r11
    35e0:	84 60       	ori	r24, 0x04	; 4
    35e2:	b8 2e       	mov	r11, r24
    35e4:	09 c0       	rjmp	.+18     	; 0x35f8 <vfprintf+0x26c>
    35e6:	24 ff       	sbrs	r18, 4
    35e8:	0a c0       	rjmp	.+20     	; 0x35fe <vfprintf+0x272>
    35ea:	9f 2f       	mov	r25, r31
    35ec:	96 60       	ori	r25, 0x06	; 6
    35ee:	b9 2e       	mov	r11, r25
    35f0:	06 c0       	rjmp	.+12     	; 0x35fe <vfprintf+0x272>
    35f2:	28 e0       	ldi	r18, 0x08	; 8
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	05 c0       	rjmp	.+10     	; 0x3602 <vfprintf+0x276>
    35f8:	20 e1       	ldi	r18, 0x10	; 16
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	02 c0       	rjmp	.+4      	; 0x3602 <vfprintf+0x276>
    35fe:	20 e1       	ldi	r18, 0x10	; 16
    3600:	32 e0       	ldi	r19, 0x02	; 2
    3602:	f8 01       	movw	r30, r16
    3604:	b7 fe       	sbrs	r11, 7
    3606:	07 c0       	rjmp	.+14     	; 0x3616 <vfprintf+0x28a>
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	0c 5f       	subi	r16, 0xFC	; 252
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	06 c0       	rjmp	.+12     	; 0x3622 <vfprintf+0x296>
    3616:	60 81       	ld	r22, Z
    3618:	71 81       	ldd	r23, Z+1	; 0x01
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	0e 5f       	subi	r16, 0xFE	; 254
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	a4 01       	movw	r20, r8
    3624:	62 d5       	rcall	.+2756   	; 0x40ea <__ultoa_invert>
    3626:	a8 2e       	mov	r10, r24
    3628:	a8 18       	sub	r10, r8
    362a:	fb 2d       	mov	r31, r11
    362c:	ff 77       	andi	r31, 0x7F	; 127
    362e:	7f 2e       	mov	r7, r31
    3630:	76 fe       	sbrs	r7, 6
    3632:	0b c0       	rjmp	.+22     	; 0x364a <vfprintf+0x2be>
    3634:	37 2d       	mov	r19, r7
    3636:	3e 7f       	andi	r19, 0xFE	; 254
    3638:	a5 14       	cp	r10, r5
    363a:	50 f4       	brcc	.+20     	; 0x3650 <vfprintf+0x2c4>
    363c:	74 fe       	sbrs	r7, 4
    363e:	0a c0       	rjmp	.+20     	; 0x3654 <vfprintf+0x2c8>
    3640:	72 fc       	sbrc	r7, 2
    3642:	08 c0       	rjmp	.+16     	; 0x3654 <vfprintf+0x2c8>
    3644:	37 2d       	mov	r19, r7
    3646:	3e 7e       	andi	r19, 0xEE	; 238
    3648:	05 c0       	rjmp	.+10     	; 0x3654 <vfprintf+0x2c8>
    364a:	ba 2c       	mov	r11, r10
    364c:	37 2d       	mov	r19, r7
    364e:	03 c0       	rjmp	.+6      	; 0x3656 <vfprintf+0x2ca>
    3650:	ba 2c       	mov	r11, r10
    3652:	01 c0       	rjmp	.+2      	; 0x3656 <vfprintf+0x2ca>
    3654:	b5 2c       	mov	r11, r5
    3656:	34 ff       	sbrs	r19, 4
    3658:	0d c0       	rjmp	.+26     	; 0x3674 <vfprintf+0x2e8>
    365a:	fe 01       	movw	r30, r28
    365c:	ea 0d       	add	r30, r10
    365e:	f1 1d       	adc	r31, r1
    3660:	80 81       	ld	r24, Z
    3662:	80 33       	cpi	r24, 0x30	; 48
    3664:	11 f4       	brne	.+4      	; 0x366a <vfprintf+0x2de>
    3666:	39 7e       	andi	r19, 0xE9	; 233
    3668:	09 c0       	rjmp	.+18     	; 0x367c <vfprintf+0x2f0>
    366a:	32 ff       	sbrs	r19, 2
    366c:	06 c0       	rjmp	.+12     	; 0x367a <vfprintf+0x2ee>
    366e:	b3 94       	inc	r11
    3670:	b3 94       	inc	r11
    3672:	04 c0       	rjmp	.+8      	; 0x367c <vfprintf+0x2f0>
    3674:	83 2f       	mov	r24, r19
    3676:	86 78       	andi	r24, 0x86	; 134
    3678:	09 f0       	breq	.+2      	; 0x367c <vfprintf+0x2f0>
    367a:	b3 94       	inc	r11
    367c:	33 fd       	sbrc	r19, 3
    367e:	12 c0       	rjmp	.+36     	; 0x36a4 <vfprintf+0x318>
    3680:	30 ff       	sbrs	r19, 0
    3682:	06 c0       	rjmp	.+12     	; 0x3690 <vfprintf+0x304>
    3684:	5a 2c       	mov	r5, r10
    3686:	b3 14       	cp	r11, r3
    3688:	18 f4       	brcc	.+6      	; 0x3690 <vfprintf+0x304>
    368a:	53 0c       	add	r5, r3
    368c:	5b 18       	sub	r5, r11
    368e:	b3 2c       	mov	r11, r3
    3690:	b3 14       	cp	r11, r3
    3692:	60 f4       	brcc	.+24     	; 0x36ac <vfprintf+0x320>
    3694:	b7 01       	movw	r22, r14
    3696:	80 e2       	ldi	r24, 0x20	; 32
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	3c 87       	std	Y+12, r19	; 0x0c
    369c:	d5 d4       	rcall	.+2474   	; 0x4048 <fputc>
    369e:	b3 94       	inc	r11
    36a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    36a2:	f6 cf       	rjmp	.-20     	; 0x3690 <vfprintf+0x304>
    36a4:	b3 14       	cp	r11, r3
    36a6:	10 f4       	brcc	.+4      	; 0x36ac <vfprintf+0x320>
    36a8:	3b 18       	sub	r3, r11
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <vfprintf+0x322>
    36ac:	31 2c       	mov	r3, r1
    36ae:	34 ff       	sbrs	r19, 4
    36b0:	11 c0       	rjmp	.+34     	; 0x36d4 <vfprintf+0x348>
    36b2:	b7 01       	movw	r22, r14
    36b4:	80 e3       	ldi	r24, 0x30	; 48
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	3c 87       	std	Y+12, r19	; 0x0c
    36ba:	c6 d4       	rcall	.+2444   	; 0x4048 <fputc>
    36bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    36be:	32 ff       	sbrs	r19, 2
    36c0:	16 c0       	rjmp	.+44     	; 0x36ee <vfprintf+0x362>
    36c2:	31 fd       	sbrc	r19, 1
    36c4:	03 c0       	rjmp	.+6      	; 0x36cc <vfprintf+0x340>
    36c6:	88 e7       	ldi	r24, 0x78	; 120
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <vfprintf+0x344>
    36cc:	88 e5       	ldi	r24, 0x58	; 88
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	b7 01       	movw	r22, r14
    36d2:	0c c0       	rjmp	.+24     	; 0x36ec <vfprintf+0x360>
    36d4:	83 2f       	mov	r24, r19
    36d6:	86 78       	andi	r24, 0x86	; 134
    36d8:	51 f0       	breq	.+20     	; 0x36ee <vfprintf+0x362>
    36da:	31 ff       	sbrs	r19, 1
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <vfprintf+0x356>
    36de:	8b e2       	ldi	r24, 0x2B	; 43
    36e0:	01 c0       	rjmp	.+2      	; 0x36e4 <vfprintf+0x358>
    36e2:	80 e2       	ldi	r24, 0x20	; 32
    36e4:	37 fd       	sbrc	r19, 7
    36e6:	8d e2       	ldi	r24, 0x2D	; 45
    36e8:	b7 01       	movw	r22, r14
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	ad d4       	rcall	.+2394   	; 0x4048 <fputc>
    36ee:	a5 14       	cp	r10, r5
    36f0:	30 f4       	brcc	.+12     	; 0x36fe <vfprintf+0x372>
    36f2:	b7 01       	movw	r22, r14
    36f4:	80 e3       	ldi	r24, 0x30	; 48
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	a7 d4       	rcall	.+2382   	; 0x4048 <fputc>
    36fa:	5a 94       	dec	r5
    36fc:	f8 cf       	rjmp	.-16     	; 0x36ee <vfprintf+0x362>
    36fe:	aa 94       	dec	r10
    3700:	f4 01       	movw	r30, r8
    3702:	ea 0d       	add	r30, r10
    3704:	f1 1d       	adc	r31, r1
    3706:	80 81       	ld	r24, Z
    3708:	b7 01       	movw	r22, r14
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9d d4       	rcall	.+2362   	; 0x4048 <fputc>
    370e:	a1 10       	cpse	r10, r1
    3710:	f6 cf       	rjmp	.-20     	; 0x36fe <vfprintf+0x372>
    3712:	33 20       	and	r3, r3
    3714:	09 f4       	brne	.+2      	; 0x3718 <vfprintf+0x38c>
    3716:	5d ce       	rjmp	.-838    	; 0x33d2 <vfprintf+0x46>
    3718:	b7 01       	movw	r22, r14
    371a:	80 e2       	ldi	r24, 0x20	; 32
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	94 d4       	rcall	.+2344   	; 0x4048 <fputc>
    3720:	3a 94       	dec	r3
    3722:	f7 cf       	rjmp	.-18     	; 0x3712 <vfprintf+0x386>
    3724:	f7 01       	movw	r30, r14
    3726:	86 81       	ldd	r24, Z+6	; 0x06
    3728:	97 81       	ldd	r25, Z+7	; 0x07
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <vfprintf+0x3a4>
    372c:	8f ef       	ldi	r24, 0xFF	; 255
    372e:	9f ef       	ldi	r25, 0xFF	; 255
    3730:	2c 96       	adiw	r28, 0x0c	; 12
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	ff 90       	pop	r15
    3740:	ef 90       	pop	r14
    3742:	df 90       	pop	r13
    3744:	cf 90       	pop	r12
    3746:	bf 90       	pop	r11
    3748:	af 90       	pop	r10
    374a:	9f 90       	pop	r9
    374c:	8f 90       	pop	r8
    374e:	7f 90       	pop	r7
    3750:	6f 90       	pop	r6
    3752:	5f 90       	pop	r5
    3754:	4f 90       	pop	r4
    3756:	3f 90       	pop	r3
    3758:	2f 90       	pop	r2
    375a:	08 95       	ret

0000375c <putval>:
    375c:	20 fd       	sbrc	r18, 0
    375e:	09 c0       	rjmp	.+18     	; 0x3772 <putval+0x16>
    3760:	fc 01       	movw	r30, r24
    3762:	23 fd       	sbrc	r18, 3
    3764:	05 c0       	rjmp	.+10     	; 0x3770 <putval+0x14>
    3766:	22 ff       	sbrs	r18, 2
    3768:	02 c0       	rjmp	.+4      	; 0x376e <putval+0x12>
    376a:	73 83       	std	Z+3, r23	; 0x03
    376c:	62 83       	std	Z+2, r22	; 0x02
    376e:	51 83       	std	Z+1, r21	; 0x01
    3770:	40 83       	st	Z, r20
    3772:	08 95       	ret

00003774 <mulacc>:
    3774:	44 fd       	sbrc	r20, 4
    3776:	10 c0       	rjmp	.+32     	; 0x3798 <mulacc+0x24>
    3778:	46 fd       	sbrc	r20, 6
    377a:	10 c0       	rjmp	.+32     	; 0x379c <mulacc+0x28>
    377c:	db 01       	movw	r26, r22
    377e:	fc 01       	movw	r30, r24
    3780:	aa 0f       	add	r26, r26
    3782:	bb 1f       	adc	r27, r27
    3784:	ee 1f       	adc	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	10 94       	com	r1
    378a:	d1 f7       	brne	.-12     	; 0x3780 <mulacc+0xc>
    378c:	6a 0f       	add	r22, r26
    378e:	7b 1f       	adc	r23, r27
    3790:	8e 1f       	adc	r24, r30
    3792:	9f 1f       	adc	r25, r31
    3794:	31 e0       	ldi	r19, 0x01	; 1
    3796:	03 c0       	rjmp	.+6      	; 0x379e <mulacc+0x2a>
    3798:	33 e0       	ldi	r19, 0x03	; 3
    379a:	01 c0       	rjmp	.+2      	; 0x379e <mulacc+0x2a>
    379c:	34 e0       	ldi	r19, 0x04	; 4
    379e:	66 0f       	add	r22, r22
    37a0:	77 1f       	adc	r23, r23
    37a2:	88 1f       	adc	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	31 50       	subi	r19, 0x01	; 1
    37a8:	d1 f7       	brne	.-12     	; 0x379e <mulacc+0x2a>
    37aa:	62 0f       	add	r22, r18
    37ac:	71 1d       	adc	r23, r1
    37ae:	81 1d       	adc	r24, r1
    37b0:	91 1d       	adc	r25, r1
    37b2:	08 95       	ret

000037b4 <skip_spaces>:
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	8c 01       	movw	r16, r24
    37be:	c8 01       	movw	r24, r16
    37c0:	05 d4       	rcall	.+2058   	; 0x3fcc <fgetc>
    37c2:	ec 01       	movw	r28, r24
    37c4:	97 fd       	sbrc	r25, 7
    37c6:	06 c0       	rjmp	.+12     	; 0x37d4 <skip_spaces+0x20>
    37c8:	d1 d3       	rcall	.+1954   	; 0x3f6c <isspace>
    37ca:	89 2b       	or	r24, r25
    37cc:	c1 f7       	brne	.-16     	; 0x37be <skip_spaces+0xa>
    37ce:	b8 01       	movw	r22, r16
    37d0:	ce 01       	movw	r24, r28
    37d2:	72 d4       	rcall	.+2276   	; 0x40b8 <ungetc>
    37d4:	ce 01       	movw	r24, r28
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	08 95       	ret

000037e0 <conv_int>:
    37e0:	8f 92       	push	r8
    37e2:	9f 92       	push	r9
    37e4:	af 92       	push	r10
    37e6:	bf 92       	push	r11
    37e8:	cf 92       	push	r12
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	1f 93       	push	r17
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	1f 92       	push	r1
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	8c 01       	movw	r16, r24
    3800:	c6 2e       	mov	r12, r22
    3802:	7a 01       	movw	r14, r20
    3804:	29 83       	std	Y+1, r18	; 0x01
    3806:	e2 d3       	rcall	.+1988   	; 0x3fcc <fgetc>
    3808:	ac 01       	movw	r20, r24
    380a:	55 27       	eor	r21, r21
    380c:	29 81       	ldd	r18, Y+1	; 0x01
    380e:	4b 32       	cpi	r20, 0x2B	; 43
    3810:	51 05       	cpc	r21, r1
    3812:	21 f0       	breq	.+8      	; 0x381c <conv_int+0x3c>
    3814:	4d 32       	cpi	r20, 0x2D	; 45
    3816:	51 05       	cpc	r21, r1
    3818:	61 f4       	brne	.+24     	; 0x3832 <conv_int+0x52>
    381a:	20 68       	ori	r18, 0x80	; 128
    381c:	ca 94       	dec	r12
    381e:	c1 10       	cpse	r12, r1
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <conv_int+0x46>
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	6f c0       	rjmp	.+222    	; 0x3904 <conv_int+0x124>
    3826:	c8 01       	movw	r24, r16
    3828:	29 83       	std	Y+1, r18	; 0x01
    382a:	d0 d3       	rcall	.+1952   	; 0x3fcc <fgetc>
    382c:	29 81       	ldd	r18, Y+1	; 0x01
    382e:	97 fd       	sbrc	r25, 7
    3830:	f8 cf       	rjmp	.-16     	; 0x3822 <conv_int+0x42>
    3832:	32 2f       	mov	r19, r18
    3834:	3d 7f       	andi	r19, 0xFD	; 253
    3836:	d3 2e       	mov	r13, r19
    3838:	32 2f       	mov	r19, r18
    383a:	30 73       	andi	r19, 0x30	; 48
    383c:	39 f5       	brne	.+78     	; 0x388c <conv_int+0xac>
    383e:	80 33       	cpi	r24, 0x30	; 48
    3840:	29 f5       	brne	.+74     	; 0x388c <conv_int+0xac>
    3842:	bb 24       	eor	r11, r11
    3844:	ba 94       	dec	r11
    3846:	bc 0c       	add	r11, r12
    3848:	09 f4       	brne	.+2      	; 0x384c <conv_int+0x6c>
    384a:	49 c0       	rjmp	.+146    	; 0x38de <conv_int+0xfe>
    384c:	c8 01       	movw	r24, r16
    384e:	29 83       	std	Y+1, r18	; 0x01
    3850:	bd d3       	rcall	.+1914   	; 0x3fcc <fgetc>
    3852:	29 81       	ldd	r18, Y+1	; 0x01
    3854:	97 fd       	sbrc	r25, 7
    3856:	43 c0       	rjmp	.+134    	; 0x38de <conv_int+0xfe>
    3858:	38 2f       	mov	r19, r24
    385a:	3f 7d       	andi	r19, 0xDF	; 223
    385c:	38 35       	cpi	r19, 0x58	; 88
    385e:	61 f4       	brne	.+24     	; 0x3878 <conv_int+0x98>
    3860:	8d 2d       	mov	r24, r13
    3862:	82 64       	ori	r24, 0x42	; 66
    3864:	d8 2e       	mov	r13, r24
    3866:	ca 94       	dec	r12
    3868:	ca 94       	dec	r12
    386a:	cc 20       	and	r12, r12
    386c:	c1 f1       	breq	.+112    	; 0x38de <conv_int+0xfe>
    386e:	c8 01       	movw	r24, r16
    3870:	ad d3       	rcall	.+1882   	; 0x3fcc <fgetc>
    3872:	97 ff       	sbrs	r25, 7
    3874:	0b c0       	rjmp	.+22     	; 0x388c <conv_int+0xac>
    3876:	33 c0       	rjmp	.+102    	; 0x38de <conv_int+0xfe>
    3878:	26 ff       	sbrs	r18, 6
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <conv_int+0xa4>
    387c:	2d 2d       	mov	r18, r13
    387e:	22 60       	ori	r18, 0x02	; 2
    3880:	d2 2e       	mov	r13, r18
    3882:	03 c0       	rjmp	.+6      	; 0x388a <conv_int+0xaa>
    3884:	3d 2d       	mov	r19, r13
    3886:	32 61       	ori	r19, 0x12	; 18
    3888:	d3 2e       	mov	r13, r19
    388a:	cb 2c       	mov	r12, r11
    388c:	81 2c       	mov	r8, r1
    388e:	91 2c       	mov	r9, r1
    3890:	54 01       	movw	r10, r8
    3892:	20 ed       	ldi	r18, 0xD0	; 208
    3894:	28 0f       	add	r18, r24
    3896:	28 30       	cpi	r18, 0x08	; 8
    3898:	78 f0       	brcs	.+30     	; 0x38b8 <conv_int+0xd8>
    389a:	d4 fe       	sbrs	r13, 4
    389c:	03 c0       	rjmp	.+6      	; 0x38a4 <conv_int+0xc4>
    389e:	b8 01       	movw	r22, r16
    38a0:	0b d4       	rcall	.+2070   	; 0x40b8 <ungetc>
    38a2:	1a c0       	rjmp	.+52     	; 0x38d8 <conv_int+0xf8>
    38a4:	2a 30       	cpi	r18, 0x0A	; 10
    38a6:	40 f0       	brcs	.+16     	; 0x38b8 <conv_int+0xd8>
    38a8:	d6 fe       	sbrs	r13, 6
    38aa:	f9 cf       	rjmp	.-14     	; 0x389e <conv_int+0xbe>
    38ac:	2f 7d       	andi	r18, 0xDF	; 223
    38ae:	3f ee       	ldi	r19, 0xEF	; 239
    38b0:	32 0f       	add	r19, r18
    38b2:	36 30       	cpi	r19, 0x06	; 6
    38b4:	a0 f7       	brcc	.-24     	; 0x389e <conv_int+0xbe>
    38b6:	27 50       	subi	r18, 0x07	; 7
    38b8:	4d 2d       	mov	r20, r13
    38ba:	c5 01       	movw	r24, r10
    38bc:	b4 01       	movw	r22, r8
    38be:	5a df       	rcall	.-332    	; 0x3774 <mulacc>
    38c0:	4b 01       	movw	r8, r22
    38c2:	5c 01       	movw	r10, r24
    38c4:	8d 2d       	mov	r24, r13
    38c6:	82 60       	ori	r24, 0x02	; 2
    38c8:	d8 2e       	mov	r13, r24
    38ca:	ca 94       	dec	r12
    38cc:	cc 20       	and	r12, r12
    38ce:	51 f0       	breq	.+20     	; 0x38e4 <conv_int+0x104>
    38d0:	c8 01       	movw	r24, r16
    38d2:	7c d3       	rcall	.+1784   	; 0x3fcc <fgetc>
    38d4:	97 ff       	sbrs	r25, 7
    38d6:	dd cf       	rjmp	.-70     	; 0x3892 <conv_int+0xb2>
    38d8:	d1 fc       	sbrc	r13, 1
    38da:	04 c0       	rjmp	.+8      	; 0x38e4 <conv_int+0x104>
    38dc:	a2 cf       	rjmp	.-188    	; 0x3822 <conv_int+0x42>
    38de:	81 2c       	mov	r8, r1
    38e0:	91 2c       	mov	r9, r1
    38e2:	54 01       	movw	r10, r8
    38e4:	d7 fe       	sbrs	r13, 7
    38e6:	08 c0       	rjmp	.+16     	; 0x38f8 <conv_int+0x118>
    38e8:	b0 94       	com	r11
    38ea:	a0 94       	com	r10
    38ec:	90 94       	com	r9
    38ee:	80 94       	com	r8
    38f0:	81 1c       	adc	r8, r1
    38f2:	91 1c       	adc	r9, r1
    38f4:	a1 1c       	adc	r10, r1
    38f6:	b1 1c       	adc	r11, r1
    38f8:	2d 2d       	mov	r18, r13
    38fa:	b5 01       	movw	r22, r10
    38fc:	a4 01       	movw	r20, r8
    38fe:	c7 01       	movw	r24, r14
    3900:	2d df       	rcall	.-422    	; 0x375c <putval>
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	0f 90       	pop	r0
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	bf 90       	pop	r11
    3918:	af 90       	pop	r10
    391a:	9f 90       	pop	r9
    391c:	8f 90       	pop	r8
    391e:	08 95       	ret

00003920 <conv_brk>:
    3920:	6f 92       	push	r6
    3922:	7f 92       	push	r7
    3924:	8f 92       	push	r8
    3926:	9f 92       	push	r9
    3928:	af 92       	push	r10
    392a:	bf 92       	push	r11
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	a1 97       	sbiw	r28, 0x21	; 33
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	5c 01       	movw	r10, r24
    3948:	7a 01       	movw	r14, r20
    394a:	ce 01       	movw	r24, r28
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	6c 01       	movw	r12, r24
    3950:	80 e2       	ldi	r24, 0x20	; 32
    3952:	f6 01       	movw	r30, r12
    3954:	11 92       	st	Z+, r1
    3956:	8a 95       	dec	r24
    3958:	e9 f7       	brne	.-6      	; 0x3954 <conv_brk+0x34>
    395a:	f5 01       	movw	r30, r10
    395c:	83 80       	ldd	r8, Z+3	; 0x03
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	91 2c       	mov	r9, r1
    3964:	71 2c       	mov	r7, r1
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	a1 e0       	ldi	r26, 0x01	; 1
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	f9 01       	movw	r30, r18
    396e:	83 fc       	sbrc	r8, 3
    3970:	85 91       	lpm	r24, Z+
    3972:	83 fe       	sbrs	r8, 3
    3974:	81 91       	ld	r24, Z+
    3976:	8f 01       	movw	r16, r30
    3978:	98 2f       	mov	r25, r24
    397a:	9f 01       	movw	r18, r30
    397c:	81 11       	cpse	r24, r1
    397e:	03 c0       	rjmp	.+6      	; 0x3986 <conv_brk+0x66>
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	7a c0       	rjmp	.+244    	; 0x3a7a <conv_brk+0x15a>
    3986:	8e 35       	cpi	r24, 0x5E	; 94
    3988:	19 f4       	brne	.+6      	; 0x3990 <conv_brk+0x70>
    398a:	41 15       	cp	r20, r1
    398c:	51 05       	cpc	r21, r1
    398e:	49 f1       	breq	.+82     	; 0x39e2 <conv_brk+0xc2>
    3990:	e7 2f       	mov	r30, r23
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	e4 17       	cp	r30, r20
    3996:	f5 07       	cpc	r31, r21
    3998:	3c f4       	brge	.+14     	; 0x39a8 <conv_brk+0x88>
    399a:	8d 35       	cpi	r24, 0x5D	; 93
    399c:	59 f1       	breq	.+86     	; 0x39f4 <conv_brk+0xd4>
    399e:	8d 32       	cpi	r24, 0x2D	; 45
    39a0:	19 f4       	brne	.+6      	; 0x39a8 <conv_brk+0x88>
    39a2:	77 20       	and	r7, r7
    39a4:	01 f1       	breq	.+64     	; 0x39e6 <conv_brk+0xc6>
    39a6:	03 c0       	rjmp	.+6      	; 0x39ae <conv_brk+0x8e>
    39a8:	71 10       	cpse	r7, r1
    39aa:	01 c0       	rjmp	.+2      	; 0x39ae <conv_brk+0x8e>
    39ac:	98 2e       	mov	r9, r24
    39ae:	89 2f       	mov	r24, r25
    39b0:	86 95       	lsr	r24
    39b2:	86 95       	lsr	r24
    39b4:	86 95       	lsr	r24
    39b6:	86 01       	movw	r16, r12
    39b8:	08 0f       	add	r16, r24
    39ba:	11 1d       	adc	r17, r1
    39bc:	89 2f       	mov	r24, r25
    39be:	87 70       	andi	r24, 0x07	; 7
    39c0:	3d 01       	movw	r6, r26
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <conv_brk+0xa6>
    39c4:	66 0c       	add	r6, r6
    39c6:	8a 95       	dec	r24
    39c8:	ea f7       	brpl	.-6      	; 0x39c4 <conv_brk+0xa4>
    39ca:	f8 01       	movw	r30, r16
    39cc:	80 81       	ld	r24, Z
    39ce:	86 29       	or	r24, r6
    39d0:	80 83       	st	Z, r24
    39d2:	99 15       	cp	r25, r9
    39d4:	59 f0       	breq	.+22     	; 0x39ec <conv_brk+0xcc>
    39d6:	99 15       	cp	r25, r9
    39d8:	10 f4       	brcc	.+4      	; 0x39de <conv_brk+0xbe>
    39da:	9f 5f       	subi	r25, 0xFF	; 255
    39dc:	e8 cf       	rjmp	.-48     	; 0x39ae <conv_brk+0x8e>
    39de:	91 50       	subi	r25, 0x01	; 1
    39e0:	e6 cf       	rjmp	.-52     	; 0x39ae <conv_brk+0x8e>
    39e2:	71 e0       	ldi	r23, 0x01	; 1
    39e4:	04 c0       	rjmp	.+8      	; 0x39ee <conv_brk+0xce>
    39e6:	77 24       	eor	r7, r7
    39e8:	73 94       	inc	r7
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <conv_brk+0xce>
    39ec:	71 2c       	mov	r7, r1
    39ee:	4f 5f       	subi	r20, 0xFF	; 255
    39f0:	5f 4f       	sbci	r21, 0xFF	; 255
    39f2:	bc cf       	rjmp	.-136    	; 0x396c <conv_brk+0x4c>
    39f4:	77 20       	and	r7, r7
    39f6:	19 f0       	breq	.+6      	; 0x39fe <conv_brk+0xde>
    39f8:	8e 81       	ldd	r24, Y+6	; 0x06
    39fa:	80 62       	ori	r24, 0x20	; 32
    39fc:	8e 83       	std	Y+6, r24	; 0x06
    39fe:	71 11       	cpse	r23, r1
    3a00:	03 c0       	rjmp	.+6      	; 0x3a08 <conv_brk+0xe8>
    3a02:	99 24       	eor	r9, r9
    3a04:	93 94       	inc	r9
    3a06:	16 c0       	rjmp	.+44     	; 0x3a34 <conv_brk+0x114>
    3a08:	f6 01       	movw	r30, r12
    3a0a:	9e 01       	movw	r18, r28
    3a0c:	2f 5d       	subi	r18, 0xDF	; 223
    3a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	80 95       	com	r24
    3a14:	81 93       	st	Z+, r24
    3a16:	e2 17       	cp	r30, r18
    3a18:	f3 07       	cpc	r31, r19
    3a1a:	d1 f7       	brne	.-12     	; 0x3a10 <conv_brk+0xf0>
    3a1c:	f2 cf       	rjmp	.-28     	; 0x3a02 <conv_brk+0xe2>
    3a1e:	e1 14       	cp	r14, r1
    3a20:	f1 04       	cpc	r15, r1
    3a22:	29 f0       	breq	.+10     	; 0x3a2e <conv_brk+0x10e>
    3a24:	f7 01       	movw	r30, r14
    3a26:	80 83       	st	Z, r24
    3a28:	c7 01       	movw	r24, r14
    3a2a:	01 96       	adiw	r24, 0x01	; 1
    3a2c:	7c 01       	movw	r14, r24
    3a2e:	61 50       	subi	r22, 0x01	; 1
    3a30:	91 2c       	mov	r9, r1
    3a32:	e9 f0       	breq	.+58     	; 0x3a6e <conv_brk+0x14e>
    3a34:	c5 01       	movw	r24, r10
    3a36:	69 a3       	std	Y+33, r22	; 0x21
    3a38:	c9 d2       	rcall	.+1426   	; 0x3fcc <fgetc>
    3a3a:	69 a1       	ldd	r22, Y+33	; 0x21
    3a3c:	97 fd       	sbrc	r25, 7
    3a3e:	15 c0       	rjmp	.+42     	; 0x3a6a <conv_brk+0x14a>
    3a40:	28 2f       	mov	r18, r24
    3a42:	26 95       	lsr	r18
    3a44:	26 95       	lsr	r18
    3a46:	26 95       	lsr	r18
    3a48:	f6 01       	movw	r30, r12
    3a4a:	e2 0f       	add	r30, r18
    3a4c:	f1 1d       	adc	r31, r1
    3a4e:	20 81       	ld	r18, Z
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	ac 01       	movw	r20, r24
    3a54:	47 70       	andi	r20, 0x07	; 7
    3a56:	55 27       	eor	r21, r21
    3a58:	02 c0       	rjmp	.+4      	; 0x3a5e <conv_brk+0x13e>
    3a5a:	35 95       	asr	r19
    3a5c:	27 95       	ror	r18
    3a5e:	4a 95       	dec	r20
    3a60:	e2 f7       	brpl	.-8      	; 0x3a5a <conv_brk+0x13a>
    3a62:	20 fd       	sbrc	r18, 0
    3a64:	dc cf       	rjmp	.-72     	; 0x3a1e <conv_brk+0xfe>
    3a66:	b5 01       	movw	r22, r10
    3a68:	27 d3       	rcall	.+1614   	; 0x40b8 <ungetc>
    3a6a:	91 10       	cpse	r9, r1
    3a6c:	89 cf       	rjmp	.-238    	; 0x3980 <conv_brk+0x60>
    3a6e:	e1 14       	cp	r14, r1
    3a70:	f1 04       	cpc	r15, r1
    3a72:	11 f0       	breq	.+4      	; 0x3a78 <conv_brk+0x158>
    3a74:	f7 01       	movw	r30, r14
    3a76:	10 82       	st	Z, r1
    3a78:	c8 01       	movw	r24, r16
    3a7a:	a1 96       	adiw	r28, 0x21	; 33
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	cf 90       	pop	r12
    3a90:	bf 90       	pop	r11
    3a92:	af 90       	pop	r10
    3a94:	9f 90       	pop	r9
    3a96:	8f 90       	pop	r8
    3a98:	7f 90       	pop	r7
    3a9a:	6f 90       	pop	r6
    3a9c:	08 95       	ret

00003a9e <vfscanf>:
    3a9e:	4f 92       	push	r4
    3aa0:	5f 92       	push	r5
    3aa2:	7f 92       	push	r7
    3aa4:	8f 92       	push	r8
    3aa6:	9f 92       	push	r9
    3aa8:	af 92       	push	r10
    3aaa:	bf 92       	push	r11
    3aac:	cf 92       	push	r12
    3aae:	df 92       	push	r13
    3ab0:	ef 92       	push	r14
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	1f 92       	push	r1
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	6c 01       	movw	r12, r24
    3ac4:	2b 01       	movw	r4, r22
    3ac6:	5a 01       	movw	r10, r20
    3ac8:	fc 01       	movw	r30, r24
    3aca:	16 82       	std	Z+6, r1	; 0x06
    3acc:	17 82       	std	Z+7, r1	; 0x07
    3ace:	71 2c       	mov	r7, r1
    3ad0:	f6 01       	movw	r30, r12
    3ad2:	f3 80       	ldd	r15, Z+3	; 0x03
    3ad4:	f2 01       	movw	r30, r4
    3ad6:	f3 fc       	sbrc	r15, 3
    3ad8:	85 91       	lpm	r24, Z+
    3ada:	f3 fe       	sbrs	r15, 3
    3adc:	81 91       	ld	r24, Z+
    3ade:	38 2f       	mov	r19, r24
    3ae0:	2f 01       	movw	r4, r30
    3ae2:	88 23       	and	r24, r24
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <vfscanf+0x4a>
    3ae6:	e5 c0       	rjmp	.+458    	; 0x3cb2 <vfscanf+0x214>
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	39 83       	std	Y+1, r19	; 0x01
    3aec:	3f d2       	rcall	.+1150   	; 0x3f6c <isspace>
    3aee:	39 81       	ldd	r19, Y+1	; 0x01
    3af0:	89 2b       	or	r24, r25
    3af2:	19 f0       	breq	.+6      	; 0x3afa <vfscanf+0x5c>
    3af4:	c6 01       	movw	r24, r12
    3af6:	5e de       	rcall	.-836    	; 0x37b4 <skip_spaces>
    3af8:	eb cf       	rjmp	.-42     	; 0x3ad0 <vfscanf+0x32>
    3afa:	35 32       	cpi	r19, 0x25	; 37
    3afc:	41 f4       	brne	.+16     	; 0x3b0e <vfscanf+0x70>
    3afe:	f2 01       	movw	r30, r4
    3b00:	f3 fc       	sbrc	r15, 3
    3b02:	35 91       	lpm	r19, Z+
    3b04:	f3 fe       	sbrs	r15, 3
    3b06:	31 91       	ld	r19, Z+
    3b08:	2f 01       	movw	r4, r30
    3b0a:	35 32       	cpi	r19, 0x25	; 37
    3b0c:	59 f4       	brne	.+22     	; 0x3b24 <vfscanf+0x86>
    3b0e:	c6 01       	movw	r24, r12
    3b10:	39 83       	std	Y+1, r19	; 0x01
    3b12:	5c d2       	rcall	.+1208   	; 0x3fcc <fgetc>
    3b14:	39 81       	ldd	r19, Y+1	; 0x01
    3b16:	97 fd       	sbrc	r25, 7
    3b18:	ca c0       	rjmp	.+404    	; 0x3cae <vfscanf+0x210>
    3b1a:	38 17       	cp	r19, r24
    3b1c:	c9 f2       	breq	.-78     	; 0x3ad0 <vfscanf+0x32>
    3b1e:	b6 01       	movw	r22, r12
    3b20:	cb d2       	rcall	.+1430   	; 0x40b8 <ungetc>
    3b22:	c7 c0       	rjmp	.+398    	; 0x3cb2 <vfscanf+0x214>
    3b24:	3a 32       	cpi	r19, 0x2A	; 42
    3b26:	39 f4       	brne	.+14     	; 0x3b36 <vfscanf+0x98>
    3b28:	f3 fc       	sbrc	r15, 3
    3b2a:	35 91       	lpm	r19, Z+
    3b2c:	f3 fe       	sbrs	r15, 3
    3b2e:	31 91       	ld	r19, Z+
    3b30:	2f 01       	movw	r4, r30
    3b32:	51 e0       	ldi	r21, 0x01	; 1
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <vfscanf+0x9a>
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	42 01       	movw	r8, r4
    3b3a:	10 e0       	ldi	r17, 0x00	; 0
    3b3c:	20 ed       	ldi	r18, 0xD0	; 208
    3b3e:	23 0f       	add	r18, r19
    3b40:	2a 30       	cpi	r18, 0x0A	; 10
    3b42:	88 f4       	brcc	.+34     	; 0x3b66 <vfscanf+0xc8>
    3b44:	52 60       	ori	r21, 0x02	; 2
    3b46:	61 2f       	mov	r22, r17
    3b48:	70 e0       	ldi	r23, 0x00	; 0
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	40 e2       	ldi	r20, 0x20	; 32
    3b50:	59 83       	std	Y+1, r21	; 0x01
    3b52:	10 de       	rcall	.-992    	; 0x3774 <mulacc>
    3b54:	16 2f       	mov	r17, r22
    3b56:	f4 01       	movw	r30, r8
    3b58:	f3 fc       	sbrc	r15, 3
    3b5a:	35 91       	lpm	r19, Z+
    3b5c:	f3 fe       	sbrs	r15, 3
    3b5e:	31 91       	ld	r19, Z+
    3b60:	4f 01       	movw	r8, r30
    3b62:	59 81       	ldd	r21, Y+1	; 0x01
    3b64:	eb cf       	rjmp	.-42     	; 0x3b3c <vfscanf+0x9e>
    3b66:	05 2f       	mov	r16, r21
    3b68:	23 2f       	mov	r18, r19
    3b6a:	24 01       	movw	r4, r8
    3b6c:	51 ff       	sbrs	r21, 1
    3b6e:	03 c0       	rjmp	.+6      	; 0x3b76 <vfscanf+0xd8>
    3b70:	11 11       	cpse	r17, r1
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <vfscanf+0xda>
    3b74:	9e c0       	rjmp	.+316    	; 0x3cb2 <vfscanf+0x214>
    3b76:	1f ef       	ldi	r17, 0xFF	; 255
    3b78:	38 36       	cpi	r19, 0x68	; 104
    3b7a:	19 f0       	breq	.+6      	; 0x3b82 <vfscanf+0xe4>
    3b7c:	3c 36       	cpi	r19, 0x6C	; 108
    3b7e:	59 f0       	breq	.+22     	; 0x3b96 <vfscanf+0xf8>
    3b80:	11 c0       	rjmp	.+34     	; 0x3ba4 <vfscanf+0x106>
    3b82:	f4 01       	movw	r30, r8
    3b84:	f3 fc       	sbrc	r15, 3
    3b86:	25 91       	lpm	r18, Z+
    3b88:	f3 fe       	sbrs	r15, 3
    3b8a:	21 91       	ld	r18, Z+
    3b8c:	2f 01       	movw	r4, r30
    3b8e:	28 36       	cpi	r18, 0x68	; 104
    3b90:	49 f4       	brne	.+18     	; 0x3ba4 <vfscanf+0x106>
    3b92:	05 2f       	mov	r16, r21
    3b94:	08 60       	ori	r16, 0x08	; 8
    3b96:	04 60       	ori	r16, 0x04	; 4
    3b98:	f2 01       	movw	r30, r4
    3b9a:	f3 fc       	sbrc	r15, 3
    3b9c:	25 91       	lpm	r18, Z+
    3b9e:	f3 fe       	sbrs	r15, 3
    3ba0:	21 91       	ld	r18, Z+
    3ba2:	2f 01       	movw	r4, r30
    3ba4:	22 23       	and	r18, r18
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <vfscanf+0x10c>
    3ba8:	84 c0       	rjmp	.+264    	; 0x3cb2 <vfscanf+0x214>
    3baa:	62 2f       	mov	r22, r18
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	8a e0       	ldi	r24, 0x0A	; 10
    3bb0:	92 e0       	ldi	r25, 0x02	; 2
    3bb2:	29 83       	std	Y+1, r18	; 0x01
    3bb4:	e3 d1       	rcall	.+966    	; 0x3f7c <strchr_P>
    3bb6:	29 81       	ldd	r18, Y+1	; 0x01
    3bb8:	89 2b       	or	r24, r25
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <vfscanf+0x120>
    3bbc:	7a c0       	rjmp	.+244    	; 0x3cb2 <vfscanf+0x214>
    3bbe:	00 fd       	sbrc	r16, 0
    3bc0:	07 c0       	rjmp	.+14     	; 0x3bd0 <vfscanf+0x132>
    3bc2:	f5 01       	movw	r30, r10
    3bc4:	e0 80       	ld	r14, Z
    3bc6:	f1 80       	ldd	r15, Z+1	; 0x01
    3bc8:	c5 01       	movw	r24, r10
    3bca:	02 96       	adiw	r24, 0x02	; 2
    3bcc:	5c 01       	movw	r10, r24
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <vfscanf+0x136>
    3bd0:	e1 2c       	mov	r14, r1
    3bd2:	f1 2c       	mov	r15, r1
    3bd4:	2e 36       	cpi	r18, 0x6E	; 110
    3bd6:	49 f4       	brne	.+18     	; 0x3bea <vfscanf+0x14c>
    3bd8:	f6 01       	movw	r30, r12
    3bda:	46 81       	ldd	r20, Z+6	; 0x06
    3bdc:	57 81       	ldd	r21, Z+7	; 0x07
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	20 2f       	mov	r18, r16
    3be4:	c7 01       	movw	r24, r14
    3be6:	ba dd       	rcall	.-1164   	; 0x375c <putval>
    3be8:	73 cf       	rjmp	.-282    	; 0x3ad0 <vfscanf+0x32>
    3bea:	23 36       	cpi	r18, 0x63	; 99
    3bec:	89 f4       	brne	.+34     	; 0x3c10 <vfscanf+0x172>
    3bee:	01 ff       	sbrs	r16, 1
    3bf0:	11 e0       	ldi	r17, 0x01	; 1
    3bf2:	c6 01       	movw	r24, r12
    3bf4:	eb d1       	rcall	.+982    	; 0x3fcc <fgetc>
    3bf6:	97 fd       	sbrc	r25, 7
    3bf8:	5a c0       	rjmp	.+180    	; 0x3cae <vfscanf+0x210>
    3bfa:	e1 14       	cp	r14, r1
    3bfc:	f1 04       	cpc	r15, r1
    3bfe:	29 f0       	breq	.+10     	; 0x3c0a <vfscanf+0x16c>
    3c00:	f7 01       	movw	r30, r14
    3c02:	80 83       	st	Z, r24
    3c04:	c7 01       	movw	r24, r14
    3c06:	01 96       	adiw	r24, 0x01	; 1
    3c08:	7c 01       	movw	r14, r24
    3c0a:	11 50       	subi	r17, 0x01	; 1
    3c0c:	91 f7       	brne	.-28     	; 0x3bf2 <vfscanf+0x154>
    3c0e:	4b c0       	rjmp	.+150    	; 0x3ca6 <vfscanf+0x208>
    3c10:	2b 35       	cpi	r18, 0x5B	; 91
    3c12:	51 f4       	brne	.+20     	; 0x3c28 <vfscanf+0x18a>
    3c14:	92 01       	movw	r18, r4
    3c16:	a7 01       	movw	r20, r14
    3c18:	61 2f       	mov	r22, r17
    3c1a:	c6 01       	movw	r24, r12
    3c1c:	81 de       	rcall	.-766    	; 0x3920 <conv_brk>
    3c1e:	2c 01       	movw	r4, r24
    3c20:	89 2b       	or	r24, r25
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <vfscanf+0x188>
    3c24:	40 c0       	rjmp	.+128    	; 0x3ca6 <vfscanf+0x208>
    3c26:	3a c0       	rjmp	.+116    	; 0x3c9c <vfscanf+0x1fe>
    3c28:	c6 01       	movw	r24, r12
    3c2a:	29 83       	std	Y+1, r18	; 0x01
    3c2c:	c3 dd       	rcall	.-1146   	; 0x37b4 <skip_spaces>
    3c2e:	29 81       	ldd	r18, Y+1	; 0x01
    3c30:	97 fd       	sbrc	r25, 7
    3c32:	3d c0       	rjmp	.+122    	; 0x3cae <vfscanf+0x210>
    3c34:	2f 36       	cpi	r18, 0x6F	; 111
    3c36:	41 f1       	breq	.+80     	; 0x3c88 <vfscanf+0x1ea>
    3c38:	28 f4       	brcc	.+10     	; 0x3c44 <vfscanf+0x1a6>
    3c3a:	24 36       	cpi	r18, 0x64	; 100
    3c3c:	19 f1       	breq	.+70     	; 0x3c84 <vfscanf+0x1e6>
    3c3e:	29 36       	cpi	r18, 0x69	; 105
    3c40:	31 f1       	breq	.+76     	; 0x3c8e <vfscanf+0x1f0>
    3c42:	24 c0       	rjmp	.+72     	; 0x3c8c <vfscanf+0x1ee>
    3c44:	23 37       	cpi	r18, 0x73	; 115
    3c46:	69 f0       	breq	.+26     	; 0x3c62 <vfscanf+0x1c4>
    3c48:	25 37       	cpi	r18, 0x75	; 117
    3c4a:	e1 f0       	breq	.+56     	; 0x3c84 <vfscanf+0x1e6>
    3c4c:	1f c0       	rjmp	.+62     	; 0x3c8c <vfscanf+0x1ee>
    3c4e:	e1 14       	cp	r14, r1
    3c50:	f1 04       	cpc	r15, r1
    3c52:	29 f0       	breq	.+10     	; 0x3c5e <vfscanf+0x1c0>
    3c54:	f7 01       	movw	r30, r14
    3c56:	80 82       	st	Z, r8
    3c58:	c7 01       	movw	r24, r14
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	7c 01       	movw	r14, r24
    3c5e:	11 50       	subi	r17, 0x01	; 1
    3c60:	59 f0       	breq	.+22     	; 0x3c78 <vfscanf+0x1da>
    3c62:	c6 01       	movw	r24, r12
    3c64:	b3 d1       	rcall	.+870    	; 0x3fcc <fgetc>
    3c66:	4c 01       	movw	r8, r24
    3c68:	97 fd       	sbrc	r25, 7
    3c6a:	06 c0       	rjmp	.+12     	; 0x3c78 <vfscanf+0x1da>
    3c6c:	7f d1       	rcall	.+766    	; 0x3f6c <isspace>
    3c6e:	89 2b       	or	r24, r25
    3c70:	71 f3       	breq	.-36     	; 0x3c4e <vfscanf+0x1b0>
    3c72:	b6 01       	movw	r22, r12
    3c74:	c4 01       	movw	r24, r8
    3c76:	20 d2       	rcall	.+1088   	; 0x40b8 <ungetc>
    3c78:	e1 14       	cp	r14, r1
    3c7a:	f1 04       	cpc	r15, r1
    3c7c:	a1 f0       	breq	.+40     	; 0x3ca6 <vfscanf+0x208>
    3c7e:	f7 01       	movw	r30, r14
    3c80:	10 82       	st	Z, r1
    3c82:	11 c0       	rjmp	.+34     	; 0x3ca6 <vfscanf+0x208>
    3c84:	00 62       	ori	r16, 0x20	; 32
    3c86:	03 c0       	rjmp	.+6      	; 0x3c8e <vfscanf+0x1f0>
    3c88:	00 61       	ori	r16, 0x10	; 16
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <vfscanf+0x1f0>
    3c8c:	00 64       	ori	r16, 0x40	; 64
    3c8e:	20 2f       	mov	r18, r16
    3c90:	a7 01       	movw	r20, r14
    3c92:	61 2f       	mov	r22, r17
    3c94:	c6 01       	movw	r24, r12
    3c96:	a4 dd       	rcall	.-1208   	; 0x37e0 <conv_int>
    3c98:	81 11       	cpse	r24, r1
    3c9a:	05 c0       	rjmp	.+10     	; 0x3ca6 <vfscanf+0x208>
    3c9c:	f6 01       	movw	r30, r12
    3c9e:	83 81       	ldd	r24, Z+3	; 0x03
    3ca0:	80 73       	andi	r24, 0x30	; 48
    3ca2:	29 f4       	brne	.+10     	; 0x3cae <vfscanf+0x210>
    3ca4:	06 c0       	rjmp	.+12     	; 0x3cb2 <vfscanf+0x214>
    3ca6:	00 fd       	sbrc	r16, 0
    3ca8:	13 cf       	rjmp	.-474    	; 0x3ad0 <vfscanf+0x32>
    3caa:	73 94       	inc	r7
    3cac:	11 cf       	rjmp	.-478    	; 0x3ad0 <vfscanf+0x32>
    3cae:	77 20       	and	r7, r7
    3cb0:	19 f0       	breq	.+6      	; 0x3cb8 <vfscanf+0x21a>
    3cb2:	87 2d       	mov	r24, r7
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	02 c0       	rjmp	.+4      	; 0x3cbc <vfscanf+0x21e>
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
    3cba:	9f ef       	ldi	r25, 0xFF	; 255
    3cbc:	0f 90       	pop	r0
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	df 90       	pop	r13
    3ccc:	cf 90       	pop	r12
    3cce:	bf 90       	pop	r11
    3cd0:	af 90       	pop	r10
    3cd2:	9f 90       	pop	r9
    3cd4:	8f 90       	pop	r8
    3cd6:	7f 90       	pop	r7
    3cd8:	5f 90       	pop	r5
    3cda:	4f 90       	pop	r4
    3cdc:	08 95       	ret

00003cde <calloc>:
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	86 9f       	mul	r24, r22
    3ce8:	80 01       	movw	r16, r0
    3cea:	87 9f       	mul	r24, r23
    3cec:	10 0d       	add	r17, r0
    3cee:	96 9f       	mul	r25, r22
    3cf0:	10 0d       	add	r17, r0
    3cf2:	11 24       	eor	r1, r1
    3cf4:	c8 01       	movw	r24, r16
    3cf6:	0d d0       	rcall	.+26     	; 0x3d12 <malloc>
    3cf8:	ec 01       	movw	r28, r24
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	21 f0       	breq	.+8      	; 0x3d06 <calloc+0x28>
    3cfe:	a8 01       	movw	r20, r16
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	51 d1       	rcall	.+674    	; 0x3fa8 <memset>
    3d06:	ce 01       	movw	r24, r28
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	1f 91       	pop	r17
    3d0e:	0f 91       	pop	r16
    3d10:	08 95       	ret

00003d12 <malloc>:
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	82 30       	cpi	r24, 0x02	; 2
    3d18:	91 05       	cpc	r25, r1
    3d1a:	10 f4       	brcc	.+4      	; 0x3d20 <malloc+0xe>
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	e0 91 0a 28 	lds	r30, 0x280A
    3d24:	f0 91 0b 28 	lds	r31, 0x280B
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	c0 e0       	ldi	r28, 0x00	; 0
    3d2e:	d0 e0       	ldi	r29, 0x00	; 0
    3d30:	30 97       	sbiw	r30, 0x00	; 0
    3d32:	11 f1       	breq	.+68     	; 0x3d78 <malloc+0x66>
    3d34:	40 81       	ld	r20, Z
    3d36:	51 81       	ldd	r21, Z+1	; 0x01
    3d38:	48 17       	cp	r20, r24
    3d3a:	59 07       	cpc	r21, r25
    3d3c:	c0 f0       	brcs	.+48     	; 0x3d6e <malloc+0x5c>
    3d3e:	48 17       	cp	r20, r24
    3d40:	59 07       	cpc	r21, r25
    3d42:	61 f4       	brne	.+24     	; 0x3d5c <malloc+0x4a>
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	20 97       	sbiw	r28, 0x00	; 0
    3d4a:	19 f0       	breq	.+6      	; 0x3d52 <malloc+0x40>
    3d4c:	8a 83       	std	Y+2, r24	; 0x02
    3d4e:	9b 83       	std	Y+3, r25	; 0x03
    3d50:	2b c0       	rjmp	.+86     	; 0x3da8 <malloc+0x96>
    3d52:	80 93 0a 28 	sts	0x280A, r24
    3d56:	90 93 0b 28 	sts	0x280B, r25
    3d5a:	26 c0       	rjmp	.+76     	; 0x3da8 <malloc+0x96>
    3d5c:	21 15       	cp	r18, r1
    3d5e:	31 05       	cpc	r19, r1
    3d60:	19 f0       	breq	.+6      	; 0x3d68 <malloc+0x56>
    3d62:	42 17       	cp	r20, r18
    3d64:	53 07       	cpc	r21, r19
    3d66:	18 f4       	brcc	.+6      	; 0x3d6e <malloc+0x5c>
    3d68:	9a 01       	movw	r18, r20
    3d6a:	be 01       	movw	r22, r28
    3d6c:	df 01       	movw	r26, r30
    3d6e:	ef 01       	movw	r28, r30
    3d70:	02 80       	ldd	r0, Z+2	; 0x02
    3d72:	f3 81       	ldd	r31, Z+3	; 0x03
    3d74:	e0 2d       	mov	r30, r0
    3d76:	dc cf       	rjmp	.-72     	; 0x3d30 <malloc+0x1e>
    3d78:	21 15       	cp	r18, r1
    3d7a:	31 05       	cpc	r19, r1
    3d7c:	09 f1       	breq	.+66     	; 0x3dc0 <malloc+0xae>
    3d7e:	28 1b       	sub	r18, r24
    3d80:	39 0b       	sbc	r19, r25
    3d82:	24 30       	cpi	r18, 0x04	; 4
    3d84:	31 05       	cpc	r19, r1
    3d86:	90 f4       	brcc	.+36     	; 0x3dac <malloc+0x9a>
    3d88:	12 96       	adiw	r26, 0x02	; 2
    3d8a:	8d 91       	ld	r24, X+
    3d8c:	9c 91       	ld	r25, X
    3d8e:	13 97       	sbiw	r26, 0x03	; 3
    3d90:	61 15       	cp	r22, r1
    3d92:	71 05       	cpc	r23, r1
    3d94:	21 f0       	breq	.+8      	; 0x3d9e <malloc+0x8c>
    3d96:	fb 01       	movw	r30, r22
    3d98:	82 83       	std	Z+2, r24	; 0x02
    3d9a:	93 83       	std	Z+3, r25	; 0x03
    3d9c:	04 c0       	rjmp	.+8      	; 0x3da6 <malloc+0x94>
    3d9e:	80 93 0a 28 	sts	0x280A, r24
    3da2:	90 93 0b 28 	sts	0x280B, r25
    3da6:	fd 01       	movw	r30, r26
    3da8:	32 96       	adiw	r30, 0x02	; 2
    3daa:	44 c0       	rjmp	.+136    	; 0x3e34 <malloc+0x122>
    3dac:	fd 01       	movw	r30, r26
    3dae:	e2 0f       	add	r30, r18
    3db0:	f3 1f       	adc	r31, r19
    3db2:	81 93       	st	Z+, r24
    3db4:	91 93       	st	Z+, r25
    3db6:	22 50       	subi	r18, 0x02	; 2
    3db8:	31 09       	sbc	r19, r1
    3dba:	2d 93       	st	X+, r18
    3dbc:	3c 93       	st	X, r19
    3dbe:	3a c0       	rjmp	.+116    	; 0x3e34 <malloc+0x122>
    3dc0:	20 91 08 28 	lds	r18, 0x2808
    3dc4:	30 91 09 28 	lds	r19, 0x2809
    3dc8:	23 2b       	or	r18, r19
    3dca:	41 f4       	brne	.+16     	; 0x3ddc <malloc+0xca>
    3dcc:	20 91 02 20 	lds	r18, 0x2002
    3dd0:	30 91 03 20 	lds	r19, 0x2003
    3dd4:	20 93 08 28 	sts	0x2808, r18
    3dd8:	30 93 09 28 	sts	0x2809, r19
    3ddc:	20 91 00 20 	lds	r18, 0x2000
    3de0:	30 91 01 20 	lds	r19, 0x2001
    3de4:	21 15       	cp	r18, r1
    3de6:	31 05       	cpc	r19, r1
    3de8:	41 f4       	brne	.+16     	; 0x3dfa <malloc+0xe8>
    3dea:	2d b7       	in	r18, 0x3d	; 61
    3dec:	3e b7       	in	r19, 0x3e	; 62
    3dee:	40 91 04 20 	lds	r20, 0x2004
    3df2:	50 91 05 20 	lds	r21, 0x2005
    3df6:	24 1b       	sub	r18, r20
    3df8:	35 0b       	sbc	r19, r21
    3dfa:	e0 91 08 28 	lds	r30, 0x2808
    3dfe:	f0 91 09 28 	lds	r31, 0x2809
    3e02:	e2 17       	cp	r30, r18
    3e04:	f3 07       	cpc	r31, r19
    3e06:	a0 f4       	brcc	.+40     	; 0x3e30 <malloc+0x11e>
    3e08:	2e 1b       	sub	r18, r30
    3e0a:	3f 0b       	sbc	r19, r31
    3e0c:	28 17       	cp	r18, r24
    3e0e:	39 07       	cpc	r19, r25
    3e10:	78 f0       	brcs	.+30     	; 0x3e30 <malloc+0x11e>
    3e12:	ac 01       	movw	r20, r24
    3e14:	4e 5f       	subi	r20, 0xFE	; 254
    3e16:	5f 4f       	sbci	r21, 0xFF	; 255
    3e18:	24 17       	cp	r18, r20
    3e1a:	35 07       	cpc	r19, r21
    3e1c:	48 f0       	brcs	.+18     	; 0x3e30 <malloc+0x11e>
    3e1e:	4e 0f       	add	r20, r30
    3e20:	5f 1f       	adc	r21, r31
    3e22:	40 93 08 28 	sts	0x2808, r20
    3e26:	50 93 09 28 	sts	0x2809, r21
    3e2a:	81 93       	st	Z+, r24
    3e2c:	91 93       	st	Z+, r25
    3e2e:	02 c0       	rjmp	.+4      	; 0x3e34 <malloc+0x122>
    3e30:	e0 e0       	ldi	r30, 0x00	; 0
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	cf 01       	movw	r24, r30
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	08 95       	ret

00003e3c <free>:
    3e3c:	0f 93       	push	r16
    3e3e:	1f 93       	push	r17
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <free+0xe>
    3e48:	8c c0       	rjmp	.+280    	; 0x3f62 <free+0x126>
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	32 97       	sbiw	r30, 0x02	; 2
    3e4e:	12 82       	std	Z+2, r1	; 0x02
    3e50:	13 82       	std	Z+3, r1	; 0x03
    3e52:	00 91 0a 28 	lds	r16, 0x280A
    3e56:	10 91 0b 28 	lds	r17, 0x280B
    3e5a:	01 15       	cp	r16, r1
    3e5c:	11 05       	cpc	r17, r1
    3e5e:	81 f4       	brne	.+32     	; 0x3e80 <free+0x44>
    3e60:	20 81       	ld	r18, Z
    3e62:	31 81       	ldd	r19, Z+1	; 0x01
    3e64:	82 0f       	add	r24, r18
    3e66:	93 1f       	adc	r25, r19
    3e68:	20 91 08 28 	lds	r18, 0x2808
    3e6c:	30 91 09 28 	lds	r19, 0x2809
    3e70:	28 17       	cp	r18, r24
    3e72:	39 07       	cpc	r19, r25
    3e74:	79 f5       	brne	.+94     	; 0x3ed4 <free+0x98>
    3e76:	e0 93 08 28 	sts	0x2808, r30
    3e7a:	f0 93 09 28 	sts	0x2809, r31
    3e7e:	71 c0       	rjmp	.+226    	; 0x3f62 <free+0x126>
    3e80:	d8 01       	movw	r26, r16
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	ae 17       	cp	r26, r30
    3e88:	bf 07       	cpc	r27, r31
    3e8a:	50 f4       	brcc	.+20     	; 0x3ea0 <free+0x64>
    3e8c:	12 96       	adiw	r26, 0x02	; 2
    3e8e:	2d 91       	ld	r18, X+
    3e90:	3c 91       	ld	r19, X
    3e92:	13 97       	sbiw	r26, 0x03	; 3
    3e94:	ad 01       	movw	r20, r26
    3e96:	21 15       	cp	r18, r1
    3e98:	31 05       	cpc	r19, r1
    3e9a:	09 f1       	breq	.+66     	; 0x3ede <free+0xa2>
    3e9c:	d9 01       	movw	r26, r18
    3e9e:	f3 cf       	rjmp	.-26     	; 0x3e86 <free+0x4a>
    3ea0:	9d 01       	movw	r18, r26
    3ea2:	da 01       	movw	r26, r20
    3ea4:	22 83       	std	Z+2, r18	; 0x02
    3ea6:	33 83       	std	Z+3, r19	; 0x03
    3ea8:	60 81       	ld	r22, Z
    3eaa:	71 81       	ldd	r23, Z+1	; 0x01
    3eac:	86 0f       	add	r24, r22
    3eae:	97 1f       	adc	r25, r23
    3eb0:	82 17       	cp	r24, r18
    3eb2:	93 07       	cpc	r25, r19
    3eb4:	69 f4       	brne	.+26     	; 0x3ed0 <free+0x94>
    3eb6:	ec 01       	movw	r28, r24
    3eb8:	28 81       	ld	r18, Y
    3eba:	39 81       	ldd	r19, Y+1	; 0x01
    3ebc:	26 0f       	add	r18, r22
    3ebe:	37 1f       	adc	r19, r23
    3ec0:	2e 5f       	subi	r18, 0xFE	; 254
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	20 83       	st	Z, r18
    3ec6:	31 83       	std	Z+1, r19	; 0x01
    3ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eca:	9b 81       	ldd	r25, Y+3	; 0x03
    3ecc:	82 83       	std	Z+2, r24	; 0x02
    3ece:	93 83       	std	Z+3, r25	; 0x03
    3ed0:	45 2b       	or	r20, r21
    3ed2:	29 f4       	brne	.+10     	; 0x3ede <free+0xa2>
    3ed4:	e0 93 0a 28 	sts	0x280A, r30
    3ed8:	f0 93 0b 28 	sts	0x280B, r31
    3edc:	42 c0       	rjmp	.+132    	; 0x3f62 <free+0x126>
    3ede:	12 96       	adiw	r26, 0x02	; 2
    3ee0:	ed 93       	st	X+, r30
    3ee2:	fc 93       	st	X, r31
    3ee4:	13 97       	sbiw	r26, 0x03	; 3
    3ee6:	ed 01       	movw	r28, r26
    3ee8:	49 91       	ld	r20, Y+
    3eea:	59 91       	ld	r21, Y+
    3eec:	9e 01       	movw	r18, r28
    3eee:	24 0f       	add	r18, r20
    3ef0:	35 1f       	adc	r19, r21
    3ef2:	e2 17       	cp	r30, r18
    3ef4:	f3 07       	cpc	r31, r19
    3ef6:	71 f4       	brne	.+28     	; 0x3f14 <free+0xd8>
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	84 0f       	add	r24, r20
    3efe:	95 1f       	adc	r25, r21
    3f00:	02 96       	adiw	r24, 0x02	; 2
    3f02:	8d 93       	st	X+, r24
    3f04:	9c 93       	st	X, r25
    3f06:	11 97       	sbiw	r26, 0x01	; 1
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	12 96       	adiw	r26, 0x02	; 2
    3f0e:	8d 93       	st	X+, r24
    3f10:	9c 93       	st	X, r25
    3f12:	13 97       	sbiw	r26, 0x03	; 3
    3f14:	e0 e0       	ldi	r30, 0x00	; 0
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	d8 01       	movw	r26, r16
    3f1a:	12 96       	adiw	r26, 0x02	; 2
    3f1c:	8d 91       	ld	r24, X+
    3f1e:	9c 91       	ld	r25, X
    3f20:	13 97       	sbiw	r26, 0x03	; 3
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	19 f0       	breq	.+6      	; 0x3f2c <free+0xf0>
    3f26:	f8 01       	movw	r30, r16
    3f28:	8c 01       	movw	r16, r24
    3f2a:	f6 cf       	rjmp	.-20     	; 0x3f18 <free+0xdc>
    3f2c:	8d 91       	ld	r24, X+
    3f2e:	9c 91       	ld	r25, X
    3f30:	98 01       	movw	r18, r16
    3f32:	2e 5f       	subi	r18, 0xFE	; 254
    3f34:	3f 4f       	sbci	r19, 0xFF	; 255
    3f36:	82 0f       	add	r24, r18
    3f38:	93 1f       	adc	r25, r19
    3f3a:	20 91 08 28 	lds	r18, 0x2808
    3f3e:	30 91 09 28 	lds	r19, 0x2809
    3f42:	28 17       	cp	r18, r24
    3f44:	39 07       	cpc	r19, r25
    3f46:	69 f4       	brne	.+26     	; 0x3f62 <free+0x126>
    3f48:	30 97       	sbiw	r30, 0x00	; 0
    3f4a:	29 f4       	brne	.+10     	; 0x3f56 <free+0x11a>
    3f4c:	10 92 0a 28 	sts	0x280A, r1
    3f50:	10 92 0b 28 	sts	0x280B, r1
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <free+0x11e>
    3f56:	12 82       	std	Z+2, r1	; 0x02
    3f58:	13 82       	std	Z+3, r1	; 0x03
    3f5a:	00 93 08 28 	sts	0x2808, r16
    3f5e:	10 93 09 28 	sts	0x2809, r17
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	08 95       	ret

00003f6c <isspace>:
    3f6c:	91 11       	cpse	r25, r1
    3f6e:	1b c1       	rjmp	.+566    	; 0x41a6 <__ctype_isfalse>
    3f70:	80 32       	cpi	r24, 0x20	; 32
    3f72:	19 f0       	breq	.+6      	; 0x3f7a <isspace+0xe>
    3f74:	89 50       	subi	r24, 0x09	; 9
    3f76:	85 50       	subi	r24, 0x05	; 5
    3f78:	d0 f7       	brcc	.-12     	; 0x3f6e <isspace+0x2>
    3f7a:	08 95       	ret

00003f7c <strchr_P>:
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	05 90       	lpm	r0, Z+
    3f80:	06 16       	cp	r0, r22
    3f82:	21 f0       	breq	.+8      	; 0x3f8c <strchr_P+0x10>
    3f84:	00 20       	and	r0, r0
    3f86:	d9 f7       	brne	.-10     	; 0x3f7e <strchr_P+0x2>
    3f88:	c0 01       	movw	r24, r0
    3f8a:	08 95       	ret
    3f8c:	31 97       	sbiw	r30, 0x01	; 1
    3f8e:	cf 01       	movw	r24, r30
    3f90:	08 95       	ret

00003f92 <strnlen_P>:
    3f92:	fc 01       	movw	r30, r24
    3f94:	05 90       	lpm	r0, Z+
    3f96:	61 50       	subi	r22, 0x01	; 1
    3f98:	70 40       	sbci	r23, 0x00	; 0
    3f9a:	01 10       	cpse	r0, r1
    3f9c:	d8 f7       	brcc	.-10     	; 0x3f94 <strnlen_P+0x2>
    3f9e:	80 95       	com	r24
    3fa0:	90 95       	com	r25
    3fa2:	8e 0f       	add	r24, r30
    3fa4:	9f 1f       	adc	r25, r31
    3fa6:	08 95       	ret

00003fa8 <memset>:
    3fa8:	dc 01       	movw	r26, r24
    3faa:	01 c0       	rjmp	.+2      	; 0x3fae <memset+0x6>
    3fac:	6d 93       	st	X+, r22
    3fae:	41 50       	subi	r20, 0x01	; 1
    3fb0:	50 40       	sbci	r21, 0x00	; 0
    3fb2:	e0 f7       	brcc	.-8      	; 0x3fac <memset+0x4>
    3fb4:	08 95       	ret

00003fb6 <strnlen>:
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	61 50       	subi	r22, 0x01	; 1
    3fba:	70 40       	sbci	r23, 0x00	; 0
    3fbc:	01 90       	ld	r0, Z+
    3fbe:	01 10       	cpse	r0, r1
    3fc0:	d8 f7       	brcc	.-10     	; 0x3fb8 <strnlen+0x2>
    3fc2:	80 95       	com	r24
    3fc4:	90 95       	com	r25
    3fc6:	8e 0f       	add	r24, r30
    3fc8:	9f 1f       	adc	r25, r31
    3fca:	08 95       	ret

00003fcc <fgetc>:
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	ec 01       	movw	r28, r24
    3fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    3fd4:	20 ff       	sbrs	r18, 0
    3fd6:	33 c0       	rjmp	.+102    	; 0x403e <fgetc+0x72>
    3fd8:	26 ff       	sbrs	r18, 6
    3fda:	0a c0       	rjmp	.+20     	; 0x3ff0 <fgetc+0x24>
    3fdc:	2f 7b       	andi	r18, 0xBF	; 191
    3fde:	2b 83       	std	Y+3, r18	; 0x03
    3fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	8e 83       	std	Y+6, r24	; 0x06
    3fe8:	9f 83       	std	Y+7, r25	; 0x07
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	29 c0       	rjmp	.+82     	; 0x4042 <fgetc+0x76>
    3ff0:	22 ff       	sbrs	r18, 2
    3ff2:	0f c0       	rjmp	.+30     	; 0x4012 <fgetc+0x46>
    3ff4:	e8 81       	ld	r30, Y
    3ff6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ff8:	80 81       	ld	r24, Z
    3ffa:	08 2e       	mov	r0, r24
    3ffc:	00 0c       	add	r0, r0
    3ffe:	99 0b       	sbc	r25, r25
    4000:	00 97       	sbiw	r24, 0x00	; 0
    4002:	19 f4       	brne	.+6      	; 0x400a <fgetc+0x3e>
    4004:	20 62       	ori	r18, 0x20	; 32
    4006:	2b 83       	std	Y+3, r18	; 0x03
    4008:	1a c0       	rjmp	.+52     	; 0x403e <fgetc+0x72>
    400a:	31 96       	adiw	r30, 0x01	; 1
    400c:	e8 83       	st	Y, r30
    400e:	f9 83       	std	Y+1, r31	; 0x01
    4010:	0e c0       	rjmp	.+28     	; 0x402e <fgetc+0x62>
    4012:	ea 85       	ldd	r30, Y+10	; 0x0a
    4014:	fb 85       	ldd	r31, Y+11	; 0x0b
    4016:	19 95       	eicall
    4018:	97 ff       	sbrs	r25, 7
    401a:	09 c0       	rjmp	.+18     	; 0x402e <fgetc+0x62>
    401c:	2b 81       	ldd	r18, Y+3	; 0x03
    401e:	01 96       	adiw	r24, 0x01	; 1
    4020:	11 f0       	breq	.+4      	; 0x4026 <fgetc+0x5a>
    4022:	80 e2       	ldi	r24, 0x20	; 32
    4024:	01 c0       	rjmp	.+2      	; 0x4028 <fgetc+0x5c>
    4026:	80 e1       	ldi	r24, 0x10	; 16
    4028:	82 2b       	or	r24, r18
    402a:	8b 83       	std	Y+3, r24	; 0x03
    402c:	08 c0       	rjmp	.+16     	; 0x403e <fgetc+0x72>
    402e:	2e 81       	ldd	r18, Y+6	; 0x06
    4030:	3f 81       	ldd	r19, Y+7	; 0x07
    4032:	2f 5f       	subi	r18, 0xFF	; 255
    4034:	3f 4f       	sbci	r19, 0xFF	; 255
    4036:	2e 83       	std	Y+6, r18	; 0x06
    4038:	3f 83       	std	Y+7, r19	; 0x07
    403a:	99 27       	eor	r25, r25
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <fgetc+0x76>
    403e:	8f ef       	ldi	r24, 0xFF	; 255
    4040:	9f ef       	ldi	r25, 0xFF	; 255
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	08 95       	ret

00004048 <fputc>:
    4048:	0f 93       	push	r16
    404a:	1f 93       	push	r17
    404c:	cf 93       	push	r28
    404e:	df 93       	push	r29
    4050:	fb 01       	movw	r30, r22
    4052:	23 81       	ldd	r18, Z+3	; 0x03
    4054:	21 fd       	sbrc	r18, 1
    4056:	03 c0       	rjmp	.+6      	; 0x405e <fputc+0x16>
    4058:	8f ef       	ldi	r24, 0xFF	; 255
    405a:	9f ef       	ldi	r25, 0xFF	; 255
    405c:	28 c0       	rjmp	.+80     	; 0x40ae <fputc+0x66>
    405e:	22 ff       	sbrs	r18, 2
    4060:	16 c0       	rjmp	.+44     	; 0x408e <fputc+0x46>
    4062:	46 81       	ldd	r20, Z+6	; 0x06
    4064:	57 81       	ldd	r21, Z+7	; 0x07
    4066:	24 81       	ldd	r18, Z+4	; 0x04
    4068:	35 81       	ldd	r19, Z+5	; 0x05
    406a:	42 17       	cp	r20, r18
    406c:	53 07       	cpc	r21, r19
    406e:	44 f4       	brge	.+16     	; 0x4080 <fputc+0x38>
    4070:	a0 81       	ld	r26, Z
    4072:	b1 81       	ldd	r27, Z+1	; 0x01
    4074:	9d 01       	movw	r18, r26
    4076:	2f 5f       	subi	r18, 0xFF	; 255
    4078:	3f 4f       	sbci	r19, 0xFF	; 255
    407a:	20 83       	st	Z, r18
    407c:	31 83       	std	Z+1, r19	; 0x01
    407e:	8c 93       	st	X, r24
    4080:	26 81       	ldd	r18, Z+6	; 0x06
    4082:	37 81       	ldd	r19, Z+7	; 0x07
    4084:	2f 5f       	subi	r18, 0xFF	; 255
    4086:	3f 4f       	sbci	r19, 0xFF	; 255
    4088:	26 83       	std	Z+6, r18	; 0x06
    408a:	37 83       	std	Z+7, r19	; 0x07
    408c:	10 c0       	rjmp	.+32     	; 0x40ae <fputc+0x66>
    408e:	eb 01       	movw	r28, r22
    4090:	09 2f       	mov	r16, r25
    4092:	18 2f       	mov	r17, r24
    4094:	00 84       	ldd	r0, Z+8	; 0x08
    4096:	f1 85       	ldd	r31, Z+9	; 0x09
    4098:	e0 2d       	mov	r30, r0
    409a:	19 95       	eicall
    409c:	89 2b       	or	r24, r25
    409e:	e1 f6       	brne	.-72     	; 0x4058 <fputc+0x10>
    40a0:	8e 81       	ldd	r24, Y+6	; 0x06
    40a2:	9f 81       	ldd	r25, Y+7	; 0x07
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	8e 83       	std	Y+6, r24	; 0x06
    40a8:	9f 83       	std	Y+7, r25	; 0x07
    40aa:	81 2f       	mov	r24, r17
    40ac:	90 2f       	mov	r25, r16
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	08 95       	ret

000040b8 <ungetc>:
    40b8:	fb 01       	movw	r30, r22
    40ba:	23 81       	ldd	r18, Z+3	; 0x03
    40bc:	20 ff       	sbrs	r18, 0
    40be:	12 c0       	rjmp	.+36     	; 0x40e4 <ungetc+0x2c>
    40c0:	26 fd       	sbrc	r18, 6
    40c2:	10 c0       	rjmp	.+32     	; 0x40e4 <ungetc+0x2c>
    40c4:	8f 3f       	cpi	r24, 0xFF	; 255
    40c6:	3f ef       	ldi	r19, 0xFF	; 255
    40c8:	93 07       	cpc	r25, r19
    40ca:	61 f0       	breq	.+24     	; 0x40e4 <ungetc+0x2c>
    40cc:	82 83       	std	Z+2, r24	; 0x02
    40ce:	2f 7d       	andi	r18, 0xDF	; 223
    40d0:	20 64       	ori	r18, 0x40	; 64
    40d2:	23 83       	std	Z+3, r18	; 0x03
    40d4:	26 81       	ldd	r18, Z+6	; 0x06
    40d6:	37 81       	ldd	r19, Z+7	; 0x07
    40d8:	21 50       	subi	r18, 0x01	; 1
    40da:	31 09       	sbc	r19, r1
    40dc:	26 83       	std	Z+6, r18	; 0x06
    40de:	37 83       	std	Z+7, r19	; 0x07
    40e0:	99 27       	eor	r25, r25
    40e2:	08 95       	ret
    40e4:	8f ef       	ldi	r24, 0xFF	; 255
    40e6:	9f ef       	ldi	r25, 0xFF	; 255
    40e8:	08 95       	ret

000040ea <__ultoa_invert>:
    40ea:	fa 01       	movw	r30, r20
    40ec:	aa 27       	eor	r26, r26
    40ee:	28 30       	cpi	r18, 0x08	; 8
    40f0:	51 f1       	breq	.+84     	; 0x4146 <__ultoa_invert+0x5c>
    40f2:	20 31       	cpi	r18, 0x10	; 16
    40f4:	81 f1       	breq	.+96     	; 0x4156 <__ultoa_invert+0x6c>
    40f6:	e8 94       	clt
    40f8:	6f 93       	push	r22
    40fa:	6e 7f       	andi	r22, 0xFE	; 254
    40fc:	6e 5f       	subi	r22, 0xFE	; 254
    40fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4100:	8f 4f       	sbci	r24, 0xFF	; 255
    4102:	9f 4f       	sbci	r25, 0xFF	; 255
    4104:	af 4f       	sbci	r26, 0xFF	; 255
    4106:	b1 e0       	ldi	r27, 0x01	; 1
    4108:	3e d0       	rcall	.+124    	; 0x4186 <__ultoa_invert+0x9c>
    410a:	b4 e0       	ldi	r27, 0x04	; 4
    410c:	3c d0       	rcall	.+120    	; 0x4186 <__ultoa_invert+0x9c>
    410e:	67 0f       	add	r22, r23
    4110:	78 1f       	adc	r23, r24
    4112:	89 1f       	adc	r24, r25
    4114:	9a 1f       	adc	r25, r26
    4116:	a1 1d       	adc	r26, r1
    4118:	68 0f       	add	r22, r24
    411a:	79 1f       	adc	r23, r25
    411c:	8a 1f       	adc	r24, r26
    411e:	91 1d       	adc	r25, r1
    4120:	a1 1d       	adc	r26, r1
    4122:	6a 0f       	add	r22, r26
    4124:	71 1d       	adc	r23, r1
    4126:	81 1d       	adc	r24, r1
    4128:	91 1d       	adc	r25, r1
    412a:	a1 1d       	adc	r26, r1
    412c:	20 d0       	rcall	.+64     	; 0x416e <__ultoa_invert+0x84>
    412e:	09 f4       	brne	.+2      	; 0x4132 <__ultoa_invert+0x48>
    4130:	68 94       	set
    4132:	3f 91       	pop	r19
    4134:	2a e0       	ldi	r18, 0x0A	; 10
    4136:	26 9f       	mul	r18, r22
    4138:	11 24       	eor	r1, r1
    413a:	30 19       	sub	r19, r0
    413c:	30 5d       	subi	r19, 0xD0	; 208
    413e:	31 93       	st	Z+, r19
    4140:	de f6       	brtc	.-74     	; 0x40f8 <__ultoa_invert+0xe>
    4142:	cf 01       	movw	r24, r30
    4144:	08 95       	ret
    4146:	46 2f       	mov	r20, r22
    4148:	47 70       	andi	r20, 0x07	; 7
    414a:	40 5d       	subi	r20, 0xD0	; 208
    414c:	41 93       	st	Z+, r20
    414e:	b3 e0       	ldi	r27, 0x03	; 3
    4150:	0f d0       	rcall	.+30     	; 0x4170 <__ultoa_invert+0x86>
    4152:	c9 f7       	brne	.-14     	; 0x4146 <__ultoa_invert+0x5c>
    4154:	f6 cf       	rjmp	.-20     	; 0x4142 <__ultoa_invert+0x58>
    4156:	46 2f       	mov	r20, r22
    4158:	4f 70       	andi	r20, 0x0F	; 15
    415a:	40 5d       	subi	r20, 0xD0	; 208
    415c:	4a 33       	cpi	r20, 0x3A	; 58
    415e:	18 f0       	brcs	.+6      	; 0x4166 <__ultoa_invert+0x7c>
    4160:	49 5d       	subi	r20, 0xD9	; 217
    4162:	31 fd       	sbrc	r19, 1
    4164:	40 52       	subi	r20, 0x20	; 32
    4166:	41 93       	st	Z+, r20
    4168:	02 d0       	rcall	.+4      	; 0x416e <__ultoa_invert+0x84>
    416a:	a9 f7       	brne	.-22     	; 0x4156 <__ultoa_invert+0x6c>
    416c:	ea cf       	rjmp	.-44     	; 0x4142 <__ultoa_invert+0x58>
    416e:	b4 e0       	ldi	r27, 0x04	; 4
    4170:	a6 95       	lsr	r26
    4172:	97 95       	ror	r25
    4174:	87 95       	ror	r24
    4176:	77 95       	ror	r23
    4178:	67 95       	ror	r22
    417a:	ba 95       	dec	r27
    417c:	c9 f7       	brne	.-14     	; 0x4170 <__ultoa_invert+0x86>
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	61 05       	cpc	r22, r1
    4182:	71 05       	cpc	r23, r1
    4184:	08 95       	ret
    4186:	9b 01       	movw	r18, r22
    4188:	ac 01       	movw	r20, r24
    418a:	0a 2e       	mov	r0, r26
    418c:	06 94       	lsr	r0
    418e:	57 95       	ror	r21
    4190:	47 95       	ror	r20
    4192:	37 95       	ror	r19
    4194:	27 95       	ror	r18
    4196:	ba 95       	dec	r27
    4198:	c9 f7       	brne	.-14     	; 0x418c <__ultoa_invert+0xa2>
    419a:	62 0f       	add	r22, r18
    419c:	73 1f       	adc	r23, r19
    419e:	84 1f       	adc	r24, r20
    41a0:	95 1f       	adc	r25, r21
    41a2:	a0 1d       	adc	r26, r0
    41a4:	08 95       	ret

000041a6 <__ctype_isfalse>:
    41a6:	99 27       	eor	r25, r25
    41a8:	88 27       	eor	r24, r24

000041aa <__ctype_istrue>:
    41aa:	08 95       	ret

000041ac <_exit>:
    41ac:	f8 94       	cli

000041ae <__stop_program>:
    41ae:	ff cf       	rjmp	.-2      	; 0x41ae <__stop_program>
