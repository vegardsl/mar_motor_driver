
mar_motor_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00802000  000033de  00003472  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000687  0080213c  0080213c  000035b0  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  00003650  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007773  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a5f  00000000  00000000  0000b27b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ff3  00000000  00000000  0000ccda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b38  00000000  00000000  00012cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003070d  00000000  00000000  00013808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003099  00000000  00000000  00043f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00046fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b31d  00000000  00000000  000473d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	29 c1       	rjmp	.+594    	; 0x258 <__bad_interrupt>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c1       	rjmp	.+586    	; 0x258 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c1       	rjmp	.+578    	; 0x258 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c1       	rjmp	.+574    	; 0x258 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1d c1       	rjmp	.+570    	; 0x258 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1b c1       	rjmp	.+566    	; 0x258 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c1       	rjmp	.+562    	; 0x258 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c1       	rjmp	.+558    	; 0x258 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c1       	rjmp	.+554    	; 0x258 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c1       	rjmp	.+550    	; 0x258 <__bad_interrupt>
      32:	00 00       	nop
      34:	11 c1       	rjmp	.+546    	; 0x258 <__bad_interrupt>
      36:	00 00       	nop
      38:	0f c1       	rjmp	.+542    	; 0x258 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0d c1       	rjmp	.+538    	; 0x258 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c1       	rjmp	.+534    	; 0x258 <__bad_interrupt>
      42:	00 00       	nop
      44:	09 c1       	rjmp	.+530    	; 0x258 <__bad_interrupt>
      46:	00 00       	nop
      48:	07 c1       	rjmp	.+526    	; 0x258 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	05 c1       	rjmp	.+522    	; 0x258 <__bad_interrupt>
      4e:	00 00       	nop
      50:	03 c1       	rjmp	.+518    	; 0x258 <__bad_interrupt>
      52:	00 00       	nop
      54:	01 c1       	rjmp	.+514    	; 0x258 <__bad_interrupt>
      56:	00 00       	nop
      58:	ff c0       	rjmp	.+510    	; 0x258 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fd c0       	rjmp	.+506    	; 0x258 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fb c0       	rjmp	.+502    	; 0x258 <__bad_interrupt>
      62:	00 00       	nop
      64:	f9 c0       	rjmp	.+498    	; 0x258 <__bad_interrupt>
      66:	00 00       	nop
      68:	f7 c0       	rjmp	.+494    	; 0x258 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f5 c0       	rjmp	.+490    	; 0x258 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f3 c0       	rjmp	.+486    	; 0x258 <__bad_interrupt>
      72:	00 00       	nop
      74:	f1 c0       	rjmp	.+482    	; 0x258 <__bad_interrupt>
      76:	00 00       	nop
      78:	ef c0       	rjmp	.+478    	; 0x258 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ed c0       	rjmp	.+474    	; 0x258 <__bad_interrupt>
      7e:	00 00       	nop
      80:	eb c0       	rjmp	.+470    	; 0x258 <__bad_interrupt>
      82:	00 00       	nop
      84:	e9 c0       	rjmp	.+466    	; 0x258 <__bad_interrupt>
      86:	00 00       	nop
      88:	e7 c0       	rjmp	.+462    	; 0x258 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e5 c0       	rjmp	.+458    	; 0x258 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e3 c0       	rjmp	.+454    	; 0x258 <__bad_interrupt>
      92:	00 00       	nop
      94:	e1 c0       	rjmp	.+450    	; 0x258 <__bad_interrupt>
      96:	00 00       	nop
      98:	df c0       	rjmp	.+446    	; 0x258 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dd c0       	rjmp	.+442    	; 0x258 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	db c0       	rjmp	.+438    	; 0x258 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d9 c0       	rjmp	.+434    	; 0x258 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d7 c0       	rjmp	.+430    	; 0x258 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d5 c0       	rjmp	.+426    	; 0x258 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d3 c0       	rjmp	.+422    	; 0x258 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d1 c0       	rjmp	.+418    	; 0x258 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cf c0       	rjmp	.+414    	; 0x258 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cd c0       	rjmp	.+410    	; 0x258 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cb c0       	rjmp	.+406    	; 0x258 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c9 c0       	rjmp	.+402    	; 0x258 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c7 c0       	rjmp	.+398    	; 0x258 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c5 c0       	rjmp	.+394    	; 0x258 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c3 c0       	rjmp	.+390    	; 0x258 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c1 c0       	rjmp	.+386    	; 0x258 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bf c0       	rjmp	.+382    	; 0x258 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bd c0       	rjmp	.+378    	; 0x258 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bb c0       	rjmp	.+374    	; 0x258 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b9 c0       	rjmp	.+370    	; 0x258 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b7 c0       	rjmp	.+366    	; 0x258 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b5 c0       	rjmp	.+362    	; 0x258 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b3 c0       	rjmp	.+358    	; 0x258 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b1 c0       	rjmp	.+354    	; 0x258 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	af c0       	rjmp	.+350    	; 0x258 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ad c0       	rjmp	.+346    	; 0x258 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ab c0       	rjmp	.+342    	; 0x258 <__bad_interrupt>
     102:	00 00       	nop
     104:	a9 c0       	rjmp	.+338    	; 0x258 <__bad_interrupt>
     106:	00 00       	nop
     108:	a7 c0       	rjmp	.+334    	; 0x258 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a5 c0       	rjmp	.+330    	; 0x258 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a3 c0       	rjmp	.+326    	; 0x258 <__bad_interrupt>
     112:	00 00       	nop
     114:	a1 c0       	rjmp	.+322    	; 0x258 <__bad_interrupt>
     116:	00 00       	nop
     118:	9f c0       	rjmp	.+318    	; 0x258 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9d c0       	rjmp	.+314    	; 0x258 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9b c0       	rjmp	.+310    	; 0x258 <__bad_interrupt>
     122:	00 00       	nop
     124:	99 c0       	rjmp	.+306    	; 0x258 <__bad_interrupt>
     126:	00 00       	nop
     128:	97 c0       	rjmp	.+302    	; 0x258 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	95 c0       	rjmp	.+298    	; 0x258 <__bad_interrupt>
     12e:	00 00       	nop
     130:	93 c0       	rjmp	.+294    	; 0x258 <__bad_interrupt>
     132:	00 00       	nop
     134:	91 c0       	rjmp	.+290    	; 0x258 <__bad_interrupt>
     136:	00 00       	nop
     138:	8f c0       	rjmp	.+286    	; 0x258 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8d c0       	rjmp	.+282    	; 0x258 <__bad_interrupt>
     13e:	00 00       	nop
     140:	8b c0       	rjmp	.+278    	; 0x258 <__bad_interrupt>
     142:	00 00       	nop
     144:	89 c0       	rjmp	.+274    	; 0x258 <__bad_interrupt>
     146:	00 00       	nop
     148:	87 c0       	rjmp	.+270    	; 0x258 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	85 c0       	rjmp	.+266    	; 0x258 <__bad_interrupt>
     14e:	00 00       	nop
     150:	83 c0       	rjmp	.+262    	; 0x258 <__bad_interrupt>
     152:	00 00       	nop
     154:	81 c0       	rjmp	.+258    	; 0x258 <__bad_interrupt>
     156:	00 00       	nop
     158:	7f c0       	rjmp	.+254    	; 0x258 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7d c0       	rjmp	.+250    	; 0x258 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7b c0       	rjmp	.+246    	; 0x258 <__bad_interrupt>
     162:	00 00       	nop
     164:	79 c0       	rjmp	.+242    	; 0x258 <__bad_interrupt>
     166:	00 00       	nop
     168:	77 c0       	rjmp	.+238    	; 0x258 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	75 c0       	rjmp	.+234    	; 0x258 <__bad_interrupt>
     16e:	00 00       	nop
     170:	73 c0       	rjmp	.+230    	; 0x258 <__bad_interrupt>
     172:	00 00       	nop
     174:	71 c0       	rjmp	.+226    	; 0x258 <__bad_interrupt>
     176:	00 00       	nop
     178:	6f c0       	rjmp	.+222    	; 0x258 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6d c0       	rjmp	.+218    	; 0x258 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6b c0       	rjmp	.+214    	; 0x258 <__bad_interrupt>
     182:	00 00       	nop
     184:	69 c0       	rjmp	.+210    	; 0x258 <__bad_interrupt>
     186:	00 00       	nop
     188:	67 c0       	rjmp	.+206    	; 0x258 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	65 c0       	rjmp	.+202    	; 0x258 <__bad_interrupt>
     18e:	00 00       	nop
     190:	63 c0       	rjmp	.+198    	; 0x258 <__bad_interrupt>
     192:	00 00       	nop
     194:	61 c0       	rjmp	.+194    	; 0x258 <__bad_interrupt>
     196:	00 00       	nop
     198:	5f c0       	rjmp	.+190    	; 0x258 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5d c0       	rjmp	.+186    	; 0x258 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5b c0       	rjmp	.+182    	; 0x258 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	59 c0       	rjmp	.+178    	; 0x258 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	57 c0       	rjmp	.+174    	; 0x258 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	55 c0       	rjmp	.+170    	; 0x258 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	53 c0       	rjmp	.+166    	; 0x258 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	51 c0       	rjmp	.+162    	; 0x258 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4f c0       	rjmp	.+158    	; 0x258 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4d c0       	rjmp	.+154    	; 0x258 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4b c0       	rjmp	.+150    	; 0x258 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	49 c0       	rjmp	.+146    	; 0x258 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	47 c0       	rjmp	.+142    	; 0x258 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	45 c0       	rjmp	.+138    	; 0x258 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	43 c0       	rjmp	.+134    	; 0x258 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	41 c0       	rjmp	.+130    	; 0x258 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3f c0       	rjmp	.+126    	; 0x258 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3d c0       	rjmp	.+122    	; 0x258 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3b c0       	rjmp	.+118    	; 0x258 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	39 c0       	rjmp	.+114    	; 0x258 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	37 c0       	rjmp	.+110    	; 0x258 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	35 c0       	rjmp	.+106    	; 0x258 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	33 c0       	rjmp	.+102    	; 0x258 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_125>
     1f8:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_126>
     1fc:	a7 09       	sbc	r26, r7
     1fe:	aa 09       	sbc	r26, r10
     200:	ad 09       	sbc	r26, r13
     202:	b0 09       	sbc	r27, r0
     204:	b3 09       	sbc	r27, r3
     206:	b6 09       	sbc	r27, r6
     208:	b9 09       	sbc	r27, r9

0000020a <__trampolines_end>:
     20a:	63 64       	ori	r22, 0x43	; 67
     20c:	69 6e       	ori	r22, 0xE9	; 233
     20e:	6f 70       	andi	r22, 0x0F	; 15
     210:	73 75       	andi	r23, 0x53	; 83
     212:	78 58       	subi	r23, 0x88	; 136
     214:	5b 00       	.word	0x005b	; ????

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df e5       	ldi	r29, 0x5F	; 95
     220:	de bf       	out	0x3e, r29	; 62
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	11 e2       	ldi	r17, 0x21	; 33
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	ee ed       	ldi	r30, 0xDE	; 222
     22e:	f3 e3       	ldi	r31, 0x33	; 51
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	ac 33       	cpi	r26, 0x3C	; 60
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	27 e2       	ldi	r18, 0x27	; 39
     242:	ac e3       	ldi	r26, 0x3C	; 60
     244:	b1 e2       	ldi	r27, 0x21	; 33
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a3 3c       	cpi	r26, 0xC3	; 195
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>
     250:	0e 94 39 11 	call	0x2272	; 0x2272 <main>
     254:	0c 94 ed 19 	jmp	0x33da	; 0x33da <_exit>

00000258 <__bad_interrupt>:
     258:	d3 ce       	rjmp	.-602    	; 0x0 <__vectors>

0000025a <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	00 d0       	rcall	.+0      	; 0x264 <sysclk_init+0xa>
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	64 e0       	ldi	r22, 0x04	; 4
     26c:	81 e4       	ldi	r24, 0x41	; 65
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	77 d7       	rcall	.+3822   	; 0x1160 <ccp_write_io>
     272:	6c e1       	ldi	r22, 0x1C	; 28
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	79 d7       	rcall	.+3826   	; 0x116c <nvm_read_byte>
     27a:	8a 83       	std	Y+2, r24	; 0x02
     27c:	6d e1       	ldi	r22, 0x1D	; 29
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	74 d7       	rcall	.+3816   	; 0x116c <nvm_read_byte>
     284:	89 83       	std	Y+1, r24	; 0x01
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	21 f4       	brne	.+8      	; 0x296 <sysclk_init+0x3c>
     28e:	80 e4       	ldi	r24, 0x40	; 64
     290:	93 e2       	ldi	r25, 0x23	; 35
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	9a 83       	std	Y+2, r25	; 0x02
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	8b 83       	std	Y+3, r24	; 0x03
     29c:	9c 83       	std	Y+4, r25	; 0x04
     29e:	e0 e6       	ldi	r30, 0x60	; 96
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	82 83       	std	Z+2, r24	; 0x02
     2a4:	8c 81       	ldd	r24, Y+4	; 0x04
     2a6:	83 83       	std	Z+3, r24	; 0x03
     2a8:	9f b7       	in	r25, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	e0 e5       	ldi	r30, 0x50	; 80
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 83       	st	Z, r24
     2b6:	9f bf       	out	0x3f, r25	; 63
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	81 ff       	sbrs	r24, 1
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <sysclk_init+0x5e>
     2be:	9f b7       	in	r25, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	00 e5       	ldi	r16, 0x50	; 80
     2c4:	10 e0       	ldi	r17, 0x00	; 0
     2c6:	d8 01       	movw	r26, r16
     2c8:	16 96       	adiw	r26, 0x06	; 6
     2ca:	8c 91       	ld	r24, X
     2cc:	16 97       	sbiw	r26, 0x06	; 6
     2ce:	89 7f       	andi	r24, 0xF9	; 249
     2d0:	16 96       	adiw	r26, 0x06	; 6
     2d2:	8c 93       	st	X, r24
     2d4:	16 97       	sbiw	r26, 0x06	; 6
     2d6:	e0 e6       	ldi	r30, 0x60	; 96
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 e8       	ldi	r24, 0x80	; 128
     2dc:	85 83       	std	Z+5, r24	; 0x05
     2de:	8b eb       	ldi	r24, 0xBB	; 187
     2e0:	86 83       	std	Z+6, r24	; 0x06
     2e2:	16 96       	adiw	r26, 0x06	; 6
     2e4:	8c 91       	ld	r24, X
     2e6:	16 97       	sbiw	r26, 0x06	; 6
     2e8:	84 60       	ori	r24, 0x04	; 4
     2ea:	16 96       	adiw	r26, 0x06	; 6
     2ec:	8c 93       	st	X, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	80 83       	st	Z, r24
     2f4:	9f bf       	out	0x3f, r25	; 63
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	80 e4       	ldi	r24, 0x40	; 64
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	31 d7       	rcall	.+3682   	; 0x1160 <ccp_write_io>
     2fe:	9f b7       	in	r25, 0x3f	; 63
     300:	f8 94       	cli
     302:	f8 01       	movw	r30, r16
     304:	80 81       	ld	r24, Z
     306:	8e 7f       	andi	r24, 0xFE	; 254
     308:	80 83       	st	Z, r24
     30a:	9f bf       	out	0x3f, r25	; 63
     30c:	24 96       	adiw	r28, 0x04	; 4
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	de bf       	out	0x3e, r29	; 62
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <sysclk_enable_module>:
     31c:	9f b7       	in	r25, 0x3f	; 63
     31e:	f8 94       	cli
     320:	e8 2f       	mov	r30, r24
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	e0 59       	subi	r30, 0x90	; 144
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	60 95       	com	r22
     32a:	80 81       	ld	r24, Z
     32c:	68 23       	and	r22, r24
     32e:	60 83       	st	Z, r22
     330:	9f bf       	out	0x3f, r25	; 63
     332:	08 95       	ret

00000334 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	11 f0       	breq	.+4      	; 0x33c <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	01 c0       	rjmp	.+2      	; 0x33e <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     33c:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     33e:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     342:	81 fd       	sbrc	r24, 1
     344:	26 c0       	rjmp	.+76     	; 0x392 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     346:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     348:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     34a:	e0 e5       	ldi	r30, 0x50	; 80
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	82 60       	ori	r24, 0x02	; 2
     352:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     354:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     356:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     358:	81 ff       	sbrs	r24, 1
     35a:	fd cf       	rjmp	.-6      	; 0x356 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     35c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     35e:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     360:	a0 e5       	ldi	r26, 0x50	; 80
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	16 96       	adiw	r26, 0x06	; 6
     366:	8c 91       	ld	r24, X
     368:	16 97       	sbiw	r26, 0x06	; 6
     36a:	89 7f       	andi	r24, 0xF9	; 249
     36c:	16 96       	adiw	r26, 0x06	; 6
     36e:	8c 93       	st	X, r24
     370:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     372:	e0 e6       	ldi	r30, 0x60	; 96
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     37a:	8b eb       	ldi	r24, 0xBB	; 187
     37c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     37e:	16 96       	adiw	r26, 0x06	; 6
     380:	8c 91       	ld	r24, X
     382:	16 97       	sbiw	r26, 0x06	; 6
     384:	84 60       	ori	r24, 0x04	; 4
     386:	16 96       	adiw	r26, 0x06	; 6
     388:	8c 93       	st	X, r24
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     38a:	80 81       	ld	r24, Z
     38c:	81 60       	ori	r24, 0x01	; 1
     38e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     390:	9f bf       	out	0x3f, r25	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     392:	63 60       	ori	r22, 0x03	; 3
     394:	84 e4       	ldi	r24, 0x44	; 68
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	e3 d6       	rcall	.+3526   	; 0x1160 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     39a:	60 e4       	ldi	r22, 0x40	; 64
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	be cf       	rjmp	.-132    	; 0x31c <sysclk_enable_module>
     3a0:	08 95       	ret

000003a2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	fc 01       	movw	r30, r24
     3a8:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     3ae:	c6 2f       	mov	r28, r22
     3b0:	d0 e0       	ldi	r29, 0x00	; 0
     3b2:	de 01       	movw	r26, r28
     3b4:	02 2e       	mov	r0, r18
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <ioport_configure_port_pin+0x1a>
     3b8:	b5 95       	asr	r27
     3ba:	a7 95       	ror	r26
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <ioport_configure_port_pin+0x16>
     3c0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     3c2:	50 83       	st	Z, r21
     3c4:	2f 5f       	subi	r18, 0xFF	; 255
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     3ca:	28 30       	cpi	r18, 0x08	; 8
     3cc:	31 05       	cpc	r19, r1
     3ce:	89 f7       	brne	.-30     	; 0x3b2 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     3d0:	40 ff       	sbrs	r20, 0
     3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     3d4:	41 ff       	sbrs	r20, 1
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     3d8:	fc 01       	movw	r30, r24
     3da:	65 83       	std	Z+5, r22	; 0x05
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     3de:	fc 01       	movw	r30, r24
     3e0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     3e2:	fc 01       	movw	r30, r24
     3e4:	61 83       	std	Z+1, r22	; 0x01
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     3e8:	fc 01       	movw	r30, r24
     3ea:	62 83       	std	Z+2, r22	; 0x02
	}
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     3f2:	80 91 50 26 	lds	r24, 0x2650
     3f6:	81 50       	subi	r24, 0x01	; 1
     3f8:	80 93 50 26 	sts	0x2650, r24
     3fc:	08 95       	ret

000003fe <udi_cdc_data_setup>:
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	08 95       	ret

00000402 <udi_cdc_getsetting>:
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	08 95       	ret

00000406 <udi_cdc_comm_setup>:
     406:	80 91 a9 27 	lds	r24, 0x27A9
     40a:	88 23       	and	r24, r24
     40c:	cc f4       	brge	.+50     	; 0x440 <udi_cdc_comm_setup+0x3a>
     40e:	80 76       	andi	r24, 0x60	; 96
     410:	80 32       	cpi	r24, 0x20	; 32
     412:	b9 f5       	brne	.+110    	; 0x482 <udi_cdc_comm_setup+0x7c>
     414:	80 91 aa 27 	lds	r24, 0x27AA
     418:	81 32       	cpi	r24, 0x21	; 33
     41a:	a9 f5       	brne	.+106    	; 0x486 <udi_cdc_comm_setup+0x80>
     41c:	80 91 af 27 	lds	r24, 0x27AF
     420:	90 91 b0 27 	lds	r25, 0x27B0
     424:	07 97       	sbiw	r24, 0x07	; 7
     426:	89 f5       	brne	.+98     	; 0x48a <udi_cdc_comm_setup+0x84>
     428:	e9 ea       	ldi	r30, 0xA9	; 169
     42a:	f7 e2       	ldi	r31, 0x27	; 39
     42c:	8e e5       	ldi	r24, 0x5E	; 94
     42e:	96 e2       	ldi	r25, 0x26	; 38
     430:	80 87       	std	Z+8, r24	; 0x08
     432:	91 87       	std	Z+9, r25	; 0x09
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	82 87       	std	Z+10, r24	; 0x0a
     43a:	93 87       	std	Z+11, r25	; 0x0b
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	08 95       	ret
     440:	80 76       	andi	r24, 0x60	; 96
     442:	80 32       	cpi	r24, 0x20	; 32
     444:	21 f5       	brne	.+72     	; 0x48e <udi_cdc_comm_setup+0x88>
     446:	80 91 aa 27 	lds	r24, 0x27AA
     44a:	80 32       	cpi	r24, 0x20	; 32
     44c:	21 f0       	breq	.+8      	; 0x456 <udi_cdc_comm_setup+0x50>
     44e:	82 32       	cpi	r24, 0x22	; 34
     450:	01 f1       	breq	.+64     	; 0x492 <udi_cdc_comm_setup+0x8c>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
     456:	80 91 af 27 	lds	r24, 0x27AF
     45a:	90 91 b0 27 	lds	r25, 0x27B0
     45e:	07 97       	sbiw	r24, 0x07	; 7
     460:	d1 f4       	brne	.+52     	; 0x496 <udi_cdc_comm_setup+0x90>
     462:	e9 ea       	ldi	r30, 0xA9	; 169
     464:	f7 e2       	ldi	r31, 0x27	; 39
     466:	8d e4       	ldi	r24, 0x4D	; 77
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	84 87       	std	Z+12, r24	; 0x0c
     46c:	95 87       	std	Z+13, r25	; 0x0d
     46e:	8e e5       	ldi	r24, 0x5E	; 94
     470:	96 e2       	ldi	r25, 0x26	; 38
     472:	80 87       	std	Z+8, r24	; 0x08
     474:	91 87       	std	Z+9, r25	; 0x09
     476:	87 e0       	ldi	r24, 0x07	; 7
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	82 87       	std	Z+10, r24	; 0x0a
     47c:	93 87       	std	Z+11, r25	; 0x0b
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	08 95       	ret
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	08 95       	ret
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret

0000049a <udi_cdc_line_coding_received>:
     49a:	08 95       	ret

0000049c <udi_cdc_comm_enable>:
     49c:	10 92 50 26 	sts	0x2650, r1
     4a0:	10 92 5c 26 	sts	0x265C, r1
     4a4:	10 92 5d 26 	sts	0x265D, r1
     4a8:	e2 e5       	ldi	r30, 0x52	; 82
     4aa:	f6 e2       	ldi	r31, 0x26	; 38
     4ac:	81 ea       	ldi	r24, 0xA1	; 161
     4ae:	80 83       	st	Z, r24
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	81 83       	std	Z+1, r24	; 0x01
     4b4:	12 82       	std	Z+2, r1	; 0x02
     4b6:	13 82       	std	Z+3, r1	; 0x03
     4b8:	14 82       	std	Z+4, r1	; 0x04
     4ba:	15 82       	std	Z+5, r1	; 0x05
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	86 83       	std	Z+6, r24	; 0x06
     4c2:	97 83       	std	Z+7, r25	; 0x07
     4c4:	10 86       	std	Z+8, r1	; 0x08
     4c6:	11 86       	std	Z+9, r1	; 0x09
     4c8:	ee e5       	ldi	r30, 0x5E	; 94
     4ca:	f6 e2       	ldi	r31, 0x26	; 38
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	92 ec       	ldi	r25, 0xC2	; 194
     4d0:	a1 e0       	ldi	r26, 0x01	; 1
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	80 83       	st	Z, r24
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	a2 83       	std	Z+2, r26	; 0x02
     4da:	b3 83       	std	Z+3, r27	; 0x03
     4dc:	14 82       	std	Z+4, r1	; 0x04
     4de:	15 82       	std	Z+5, r1	; 0x05
     4e0:	88 e0       	ldi	r24, 0x08	; 8
     4e2:	86 83       	std	Z+6, r24	; 0x06
     4e4:	dd d5       	rcall	.+3002   	; 0x10a0 <stdio_usb_enable>
     4e6:	88 23       	and	r24, r24
     4e8:	29 f0       	breq	.+10     	; 0x4f4 <udi_cdc_comm_enable+0x58>
     4ea:	90 91 50 26 	lds	r25, 0x2650
     4ee:	9f 5f       	subi	r25, 0xFF	; 255
     4f0:	90 93 50 26 	sts	0x2650, r25
     4f4:	08 95       	ret

000004f6 <udi_cdc_tx_send>:
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	80 91 3d 21 	lds	r24, 0x213D
     504:	81 11       	cpse	r24, r1
     506:	6c c0       	rjmp	.+216    	; 0x5e0 <udi_cdc_tx_send+0xea>
     508:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <udd_is_high_speed>
     50c:	88 23       	and	r24, r24
     50e:	51 f0       	breq	.+20     	; 0x524 <udi_cdc_tx_send+0x2e>
     510:	c0 91 3e 21 	lds	r28, 0x213E
     514:	d0 91 3f 21 	lds	r29, 0x213F
     518:	0e 94 65 0c 	call	0x18ca	; 0x18ca <udd_get_micro_frame_number>
     51c:	c8 17       	cp	r28, r24
     51e:	d9 07       	cpc	r29, r25
     520:	59 f4       	brne	.+22     	; 0x538 <udi_cdc_tx_send+0x42>
     522:	5e c0       	rjmp	.+188    	; 0x5e0 <udi_cdc_tx_send+0xea>
     524:	c0 91 3e 21 	lds	r28, 0x213E
     528:	d0 91 3f 21 	lds	r29, 0x213F
     52c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <udd_get_frame_number>
     530:	c8 17       	cp	r28, r24
     532:	d9 07       	cpc	r29, r25
     534:	09 f4       	brne	.+2      	; 0x538 <udi_cdc_tx_send+0x42>
     536:	54 c0       	rjmp	.+168    	; 0x5e0 <udi_cdc_tx_send+0xea>
     538:	8f b7       	in	r24, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	c0 91 40 21 	lds	r28, 0x2140
     540:	90 91 3c 21 	lds	r25, 0x213C
     544:	91 11       	cpse	r25, r1
     546:	06 c0       	rjmp	.+12     	; 0x554 <udi_cdc_tx_send+0x5e>
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	c1 11       	cpse	r28, r1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	90 93 40 21 	sts	0x2140, r25
     552:	04 c0       	rjmp	.+8      	; 0x55c <udi_cdc_tx_send+0x66>
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	c1 11       	cpse	r28, r1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	c9 2f       	mov	r28, r25
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	90 93 3d 21 	sts	0x213D, r25
     562:	8f bf       	out	0x3f, r24	; 63
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	fe 01       	movw	r30, r28
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	ef 5b       	subi	r30, 0xBF	; 191
     56e:	fe 4d       	sbci	r31, 0xDE	; 222
     570:	ff 24       	eor	r15, r15
     572:	f3 94       	inc	r15
     574:	80 81       	ld	r24, Z
     576:	91 81       	ldd	r25, Z+1	; 0x01
     578:	80 34       	cpi	r24, 0x40	; 64
     57a:	91 40       	sbci	r25, 0x01	; 1
     57c:	09 f4       	brne	.+2      	; 0x580 <udi_cdc_tx_send+0x8a>
     57e:	f1 2c       	mov	r15, r1
     580:	ff 20       	and	r15, r15
     582:	91 f0       	breq	.+36     	; 0x5a8 <udi_cdc_tx_send+0xb2>
     584:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <udd_is_high_speed>
     588:	88 23       	and	r24, r24
     58a:	39 f0       	breq	.+14     	; 0x59a <udi_cdc_tx_send+0xa4>
     58c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <udd_get_micro_frame_number>
     590:	80 93 3e 21 	sts	0x213E, r24
     594:	90 93 3f 21 	sts	0x213F, r25
     598:	0b c0       	rjmp	.+22     	; 0x5b0 <udi_cdc_tx_send+0xba>
     59a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <udd_get_frame_number>
     59e:	80 93 3e 21 	sts	0x213E, r24
     5a2:	90 93 3f 21 	sts	0x213F, r25
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <udi_cdc_tx_send+0xba>
     5a8:	10 92 3e 21 	sts	0x213E, r1
     5ac:	10 92 3f 21 	sts	0x213F, r1
     5b0:	fe 01       	movw	r30, r28
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ef 5b       	subi	r30, 0xBF	; 191
     5b8:	fe 4d       	sbci	r31, 0xDE	; 222
     5ba:	20 81       	ld	r18, Z
     5bc:	31 81       	ldd	r19, Z+1	; 0x01
     5be:	80 e4       	ldi	r24, 0x40	; 64
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	c8 9f       	mul	r28, r24
     5c4:	a0 01       	movw	r20, r0
     5c6:	c9 9f       	mul	r28, r25
     5c8:	50 0d       	add	r21, r0
     5ca:	d8 9f       	mul	r29, r24
     5cc:	50 0d       	add	r21, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	4a 5b       	subi	r20, 0xBA	; 186
     5d2:	5e 4d       	sbci	r21, 0xDE	; 222
     5d4:	06 ef       	ldi	r16, 0xF6	; 246
     5d6:	12 e0       	ldi	r17, 0x02	; 2
     5d8:	6f 2d       	mov	r22, r15
     5da:	81 e8       	ldi	r24, 0x81	; 129
     5dc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <udd_ep_run>
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	08 95       	ret

000005ec <udi_cdc_data_sent>:
     5ec:	81 11       	cpse	r24, r1
     5ee:	15 c0       	rjmp	.+42     	; 0x61a <udi_cdc_data_sent+0x2e>
     5f0:	20 91 40 21 	lds	r18, 0x2140
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	22 23       	and	r18, r18
     5fa:	11 f0       	breq	.+4      	; 0x600 <udi_cdc_data_sent+0x14>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	fc 01       	movw	r30, r24
     606:	ef 5b       	subi	r30, 0xBF	; 191
     608:	fe 4d       	sbci	r31, 0xDE	; 222
     60a:	10 82       	st	Z, r1
     60c:	11 82       	std	Z+1, r1	; 0x01
     60e:	10 92 3c 21 	sts	0x213C, r1
     612:	10 92 3d 21 	sts	0x213D, r1
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	6e cf       	rjmp	.-292    	; 0x4f6 <udi_cdc_tx_send>
     61a:	08 95       	ret

0000061c <udi_cdc_data_sof_notify>:
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	6b cf       	rjmp	.-298    	; 0x4f6 <udi_cdc_tx_send>
     620:	08 95       	ret

00000622 <udi_cdc_data_disable>:
     622:	80 91 4f 26 	lds	r24, 0x264F
     626:	81 50       	subi	r24, 0x01	; 1
     628:	80 93 4f 26 	sts	0x264F, r24
     62c:	80 91 4f 26 	lds	r24, 0x264F
     630:	3b d5       	rcall	.+2678   	; 0x10a8 <stdio_usb_disable>
     632:	10 92 4e 26 	sts	0x264E, r1
     636:	08 95       	ret

00000638 <udi_cdc_multi_is_rx_ready>:
     638:	9f b7       	in	r25, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	20 91 c7 23 	lds	r18, 0x23C7
     640:	30 91 c8 23 	lds	r19, 0x23C8
     644:	e0 91 c9 23 	lds	r30, 0x23C9
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	e6 53       	subi	r30, 0x36	; 54
     650:	fc 4d       	sbci	r31, 0xDC	; 220
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	40 81       	ld	r20, Z
     656:	51 81       	ldd	r21, Z+1	; 0x01
     658:	24 17       	cp	r18, r20
     65a:	35 07       	cpc	r19, r21
     65c:	08 f0       	brcs	.+2      	; 0x660 <udi_cdc_multi_is_rx_ready+0x28>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	9f bf       	out	0x3f, r25	; 63
     662:	08 95       	ret

00000664 <udi_cdc_rx_start>:
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	9f b7       	in	r25, 0x3f	; 63
     66e:	f8 94       	cli
     670:	20 91 c9 23 	lds	r18, 0x23C9
     674:	80 91 c6 23 	lds	r24, 0x23C6
     678:	81 11       	cpse	r24, r1
     67a:	10 c0       	rjmp	.+32     	; 0x69c <udi_cdc_rx_start+0x38>
     67c:	60 91 c7 23 	lds	r22, 0x23C7
     680:	70 91 c8 23 	lds	r23, 0x23C8
     684:	c2 2f       	mov	r28, r18
     686:	d0 e0       	ldi	r29, 0x00	; 0
     688:	fe 01       	movw	r30, r28
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e6 53       	subi	r30, 0x36	; 54
     690:	fc 4d       	sbci	r31, 0xDC	; 220
     692:	40 81       	ld	r20, Z
     694:	51 81       	ldd	r21, Z+1	; 0x01
     696:	64 17       	cp	r22, r20
     698:	75 07       	cpc	r23, r21
     69a:	18 f4       	brcc	.+6      	; 0x6a2 <udi_cdc_rx_start+0x3e>
     69c:	9f bf       	out	0x3f, r25	; 63
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	22 c0       	rjmp	.+68     	; 0x6e6 <udi_cdc_rx_start+0x82>
     6a2:	10 92 c7 23 	sts	0x23C7, r1
     6a6:	10 92 c8 23 	sts	0x23C8, r1
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	21 11       	cpse	r18, r1
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	80 93 c9 23 	sts	0x23C9, r24
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 c6 23 	sts	0x23C6, r24
     6ba:	9f bf       	out	0x3f, r25	; 63
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	bc df       	rcall	.-136    	; 0x638 <udi_cdc_multi_is_rx_ready>
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	c8 9f       	mul	r28, r24
     6c6:	a0 01       	movw	r20, r0
     6c8:	c9 9f       	mul	r28, r25
     6ca:	50 0d       	add	r21, r0
     6cc:	d8 9f       	mul	r29, r24
     6ce:	50 0d       	add	r21, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	42 53       	subi	r20, 0x32	; 50
     6d4:	5c 4d       	sbci	r21, 0xDC	; 220
     6d6:	08 ea       	ldi	r16, 0xA8	; 168
     6d8:	13 e0       	ldi	r17, 0x03	; 3
     6da:	20 e4       	ldi	r18, 0x40	; 64
     6dc:	31 e0       	ldi	r19, 0x01	; 1
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <udd_ep_run>
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <udi_cdc_data_enable>:
     6f0:	10 92 4f 26 	sts	0x264F, r1
     6f4:	10 92 3d 21 	sts	0x213D, r1
     6f8:	10 92 3c 21 	sts	0x213C, r1
     6fc:	10 92 40 21 	sts	0x2140, r1
     700:	e1 e4       	ldi	r30, 0x41	; 65
     702:	f1 e2       	ldi	r31, 0x21	; 33
     704:	10 82       	st	Z, r1
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	12 82       	std	Z+2, r1	; 0x02
     70a:	13 82       	std	Z+3, r1	; 0x03
     70c:	10 92 3e 21 	sts	0x213E, r1
     710:	10 92 3f 21 	sts	0x213F, r1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	ef de       	rcall	.-546    	; 0x4f6 <udi_cdc_tx_send>
     718:	10 92 c6 23 	sts	0x23C6, r1
     71c:	10 92 c9 23 	sts	0x23C9, r1
     720:	10 92 ca 23 	sts	0x23CA, r1
     724:	10 92 cb 23 	sts	0x23CB, r1
     728:	10 92 c7 23 	sts	0x23C7, r1
     72c:	10 92 c8 23 	sts	0x23C8, r1
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	98 df       	rcall	.-208    	; 0x664 <udi_cdc_rx_start>
     734:	88 23       	and	r24, r24
     736:	59 f0       	breq	.+22     	; 0x74e <udi_cdc_data_enable+0x5e>
     738:	90 91 4f 26 	lds	r25, 0x264F
     73c:	9f 5f       	subi	r25, 0xFF	; 255
     73e:	90 93 4f 26 	sts	0x264F, r25
     742:	90 91 4f 26 	lds	r25, 0x264F
     746:	91 30       	cpi	r25, 0x01	; 1
     748:	11 f4       	brne	.+4      	; 0x74e <udi_cdc_data_enable+0x5e>
     74a:	90 93 4e 26 	sts	0x264E, r25
     74e:	08 95       	ret

00000750 <udi_cdc_data_received>:
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	81 11       	cpse	r24, r1
     756:	26 c0       	rjmp	.+76     	; 0x7a4 <udi_cdc_data_received+0x54>
     758:	80 91 c9 23 	lds	r24, 0x23C9
     75c:	e1 e0       	ldi	r30, 0x01	; 1
     75e:	81 11       	cpse	r24, r1
     760:	e0 e0       	ldi	r30, 0x00	; 0
     762:	84 2f       	mov	r24, r20
     764:	61 15       	cp	r22, r1
     766:	71 05       	cpc	r23, r1
     768:	91 f4       	brne	.+36     	; 0x78e <udi_cdc_data_received+0x3e>
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	20 e4       	ldi	r18, 0x40	; 64
     76e:	31 e0       	ldi	r19, 0x01	; 1
     770:	e2 9f       	mul	r30, r18
     772:	a0 01       	movw	r20, r0
     774:	e3 9f       	mul	r30, r19
     776:	50 0d       	add	r21, r0
     778:	f2 9f       	mul	r31, r18
     77a:	50 0d       	add	r21, r0
     77c:	11 24       	eor	r1, r1
     77e:	42 53       	subi	r20, 0x32	; 50
     780:	5c 4d       	sbci	r21, 0xDC	; 220
     782:	08 ea       	ldi	r16, 0xA8	; 168
     784:	13 e0       	ldi	r17, 0x03	; 3
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <udd_ep_run>
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <udi_cdc_data_received+0x54>
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e6 53       	subi	r30, 0x36	; 54
     796:	fc 4d       	sbci	r31, 0xDC	; 220
     798:	60 83       	st	Z, r22
     79a:	71 83       	std	Z+1, r23	; 0x01
     79c:	10 92 c6 23 	sts	0x23C6, r1
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	60 df       	rcall	.-320    	; 0x664 <udi_cdc_rx_start>
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <udi_cdc_multi_getc>:
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	11 e0       	ldi	r17, 0x01	; 1
     7b6:	80 91 64 26 	lds	r24, 0x2664
     7ba:	89 30       	cpi	r24, 0x09	; 9
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <udi_cdc_multi_getc+0x16>
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	c0 e4       	ldi	r28, 0x40	; 64
     7c6:	d1 e0       	ldi	r29, 0x01	; 1
     7c8:	9f b7       	in	r25, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	20 91 c7 23 	lds	r18, 0x23C7
     7d0:	30 91 c8 23 	lds	r19, 0x23C8
     7d4:	80 91 c9 23 	lds	r24, 0x23C9
     7d8:	9f bf       	out	0x3f, r25	; 63
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e6 53       	subi	r30, 0x36	; 54
     7e4:	fc 4d       	sbci	r31, 0xDC	; 220
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	24 17       	cp	r18, r20
     7ec:	35 07       	cpc	r19, r21
     7ee:	30 f0       	brcs	.+12     	; 0x7fc <udi_cdc_multi_getc+0x52>
     7f0:	80 91 4e 26 	lds	r24, 0x264E
     7f4:	81 11       	cpse	r24, r1
     7f6:	e8 cf       	rjmp	.-48     	; 0x7c8 <udi_cdc_multi_getc+0x1e>
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	1e c0       	rjmp	.+60     	; 0x838 <udi_cdc_multi_getc+0x8e>
     7fc:	8c 9f       	mul	r24, r28
     7fe:	f0 01       	movw	r30, r0
     800:	8d 9f       	mul	r24, r29
     802:	f0 0d       	add	r31, r0
     804:	9c 9f       	mul	r25, r28
     806:	f0 0d       	add	r31, r0
     808:	11 24       	eor	r1, r1
     80a:	e2 0f       	add	r30, r18
     80c:	f3 1f       	adc	r31, r19
     80e:	e2 53       	subi	r30, 0x32	; 50
     810:	fc 4d       	sbci	r31, 0xDC	; 220
     812:	80 81       	ld	r24, Z
     814:	7b 01       	movw	r14, r22
     816:	e8 2a       	or	r14, r24
     818:	2f 5f       	subi	r18, 0xFF	; 255
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	20 93 c7 23 	sts	0x23C7, r18
     820:	30 93 c8 23 	sts	0x23C8, r19
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	1e df       	rcall	.-452    	; 0x664 <udi_cdc_rx_start>
     828:	11 23       	and	r17, r17
     82a:	21 f0       	breq	.+8      	; 0x834 <udi_cdc_multi_getc+0x8a>
     82c:	7e 2d       	mov	r23, r14
     82e:	66 27       	eor	r22, r22
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	ca cf       	rjmp	.-108    	; 0x7c8 <udi_cdc_multi_getc+0x1e>
     834:	8e 2d       	mov	r24, r14
     836:	9f 2d       	mov	r25, r15
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <udi_cdc_getc>:
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	b1 cf       	rjmp	.-158    	; 0x7aa <udi_cdc_multi_getc>
     848:	08 95       	ret

0000084a <udi_cdc_multi_is_tx_ready>:
     84a:	e0 91 40 21 	lds	r30, 0x2140
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	ef 5b       	subi	r30, 0xBF	; 191
     856:	fe 4d       	sbci	r31, 0xDE	; 222
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	80 34       	cpi	r24, 0x40	; 64
     85e:	91 40       	sbci	r25, 0x01	; 1
     860:	19 f5       	brne	.+70     	; 0x8a8 <udi_cdc_multi_is_tx_ready+0x5e>
     862:	80 91 3c 21 	lds	r24, 0x213C
     866:	81 11       	cpse	r24, r1
     868:	10 c0       	rjmp	.+32     	; 0x88a <udi_cdc_multi_is_tx_ready+0x40>
     86a:	8f b7       	in	r24, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	90 91 3d 21 	lds	r25, 0x213D
     872:	91 11       	cpse	r25, r1
     874:	09 c0       	rjmp	.+18     	; 0x888 <udi_cdc_multi_is_tx_ready+0x3e>
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	90 93 3c 21 	sts	0x213C, r25
     87c:	20 91 40 21 	lds	r18, 0x2140
     880:	21 11       	cpse	r18, r1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	90 93 40 21 	sts	0x2140, r25
     888:	8f bf       	out	0x3f, r24	; 63
     88a:	e0 91 40 21 	lds	r30, 0x2140
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ef 5b       	subi	r30, 0xBF	; 191
     896:	fe 4d       	sbci	r31, 0xDE	; 222
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	20 81       	ld	r18, Z
     89c:	31 81       	ldd	r19, Z+1	; 0x01
     89e:	20 34       	cpi	r18, 0x40	; 64
     8a0:	31 40       	sbci	r19, 0x01	; 1
     8a2:	19 f4       	brne	.+6      	; 0x8aa <udi_cdc_multi_is_tx_ready+0x60>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	08 95       	ret

000008ac <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	f6 2e       	mov	r15, r22
     8b8:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8ba:	01 e0       	ldi	r16, 0x01	; 1
     8bc:	80 91 64 26 	lds	r24, 0x2664
     8c0:	89 30       	cpi	r24, 0x09	; 9
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <udi_cdc_multi_putc+0x1a>
     8c4:	00 e0       	ldi	r16, 0x00	; 0
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8c6:	c0 e4       	ldi	r28, 0x40	; 64
     8c8:	d1 e0       	ldi	r29, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	be df       	rcall	.-132    	; 0x84a <udi_cdc_multi_is_tx_ready>
     8ce:	81 11       	cpse	r24, r1
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
     8d2:	80 91 4e 26 	lds	r24, 0x264E
     8d6:	81 11       	cpse	r24, r1
     8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <udi_cdc_multi_putc+0x1e>
			return false;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	28 c0       	rjmp	.+80     	; 0x930 <udi_cdc_multi_putc+0x84>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8e0:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     8e2:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8e4:	20 91 40 21 	lds	r18, 0x2140
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ef 5b       	subi	r30, 0xBF	; 191
     8f2:	fe 4d       	sbci	r31, 0xDE	; 222
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	bc 01       	movw	r22, r24
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	60 83       	st	Z, r22
     900:	71 83       	std	Z+1, r23	; 0x01
     902:	2c 9f       	mul	r18, r28
     904:	f0 01       	movw	r30, r0
     906:	2d 9f       	mul	r18, r29
     908:	f0 0d       	add	r31, r0
     90a:	3c 9f       	mul	r19, r28
     90c:	f0 0d       	add	r31, r0
     90e:	11 24       	eor	r1, r1
     910:	8e 0f       	add	r24, r30
     912:	9f 1f       	adc	r25, r31
     914:	fc 01       	movw	r30, r24
     916:	ea 5b       	subi	r30, 0xBA	; 186
     918:	fe 4d       	sbci	r31, 0xDE	; 222
     91a:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     91c:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     91e:	00 23       	and	r16, r16
     920:	29 f0       	breq	.+10     	; 0x92c <udi_cdc_multi_putc+0x80>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     922:	f1 2e       	mov	r15, r17
     924:	11 0f       	add	r17, r17
     926:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     928:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     92a:	cf cf       	rjmp	.-98     	; 0x8ca <udi_cdc_multi_putc+0x1e>
	}
	return true;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	08 95       	ret

0000093c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     93c:	bc 01       	movw	r22, r24
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	b5 cf       	rjmp	.-150    	; 0x8ac <udi_cdc_multi_putc>
}
     942:	08 95       	ret

00000944 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     944:	e0 91 6a 26 	lds	r30, 0x266A
     948:	f0 91 6b 26 	lds	r31, 0x266B
     94c:	01 90       	ld	r0, Z+
     94e:	f0 81       	ld	r31, Z
     950:	e0 2d       	mov	r30, r0
     952:	22 81       	ldd	r18, Z+2	; 0x02
     954:	33 81       	ldd	r19, Z+3	; 0x03
     956:	2e 0f       	add	r18, r30
     958:	3f 1f       	adc	r19, r31
     95a:	fc 01       	movw	r30, r24
     95c:	40 81       	ld	r20, Z
     95e:	e4 0f       	add	r30, r20
     960:	f1 1d       	adc	r31, r1
     962:	e2 17       	cp	r30, r18
     964:	f3 07       	cpc	r31, r19
     966:	b8 f4       	brcc	.+46     	; 0x996 <udc_next_desc_in_iface+0x52>
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	84 30       	cpi	r24, 0x04	; 4
     96c:	b9 f0       	breq	.+46     	; 0x99c <udc_next_desc_in_iface+0x58>
     96e:	86 13       	cpse	r24, r22
     970:	09 c0       	rjmp	.+18     	; 0x984 <udc_next_desc_in_iface+0x40>
     972:	05 c0       	rjmp	.+10     	; 0x97e <udc_next_desc_in_iface+0x3a>
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	84 30       	cpi	r24, 0x04	; 4
     978:	a1 f0       	breq	.+40     	; 0x9a2 <udc_next_desc_in_iface+0x5e>
     97a:	86 13       	cpse	r24, r22
     97c:	03 c0       	rjmp	.+6      	; 0x984 <udc_next_desc_in_iface+0x40>
     97e:	8e 2f       	mov	r24, r30
     980:	9f 2f       	mov	r25, r31
     982:	08 95       	ret
     984:	80 81       	ld	r24, Z
     986:	e8 0f       	add	r30, r24
     988:	f1 1d       	adc	r31, r1
     98a:	e2 17       	cp	r30, r18
     98c:	f3 07       	cpc	r31, r19
     98e:	90 f3       	brcs	.-28     	; 0x974 <udc_next_desc_in_iface+0x30>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	08 95       	ret
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	08 95       	ret
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	08 95       	ret

000009a8 <udc_valid_address>:
     9a8:	80 91 ab 27 	lds	r24, 0x27AB
     9ac:	8f 77       	andi	r24, 0x7F	; 127
     9ae:	82 c7       	rjmp	.+3844   	; 0x18b4 <udd_set_address>
     9b0:	08 95       	ret

000009b2 <udc_update_iface_desc>:
     9b2:	90 91 6c 26 	lds	r25, 0x266C
     9b6:	99 23       	and	r25, r25
     9b8:	81 f1       	breq	.+96     	; 0xa1a <udc_update_iface_desc+0x68>
     9ba:	e0 91 6a 26 	lds	r30, 0x266A
     9be:	f0 91 6b 26 	lds	r31, 0x266B
     9c2:	01 90       	ld	r0, Z+
     9c4:	f0 81       	ld	r31, Z
     9c6:	e0 2d       	mov	r30, r0
     9c8:	94 81       	ldd	r25, Z+4	; 0x04
     9ca:	89 17       	cp	r24, r25
     9cc:	40 f5       	brcc	.+80     	; 0xa1e <udc_update_iface_desc+0x6c>
     9ce:	e0 93 68 26 	sts	0x2668, r30
     9d2:	f0 93 69 26 	sts	0x2669, r31
     9d6:	22 81       	ldd	r18, Z+2	; 0x02
     9d8:	33 81       	ldd	r19, Z+3	; 0x03
     9da:	2e 0f       	add	r18, r30
     9dc:	3f 1f       	adc	r19, r31
     9de:	e2 17       	cp	r30, r18
     9e0:	f3 07       	cpc	r31, r19
     9e2:	f8 f4       	brcc	.+62     	; 0xa22 <udc_update_iface_desc+0x70>
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	94 30       	cpi	r25, 0x04	; 4
     9e8:	61 f4       	brne	.+24     	; 0xa02 <udc_update_iface_desc+0x50>
     9ea:	92 81       	ldd	r25, Z+2	; 0x02
     9ec:	98 13       	cpse	r25, r24
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <udc_update_iface_desc+0x50>
     9f0:	93 81       	ldd	r25, Z+3	; 0x03
     9f2:	96 13       	cpse	r25, r22
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <udc_update_iface_desc+0x50>
     9f6:	e0 93 68 26 	sts	0x2668, r30
     9fa:	f0 93 69 26 	sts	0x2669, r31
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	08 95       	ret
     a02:	90 81       	ld	r25, Z
     a04:	e9 0f       	add	r30, r25
     a06:	f1 1d       	adc	r31, r1
     a08:	e2 17       	cp	r30, r18
     a0a:	f3 07       	cpc	r31, r19
     a0c:	58 f3       	brcs	.-42     	; 0x9e4 <udc_update_iface_desc+0x32>
     a0e:	e0 93 68 26 	sts	0x2668, r30
     a12:	f0 93 69 26 	sts	0x2669, r31
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret

00000a26 <udc_iface_disable>:
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	c8 2f       	mov	r28, r24
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	be df       	rcall	.-132    	; 0x9b2 <udc_update_iface_desc>
     a36:	18 2f       	mov	r17, r24
     a38:	88 23       	and	r24, r24
     a3a:	81 f1       	breq	.+96     	; 0xa9c <udc_iface_disable+0x76>
     a3c:	a0 91 6a 26 	lds	r26, 0x266A
     a40:	b0 91 6b 26 	lds	r27, 0x266B
     a44:	ec 2f       	mov	r30, r28
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	8d 91       	ld	r24, X+
     a50:	9c 91       	ld	r25, X
     a52:	13 97       	sbiw	r26, 0x03	; 3
     a54:	e8 0f       	add	r30, r24
     a56:	f9 1f       	adc	r31, r25
     a58:	e0 80       	ld	r14, Z
     a5a:	f1 80       	ldd	r15, Z+1	; 0x01
     a5c:	d7 01       	movw	r26, r14
     a5e:	16 96       	adiw	r26, 0x06	; 6
     a60:	ed 91       	ld	r30, X+
     a62:	fc 91       	ld	r31, X
     a64:	17 97       	sbiw	r26, 0x07	; 7
     a66:	19 95       	eicall
     a68:	68 2f       	mov	r22, r24
     a6a:	8c 2f       	mov	r24, r28
     a6c:	a2 df       	rcall	.-188    	; 0x9b2 <udc_update_iface_desc>
     a6e:	18 2f       	mov	r17, r24
     a70:	88 23       	and	r24, r24
     a72:	a1 f0       	breq	.+40     	; 0xa9c <udc_iface_disable+0x76>
     a74:	c0 91 68 26 	lds	r28, 0x2668
     a78:	d0 91 69 26 	lds	r29, 0x2669
     a7c:	65 e0       	ldi	r22, 0x05	; 5
     a7e:	ce 01       	movw	r24, r28
     a80:	61 df       	rcall	.-318    	; 0x944 <udc_next_desc_in_iface>
     a82:	ec 01       	movw	r28, r24
     a84:	89 2b       	or	r24, r25
     a86:	21 f0       	breq	.+8      	; 0xa90 <udc_iface_disable+0x6a>
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <udd_ep_free>
     a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <udc_iface_disable+0x56>
     a90:	d7 01       	movw	r26, r14
     a92:	12 96       	adiw	r26, 0x02	; 2
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	13 97       	sbiw	r26, 0x03	; 3
     a9a:	19 95       	eicall
     a9c:	81 2f       	mov	r24, r17
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	08 95       	ret

00000aaa <udc_iface_enable>:
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	18 2f       	mov	r17, r24
     ab2:	7f df       	rcall	.-258    	; 0x9b2 <udc_update_iface_desc>
     ab4:	88 23       	and	r24, r24
     ab6:	39 f1       	breq	.+78     	; 0xb06 <udc_iface_enable+0x5c>
     ab8:	c0 91 68 26 	lds	r28, 0x2668
     abc:	d0 91 69 26 	lds	r29, 0x2669
     ac0:	65 e0       	ldi	r22, 0x05	; 5
     ac2:	ce 01       	movw	r24, r28
     ac4:	3f df       	rcall	.-386    	; 0x944 <udc_next_desc_in_iface>
     ac6:	ec 01       	movw	r28, r24
     ac8:	89 2b       	or	r24, r25
     aca:	41 f0       	breq	.+16     	; 0xadc <udc_iface_enable+0x32>
     acc:	4c 81       	ldd	r20, Y+4	; 0x04
     ace:	5d 81       	ldd	r21, Y+5	; 0x05
     ad0:	6b 81       	ldd	r22, Y+3	; 0x03
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	04 d7       	rcall	.+3592   	; 0x18de <udd_ep_alloc>
     ad6:	81 11       	cpse	r24, r1
     ad8:	f3 cf       	rjmp	.-26     	; 0xac0 <udc_iface_enable+0x16>
     ada:	15 c0       	rjmp	.+42     	; 0xb06 <udc_iface_enable+0x5c>
     adc:	a0 91 6a 26 	lds	r26, 0x266A
     ae0:	b0 91 6b 26 	lds	r27, 0x266B
     ae4:	e1 2f       	mov	r30, r17
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	12 96       	adiw	r26, 0x02	; 2
     aee:	8d 91       	ld	r24, X+
     af0:	9c 91       	ld	r25, X
     af2:	13 97       	sbiw	r26, 0x03	; 3
     af4:	e8 0f       	add	r30, r24
     af6:	f9 1f       	adc	r31, r25
     af8:	01 90       	ld	r0, Z+
     afa:	f0 81       	ld	r31, Z
     afc:	e0 2d       	mov	r30, r0
     afe:	01 90       	ld	r0, Z+
     b00:	f0 81       	ld	r31, Z
     b02:	e0 2d       	mov	r30, r0
     b04:	19 95       	eicall
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	08 95       	ret

00000b0e <udc_start>:
     b0e:	3e c6       	rjmp	.+3196   	; 0x178c <udd_enable>
     b10:	08 95       	ret

00000b12 <udc_reset>:
     b12:	cf 93       	push	r28
     b14:	80 91 6c 26 	lds	r24, 0x266C
     b18:	88 23       	and	r24, r24
     b1a:	c1 f0       	breq	.+48     	; 0xb4c <udc_reset+0x3a>
     b1c:	e0 91 6a 26 	lds	r30, 0x266A
     b20:	f0 91 6b 26 	lds	r31, 0x266B
     b24:	01 90       	ld	r0, Z+
     b26:	f0 81       	ld	r31, Z
     b28:	e0 2d       	mov	r30, r0
     b2a:	84 81       	ldd	r24, Z+4	; 0x04
     b2c:	88 23       	and	r24, r24
     b2e:	71 f0       	breq	.+28     	; 0xb4c <udc_reset+0x3a>
     b30:	c0 e0       	ldi	r28, 0x00	; 0
     b32:	8c 2f       	mov	r24, r28
     b34:	78 df       	rcall	.-272    	; 0xa26 <udc_iface_disable>
     b36:	cf 5f       	subi	r28, 0xFF	; 255
     b38:	e0 91 6a 26 	lds	r30, 0x266A
     b3c:	f0 91 6b 26 	lds	r31, 0x266B
     b40:	01 90       	ld	r0, Z+
     b42:	f0 81       	ld	r31, Z
     b44:	e0 2d       	mov	r30, r0
     b46:	84 81       	ldd	r24, Z+4	; 0x04
     b48:	c8 17       	cp	r28, r24
     b4a:	98 f3       	brcs	.-26     	; 0xb32 <udc_reset+0x20>
     b4c:	10 92 6c 26 	sts	0x266C, r1
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	80 93 6d 26 	sts	0x266D, r24
     b58:	90 93 6e 26 	sts	0x266E, r25
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b60:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b62:	80 91 6c 26 	lds	r24, 0x266C
     b66:	88 23       	and	r24, r24
     b68:	49 f1       	breq	.+82     	; 0xbbc <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b6a:	a0 91 6a 26 	lds	r26, 0x266A
     b6e:	b0 91 6b 26 	lds	r27, 0x266B
     b72:	ed 91       	ld	r30, X+
     b74:	fc 91       	ld	r31, X
     b76:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b78:	84 81       	ldd	r24, Z+4	; 0x04
     b7a:	88 23       	and	r24, r24
     b7c:	f9 f0       	breq	.+62     	; 0xbbc <udc_sof_notify+0x5c>
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b80:	ec 2f       	mov	r30, r28
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	e8 0f       	add	r30, r24
     b92:	f9 1f       	adc	r31, r25
     b94:	01 90       	ld	r0, Z+
     b96:	f0 81       	ld	r31, Z
     b98:	e0 2d       	mov	r30, r0
     b9a:	00 84       	ldd	r0, Z+8	; 0x08
     b9c:	f1 85       	ldd	r31, Z+9	; 0x09
     b9e:	e0 2d       	mov	r30, r0
     ba0:	30 97       	sbiw	r30, 0x00	; 0
     ba2:	09 f0       	breq	.+2      	; 0xba6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     ba4:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     ba6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ba8:	a0 91 6a 26 	lds	r26, 0x266A
     bac:	b0 91 6b 26 	lds	r27, 0x266B
     bb0:	ed 91       	ld	r30, X+
     bb2:	fc 91       	ld	r31, X
     bb4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bb6:	84 81       	ldd	r24, Z+4	; 0x04
     bb8:	c8 17       	cp	r28, r24
     bba:	10 f3       	brcs	.-60     	; 0xb80 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bc8:	e9 ea       	ldi	r30, 0xA9	; 169
     bca:	f7 e2       	ldi	r31, 0x27	; 39
     bcc:	12 86       	std	Z+10, r1	; 0x0a
     bce:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     bd0:	14 86       	std	Z+12, r1	; 0x0c
     bd2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     bd4:	16 86       	std	Z+14, r1	; 0x0e
     bd6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     bd8:	80 81       	ld	r24, Z
     bda:	88 23       	and	r24, r24
     bdc:	0c f0       	brlt	.+2      	; 0xbe0 <udc_process_setup+0x20>
     bde:	11 c2       	rjmp	.+1058   	; 0x1002 <udc_process_setup+0x442>
		if (udd_g_ctrlreq.req.wLength == 0) {
     be0:	20 91 af 27 	lds	r18, 0x27AF
     be4:	30 91 b0 27 	lds	r19, 0x27B0
     be8:	21 15       	cp	r18, r1
     bea:	31 05       	cpc	r19, r1
     bec:	09 f0       	breq	.+2      	; 0xbf0 <udc_process_setup+0x30>
     bee:	0e c2       	rjmp	.+1052   	; 0x100c <udc_process_setup+0x44c>
     bf0:	04 c2       	rjmp	.+1032   	; 0xffa <udc_process_setup+0x43a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     bf2:	8f 71       	andi	r24, 0x1F	; 31
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <udc_process_setup+0x38>
     bf6:	90 c0       	rjmp	.+288    	; 0xd18 <udc_process_setup+0x158>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     bf8:	90 91 aa 27 	lds	r25, 0x27AA
     bfc:	96 30       	cpi	r25, 0x06	; 6
     bfe:	79 f0       	breq	.+30     	; 0xc1e <udc_process_setup+0x5e>
     c00:	98 30       	cpi	r25, 0x08	; 8
     c02:	09 f4       	brne	.+2      	; 0xc06 <udc_process_setup+0x46>
     c04:	7f c0       	rjmp	.+254    	; 0xd04 <udc_process_setup+0x144>
     c06:	91 11       	cpse	r25, r1
     c08:	87 c0       	rjmp	.+270    	; 0xd18 <udc_process_setup+0x158>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c0a:	22 30       	cpi	r18, 0x02	; 2
     c0c:	31 05       	cpc	r19, r1
     c0e:	09 f0       	breq	.+2      	; 0xc12 <udc_process_setup+0x52>
     c10:	b3 c1       	rjmp	.+870    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	8d e6       	ldi	r24, 0x6D	; 109
     c18:	96 e2       	ldi	r25, 0x26	; 38
     c1a:	5a d6       	rcall	.+3252   	; 0x18d0 <udd_set_setup_payload>
     c1c:	fc c1       	rjmp	.+1016   	; 0x1016 <udc_process_setup+0x456>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c1e:	80 91 ab 27 	lds	r24, 0x27AB
     c22:	90 91 ac 27 	lds	r25, 0x27AC

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c26:	29 2f       	mov	r18, r25
     c28:	33 27       	eor	r19, r19
     c2a:	22 30       	cpi	r18, 0x02	; 2
     c2c:	31 05       	cpc	r19, r1
     c2e:	81 f0       	breq	.+32     	; 0xc50 <udc_process_setup+0x90>
     c30:	23 30       	cpi	r18, 0x03	; 3
     c32:	31 05       	cpc	r19, r1
     c34:	69 f1       	breq	.+90     	; 0xc90 <udc_process_setup+0xd0>
     c36:	21 30       	cpi	r18, 0x01	; 1
     c38:	31 05       	cpc	r19, r1
     c3a:	09 f0       	breq	.+2      	; 0xc3e <udc_process_setup+0x7e>
     c3c:	94 c1       	rjmp	.+808    	; 0xf66 <udc_process_setup+0x3a6>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c3e:	80 91 1a 20 	lds	r24, 0x201A
     c42:	90 91 1b 20 	lds	r25, 0x201B
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c46:	dc 01       	movw	r26, r24
     c48:	6c 91       	ld	r22, X
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	41 d6       	rcall	.+3202   	; 0x18d0 <udd_set_setup_payload>
     c4e:	4b c0       	rjmp	.+150    	; 0xce6 <udc_process_setup+0x126>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c50:	e0 91 1a 20 	lds	r30, 0x201A
     c54:	f0 91 1b 20 	lds	r31, 0x201B
     c58:	21 89       	ldd	r18, Z+17	; 0x11
     c5a:	82 17       	cp	r24, r18
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <udc_process_setup+0xa0>
     c5e:	8c c1       	rjmp	.+792    	; 0xf78 <udc_process_setup+0x3b8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c60:	99 27       	eor	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	e0 91 1c 20 	lds	r30, 0x201C
     c6e:	f0 91 1d 20 	lds	r31, 0x201D
     c72:	e8 0f       	add	r30, r24
     c74:	f9 1f       	adc	r31, r25
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     c7a:	fc 01       	movw	r30, r24
     c7c:	62 81       	ldd	r22, Z+2	; 0x02
     c7e:	73 81       	ldd	r23, Z+3	; 0x03
     c80:	27 d6       	rcall	.+3150   	; 0x18d0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     c82:	e0 91 b1 27 	lds	r30, 0x27B1
     c86:	f0 91 b2 27 	lds	r31, 0x27B2
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	81 83       	std	Z+1, r24	; 0x01
     c8e:	2b c0       	rjmp	.+86     	; 0xce6 <udc_process_setup+0x126>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     c90:	99 27       	eor	r25, r25
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	91 05       	cpc	r25, r1
     c96:	71 f0       	breq	.+28     	; 0xcb4 <udc_process_setup+0xf4>
     c98:	38 f0       	brcs	.+14     	; 0xca8 <udc_process_setup+0xe8>
     c9a:	02 97       	sbiw	r24, 0x02	; 2
     c9c:	09 f0       	breq	.+2      	; 0xca0 <udc_process_setup+0xe0>
     c9e:	6c c1       	rjmp	.+728    	; 0xf78 <udc_process_setup+0x3b8>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     ca0:	80 e9       	ldi	r24, 0x90	; 144
     ca2:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     ca4:	23 e0       	ldi	r18, 0x03	; 3
     ca6:	09 c0       	rjmp	.+18     	; 0xcba <udc_process_setup+0xfa>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     ca8:	64 e0       	ldi	r22, 0x04	; 4
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	8e e9       	ldi	r24, 0x9E	; 158
     cae:	90 e2       	ldi	r25, 0x20	; 32
     cb0:	0f d6       	rcall	.+3102   	; 0x18d0 <udd_set_setup_payload>
     cb2:	19 c0       	rjmp	.+50     	; 0xce6 <udc_process_setup+0x126>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     cb4:	84 e9       	ldi	r24, 0x94	; 148
     cb6:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     cb8:	29 e0       	ldi	r18, 0x09	; 9
     cba:	38 2f       	mov	r19, r24
     cbc:	ae e7       	ldi	r26, 0x7E	; 126
     cbe:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     cc0:	e8 2f       	mov	r30, r24
     cc2:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     cc4:	81 91       	ld	r24, Z+
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	8d 93       	st	X+, r24
     cca:	9d 93       	st	X+, r25
     ccc:	8e 2f       	mov	r24, r30
     cce:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     cd0:	82 17       	cp	r24, r18
     cd2:	c0 f3       	brcs	.-16     	; 0xcc4 <udc_process_setup+0x104>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     cd4:	62 2f       	mov	r22, r18
     cd6:	66 0f       	add	r22, r22
     cd8:	6e 5f       	subi	r22, 0xFE	; 254
     cda:	60 93 7c 20 	sts	0x207C, r22
		udd_set_setup_payload(
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	8c e7       	ldi	r24, 0x7C	; 124
     ce2:	90 e2       	ldi	r25, 0x20	; 32
     ce4:	f5 d5       	rcall	.+3050   	; 0x18d0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     ce6:	e9 ea       	ldi	r30, 0xA9	; 169
     ce8:	f7 e2       	ldi	r31, 0x27	; 39
     cea:	86 81       	ldd	r24, Z+6	; 0x06
     cec:	97 81       	ldd	r25, Z+7	; 0x07
     cee:	22 85       	ldd	r18, Z+10	; 0x0a
     cf0:	33 85       	ldd	r19, Z+11	; 0x0b
     cf2:	82 17       	cp	r24, r18
     cf4:	93 07       	cpc	r25, r19
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <udc_process_setup+0x13a>
     cf8:	8e c1       	rjmp	.+796    	; 0x1016 <udc_process_setup+0x456>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     cfa:	80 93 b3 27 	sts	0x27B3, r24
     cfe:	90 93 b4 27 	sts	0x27B4, r25
     d02:	89 c1       	rjmp	.+786    	; 0x1016 <udc_process_setup+0x456>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d04:	21 30       	cpi	r18, 0x01	; 1
     d06:	31 05       	cpc	r19, r1
     d08:	09 f0       	breq	.+2      	; 0xd0c <udc_process_setup+0x14c>
     d0a:	36 c1       	rjmp	.+620    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	8c e6       	ldi	r24, 0x6C	; 108
     d12:	96 e2       	ldi	r25, 0x26	; 38
     d14:	dd d5       	rcall	.+3002   	; 0x18d0 <udd_set_setup_payload>
     d16:	7f c1       	rjmp	.+766    	; 0x1016 <udc_process_setup+0x456>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	e1 f5       	brne	.+120    	; 0xd94 <udc_process_setup+0x1d4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d1c:	90 91 aa 27 	lds	r25, 0x27AA
     d20:	9a 30       	cpi	r25, 0x0A	; 10
     d22:	c1 f5       	brne	.+112    	; 0xd94 <udc_process_setup+0x1d4>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d24:	21 30       	cpi	r18, 0x01	; 1
     d26:	31 05       	cpc	r19, r1
     d28:	09 f0       	breq	.+2      	; 0xd2c <udc_process_setup+0x16c>
     d2a:	26 c1       	rjmp	.+588    	; 0xf78 <udc_process_setup+0x3b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d2c:	80 91 6c 26 	lds	r24, 0x266C
     d30:	88 23       	and	r24, r24
     d32:	09 f4       	brne	.+2      	; 0xd36 <udc_process_setup+0x176>
     d34:	21 c1       	rjmp	.+578    	; 0xf78 <udc_process_setup+0x3b8>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d36:	c0 91 ad 27 	lds	r28, 0x27AD
     d3a:	d0 91 ae 27 	lds	r29, 0x27AE
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d3e:	00 91 6a 26 	lds	r16, 0x266A
     d42:	10 91 6b 26 	lds	r17, 0x266B
     d46:	d8 01       	movw	r26, r16
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	84 81       	ldd	r24, Z+4	; 0x04
     d4e:	c8 17       	cp	r28, r24
     d50:	08 f0       	brcs	.+2      	; 0xd54 <udc_process_setup+0x194>
     d52:	12 c1       	rjmp	.+548    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	8c 2f       	mov	r24, r28
     d58:	2c de       	rcall	.-936    	; 0x9b2 <udc_update_iface_desc>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <udc_process_setup+0x1a0>
     d5e:	0c c1       	rjmp	.+536    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d60:	ce 01       	movw	r24, r28
     d62:	99 27       	eor	r25, r25
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	d8 01       	movw	r26, r16
     d6a:	12 96       	adiw	r26, 0x02	; 2
     d6c:	ed 91       	ld	r30, X+
     d6e:	fc 91       	ld	r31, X
     d70:	13 97       	sbiw	r26, 0x03	; 3
     d72:	e8 0f       	add	r30, r24
     d74:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     d76:	01 90       	ld	r0, Z+
     d78:	f0 81       	ld	r31, Z
     d7a:	e0 2d       	mov	r30, r0
     d7c:	86 81       	ldd	r24, Z+6	; 0x06
     d7e:	97 81       	ldd	r25, Z+7	; 0x07
     d80:	fc 01       	movw	r30, r24
     d82:	19 95       	eicall
     d84:	80 93 67 26 	sts	0x2667, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	87 e6       	ldi	r24, 0x67	; 103
     d8e:	96 e2       	ldi	r25, 0x26	; 38
     d90:	9f d5       	rcall	.+2878   	; 0x18d0 <udd_set_setup_payload>
     d92:	41 c1       	rjmp	.+642    	; 0x1016 <udc_process_setup+0x456>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	09 f0       	breq	.+2      	; 0xd9a <udc_process_setup+0x1da>
     d98:	ef c0       	rjmp	.+478    	; 0xf78 <udc_process_setup+0x3b8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d9a:	80 91 aa 27 	lds	r24, 0x27AA
     d9e:	81 11       	cpse	r24, r1
     da0:	e4 c0       	rjmp	.+456    	; 0xf6a <udc_process_setup+0x3aa>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	09 f0       	breq	.+2      	; 0xdaa <udc_process_setup+0x1ea>
     da8:	e7 c0       	rjmp	.+462    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     daa:	80 91 ad 27 	lds	r24, 0x27AD
     dae:	15 d6       	rcall	.+3114   	; 0x19da <udd_ep_is_halted>
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	80 93 65 26 	sts	0x2665, r24
     db6:	90 93 66 26 	sts	0x2666, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	85 e6       	ldi	r24, 0x65	; 101
     dc0:	96 e2       	ldi	r25, 0x26	; 38
     dc2:	86 d5       	rcall	.+2828   	; 0x18d0 <udd_set_setup_payload>
     dc4:	28 c1       	rjmp	.+592    	; 0x1016 <udc_process_setup+0x456>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     dc6:	8f 71       	andi	r24, 0x1F	; 31
     dc8:	09 f0       	breq	.+2      	; 0xdcc <udc_process_setup+0x20c>
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <udc_process_setup+0x312>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     dcc:	90 91 aa 27 	lds	r25, 0x27AA
     dd0:	93 30       	cpi	r25, 0x03	; 3
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <udc_process_setup+0x216>
     dd4:	cc c0       	rjmp	.+408    	; 0xf6e <udc_process_setup+0x3ae>
     dd6:	18 f4       	brcc	.+6      	; 0xdde <udc_process_setup+0x21e>
     dd8:	91 30       	cpi	r25, 0x01	; 1
     dda:	a1 f0       	breq	.+40     	; 0xe04 <udc_process_setup+0x244>
     ddc:	7a c0       	rjmp	.+244    	; 0xed2 <udc_process_setup+0x312>
     dde:	95 30       	cpi	r25, 0x05	; 5
     de0:	19 f0       	breq	.+6      	; 0xde8 <udc_process_setup+0x228>
     de2:	99 30       	cpi	r25, 0x09	; 9
     de4:	39 f1       	breq	.+78     	; 0xe34 <udc_process_setup+0x274>
     de6:	75 c0       	rjmp	.+234    	; 0xed2 <udc_process_setup+0x312>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     de8:	80 91 af 27 	lds	r24, 0x27AF
     dec:	90 91 b0 27 	lds	r25, 0x27B0
     df0:	89 2b       	or	r24, r25
     df2:	09 f0       	breq	.+2      	; 0xdf6 <udc_process_setup+0x236>
     df4:	c1 c0       	rjmp	.+386    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     df6:	84 ed       	ldi	r24, 0xD4	; 212
     df8:	94 e0       	ldi	r25, 0x04	; 4
     dfa:	80 93 b5 27 	sts	0x27B5, r24
     dfe:	90 93 b6 27 	sts	0x27B6, r25
     e02:	09 c1       	rjmp	.+530    	; 0x1016 <udc_process_setup+0x456>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e04:	80 91 af 27 	lds	r24, 0x27AF
     e08:	90 91 b0 27 	lds	r25, 0x27B0
     e0c:	89 2b       	or	r24, r25
     e0e:	09 f0       	breq	.+2      	; 0xe12 <udc_process_setup+0x252>
     e10:	b3 c0       	rjmp	.+358    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e12:	80 91 ab 27 	lds	r24, 0x27AB
     e16:	90 91 ac 27 	lds	r25, 0x27AC
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	09 f0       	breq	.+2      	; 0xe20 <udc_process_setup+0x260>
     e1e:	ac c0       	rjmp	.+344    	; 0xf78 <udc_process_setup+0x3b8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e20:	80 91 6d 26 	lds	r24, 0x266D
     e24:	90 91 6e 26 	lds	r25, 0x266E
     e28:	8d 7f       	andi	r24, 0xFD	; 253
     e2a:	80 93 6d 26 	sts	0x266D, r24
     e2e:	90 93 6e 26 	sts	0x266E, r25
     e32:	f1 c0       	rjmp	.+482    	; 0x1016 <udc_process_setup+0x456>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     e34:	80 91 af 27 	lds	r24, 0x27AF
     e38:	90 91 b0 27 	lds	r25, 0x27B0
     e3c:	89 2b       	or	r24, r25
     e3e:	09 f0       	breq	.+2      	; 0xe42 <udc_process_setup+0x282>
     e40:	9b c0       	rjmp	.+310    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     e42:	3b d5       	rcall	.+2678   	; 0x18ba <udd_getaddress>
     e44:	88 23       	and	r24, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <udc_process_setup+0x28a>
     e48:	97 c0       	rjmp	.+302    	; 0xf78 <udc_process_setup+0x3b8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e4a:	20 91 ab 27 	lds	r18, 0x27AB
     e4e:	30 91 ac 27 	lds	r19, 0x27AC
     e52:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     e54:	e0 91 1a 20 	lds	r30, 0x201A
     e58:	f0 91 1b 20 	lds	r31, 0x201B
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e5c:	81 89       	ldd	r24, Z+17	; 0x11
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	82 17       	cp	r24, r18
     e62:	93 07       	cpc	r25, r19
     e64:	08 f4       	brcc	.+2      	; 0xe68 <udc_process_setup+0x2a8>
     e66:	88 c0       	rjmp	.+272    	; 0xf78 <udc_process_setup+0x3b8>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     e68:	54 de       	rcall	.-856    	; 0xb12 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     e6a:	80 91 ab 27 	lds	r24, 0x27AB
     e6e:	90 91 ac 27 	lds	r25, 0x27AC
     e72:	80 93 6c 26 	sts	0x266C, r24
	if (udc_num_configuration == 0) {
     e76:	88 23       	and	r24, r24
     e78:	09 f4       	brne	.+2      	; 0xe7c <udc_process_setup+0x2bc>
     e7a:	cd c0       	rjmp	.+410    	; 0x1016 <udc_process_setup+0x456>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     e7c:	99 27       	eor	r25, r25
     e7e:	81 50       	subi	r24, 0x01	; 1
     e80:	90 4c       	sbci	r25, 0xC0	; 192
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	e0 91 1c 20 	lds	r30, 0x201C
     e8e:	f0 91 1d 20 	lds	r31, 0x201D
     e92:	e8 0f       	add	r30, r24
     e94:	f9 1f       	adc	r31, r25
     e96:	e0 93 6a 26 	sts	0x266A, r30
     e9a:	f0 93 6b 26 	sts	0x266B, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <udc_process_setup+0x2ec>
     eaa:	b5 c0       	rjmp	.+362    	; 0x1016 <udc_process_setup+0x456>
     eac:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	8c 2f       	mov	r24, r28
     eb2:	fb dd       	rcall	.-1034   	; 0xaaa <udc_iface_enable>
     eb4:	88 23       	and	r24, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <udc_process_setup+0x2fa>
     eb8:	5f c0       	rjmp	.+190    	; 0xf78 <udc_process_setup+0x3b8>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     eba:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ebc:	e0 91 6a 26 	lds	r30, 0x266A
     ec0:	f0 91 6b 26 	lds	r31, 0x266B
     ec4:	01 90       	ld	r0, Z+
     ec6:	f0 81       	ld	r31, Z
     ec8:	e0 2d       	mov	r30, r0
     eca:	84 81       	ldd	r24, Z+4	; 0x04
     ecc:	c8 17       	cp	r28, r24
     ece:	78 f3       	brcs	.-34     	; 0xeae <udc_process_setup+0x2ee>
     ed0:	a2 c0       	rjmp	.+324    	; 0x1016 <udc_process_setup+0x456>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	e1 f4       	brne	.+56     	; 0xf0e <udc_process_setup+0x34e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ed6:	90 91 aa 27 	lds	r25, 0x27AA
     eda:	9b 30       	cpi	r25, 0x0B	; 11
     edc:	c1 f4       	brne	.+48     	; 0xf0e <udc_process_setup+0x34e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     ede:	80 91 af 27 	lds	r24, 0x27AF
     ee2:	90 91 b0 27 	lds	r25, 0x27B0
     ee6:	89 2b       	or	r24, r25
     ee8:	09 f0       	breq	.+2      	; 0xeec <udc_process_setup+0x32c>
     eea:	46 c0       	rjmp	.+140    	; 0xf78 <udc_process_setup+0x3b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     eec:	80 91 6c 26 	lds	r24, 0x266C
     ef0:	88 23       	and	r24, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <udc_process_setup+0x336>
     ef4:	41 c0       	rjmp	.+130    	; 0xf78 <udc_process_setup+0x3b8>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ef6:	e9 ea       	ldi	r30, 0xA9	; 169
     ef8:	f7 e2       	ldi	r31, 0x27	; 39
     efa:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     efc:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     efe:	8c 2f       	mov	r24, r28
     f00:	92 dd       	rcall	.-1244   	; 0xa26 <udc_iface_disable>
     f02:	88 23       	and	r24, r24
     f04:	c9 f1       	breq	.+114    	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f06:	6d 2f       	mov	r22, r29
     f08:	8c 2f       	mov	r24, r28
     f0a:	cf dd       	rcall	.-1122   	; 0xaaa <udc_iface_enable>
     f0c:	33 c0       	rjmp	.+102    	; 0xf74 <udc_process_setup+0x3b4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	99 f5       	brne	.+102    	; 0xf78 <udc_process_setup+0x3b8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     f12:	80 91 aa 27 	lds	r24, 0x27AA
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	19 f0       	breq	.+6      	; 0xf20 <udc_process_setup+0x360>
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	89 f0       	breq	.+34     	; 0xf40 <udc_process_setup+0x380>
     f1e:	29 c0       	rjmp	.+82     	; 0xf72 <udc_process_setup+0x3b2>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f20:	80 91 af 27 	lds	r24, 0x27AF
     f24:	90 91 b0 27 	lds	r25, 0x27B0
     f28:	89 2b       	or	r24, r25
     f2a:	31 f5       	brne	.+76     	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f2c:	80 91 ab 27 	lds	r24, 0x27AB
     f30:	90 91 ac 27 	lds	r25, 0x27AC
     f34:	89 2b       	or	r24, r25
     f36:	01 f5       	brne	.+64     	; 0xf78 <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f38:	80 91 ad 27 	lds	r24, 0x27AD
     f3c:	69 d5       	rcall	.+2770   	; 0x1a10 <udd_ep_clear_halt>
     f3e:	1a c0       	rjmp	.+52     	; 0xf74 <udc_process_setup+0x3b4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f40:	80 91 af 27 	lds	r24, 0x27AF
     f44:	90 91 b0 27 	lds	r25, 0x27B0
     f48:	89 2b       	or	r24, r25
     f4a:	b1 f4       	brne	.+44     	; 0xf78 <udc_process_setup+0x3b8>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f4c:	80 91 ab 27 	lds	r24, 0x27AB
     f50:	90 91 ac 27 	lds	r25, 0x27AC
     f54:	89 2b       	or	r24, r25
     f56:	81 f4       	brne	.+32     	; 0xf78 <udc_process_setup+0x3b8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     f58:	c9 ea       	ldi	r28, 0xA9	; 169
     f5a:	d7 e2       	ldi	r29, 0x27	; 39
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	47 d6       	rcall	.+3214   	; 0x1bee <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	aa d6       	rcall	.+3412   	; 0x1cb8 <udd_ep_set_halt>
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <udc_process_setup+0x3b4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	05 c0       	rjmp	.+10     	; 0xf74 <udc_process_setup+0x3b4>
				break;
			}
		}
#endif
	}
	return false;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <udc_process_setup+0x3b4>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <udc_process_setup+0x3b4>
				break;
			}
		}
#endif
	}
	return false;
     f72:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f74:	81 11       	cpse	r24, r1
     f76:	50 c0       	rjmp	.+160    	; 0x1018 <udc_process_setup+0x458>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f78:	80 91 a9 27 	lds	r24, 0x27A9
     f7c:	8f 71       	andi	r24, 0x1F	; 31
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	09 f0       	breq	.+2      	; 0xf84 <udc_process_setup+0x3c4>
     f82:	3d c0       	rjmp	.+122    	; 0xffe <udc_process_setup+0x43e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f84:	80 91 6c 26 	lds	r24, 0x266C
     f88:	88 23       	and	r24, r24
     f8a:	99 f1       	breq	.+102    	; 0xff2 <udc_process_setup+0x432>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f8c:	c0 91 ad 27 	lds	r28, 0x27AD
     f90:	d0 91 ae 27 	lds	r29, 0x27AE
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f94:	00 91 6a 26 	lds	r16, 0x266A
     f98:	10 91 6b 26 	lds	r17, 0x266B
     f9c:	d8 01       	movw	r26, r16
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	84 81       	ldd	r24, Z+4	; 0x04
     fa4:	c8 17       	cp	r28, r24
     fa6:	38 f5       	brcc	.+78     	; 0xff6 <udc_process_setup+0x436>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	8c 2f       	mov	r24, r28
     fac:	02 dd       	rcall	.-1532   	; 0x9b2 <udc_update_iface_desc>
     fae:	88 23       	and	r24, r24
     fb0:	99 f1       	breq	.+102    	; 0x1018 <udc_process_setup+0x458>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fb2:	fe 01       	movw	r30, r28
     fb4:	ff 27       	eor	r31, r31
     fb6:	cf 01       	movw	r24, r30
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	d8 01       	movw	r26, r16
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	ed 91       	ld	r30, X+
     fc2:	fc 91       	ld	r31, X
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	00 81       	ld	r16, Z
     fcc:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fce:	d8 01       	movw	r26, r16
     fd0:	16 96       	adiw	r26, 0x06	; 6
     fd2:	ed 91       	ld	r30, X+
     fd4:	fc 91       	ld	r31, X
     fd6:	17 97       	sbiw	r26, 0x07	; 7
     fd8:	19 95       	eicall
     fda:	68 2f       	mov	r22, r24
     fdc:	8c 2f       	mov	r24, r28
     fde:	e9 dc       	rcall	.-1582   	; 0x9b2 <udc_update_iface_desc>
     fe0:	88 23       	and	r24, r24
     fe2:	d1 f0       	breq	.+52     	; 0x1018 <udc_process_setup+0x458>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     fe4:	d8 01       	movw	r26, r16
     fe6:	14 96       	adiw	r26, 0x04	; 4
     fe8:	ed 91       	ld	r30, X+
     fea:	fc 91       	ld	r31, X
     fec:	15 97       	sbiw	r26, 0x05	; 5
     fee:	19 95       	eicall
     ff0:	13 c0       	rjmp	.+38     	; 0x1018 <udc_process_setup+0x458>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <udc_process_setup+0x458>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <udc_process_setup+0x458>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <udc_process_setup+0x458>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0b c0       	rjmp	.+22     	; 0x1018 <udc_process_setup+0x458>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1002:	98 2f       	mov	r25, r24
    1004:	90 76       	andi	r25, 0x60	; 96
    1006:	09 f0       	breq	.+2      	; 0x100a <udc_process_setup+0x44a>
    1008:	b7 cf       	rjmp	.-146    	; 0xf78 <udc_process_setup+0x3b8>
    100a:	dd ce       	rjmp	.-582    	; 0xdc6 <udc_process_setup+0x206>
    100c:	98 2f       	mov	r25, r24
    100e:	90 76       	andi	r25, 0x60	; 96
    1010:	09 f0       	breq	.+2      	; 0x1014 <udc_process_setup+0x454>
    1012:	b2 cf       	rjmp	.-156    	; 0xf78 <udc_process_setup+0x3b8>
    1014:	ee cd       	rjmp	.-1060   	; 0xbf2 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1016:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	08 95       	ret

00001022 <_read>:
#elif (defined(__GNUC__) && XMEGA)

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    102c:	80 91 a7 27 	lds	r24, 0x27A7
    1030:	90 91 a8 27 	lds	r25, 0x27A8
    1034:	e0 91 a3 27 	lds	r30, 0x27A3
    1038:	f0 91 a4 27 	lds	r31, 0x27A4
    103c:	be 01       	movw	r22, r28
    103e:	6f 5f       	subi	r22, 0xFF	; 255
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	19 95       	eicall
	return c;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	08 2e       	mov	r0, r24
    1048:	00 0c       	add	r0, r0
    104a:	99 0b       	sbc	r25, r25
    104c:	0f 90       	pop	r0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <stdio_usb_putchar>:
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
    1054:	80 91 6f 26 	lds	r24, 0x266F
    1058:	88 23       	and	r24, r24
    105a:	81 f0       	breq	.+32     	; 0x107c <stdio_usb_putchar+0x28>
    105c:	86 2f       	mov	r24, r22
    105e:	08 2e       	mov	r0, r24
    1060:	00 0c       	add	r0, r0
    1062:	99 0b       	sbc	r25, r25
    1064:	6b dc       	rcall	.-1834   	; 0x93c <udi_cdc_putc>
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	89 2b       	or	r24, r25
    106c:	11 f0       	breq	.+4      	; 0x1072 <stdio_usb_putchar+0x1e>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	88 27       	eor	r24, r24
    1074:	99 27       	eor	r25, r25
    1076:	82 1b       	sub	r24, r18
    1078:	93 0b       	sbc	r25, r19
    107a:	08 95       	ret
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	08 95       	ret

00001082 <stdio_usb_getchar>:
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	80 91 6f 26 	lds	r24, 0x266F
    108a:	81 11       	cpse	r24, r1
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <stdio_usb_getchar+0x12>
    108e:	fb 01       	movw	r30, r22
    1090:	10 82       	st	Z, r1
    1092:	03 c0       	rjmp	.+6      	; 0x109a <stdio_usb_getchar+0x18>
    1094:	eb 01       	movw	r28, r22
    1096:	d6 db       	rcall	.-2132   	; 0x844 <udi_cdc_getc>
    1098:	88 83       	st	Y, r24
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 6f 26 	sts	0x266F, r24
	return true;
}
    10a6:	08 95       	ret

000010a8 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    10a8:	10 92 6f 26 	sts	0x266F, r1
    10ac:	08 95       	ret

000010ae <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    10ae:	10 92 a7 27 	sts	0x27A7, r1
    10b2:	10 92 a8 27 	sts	0x27A8, r1
	ptr_put = stdio_usb_putchar;
    10b6:	8a e2       	ldi	r24, 0x2A	; 42
    10b8:	98 e0       	ldi	r25, 0x08	; 8
    10ba:	80 93 a5 27 	sts	0x27A5, r24
    10be:	90 93 a6 27 	sts	0x27A6, r25
	ptr_get = stdio_usb_getchar;
    10c2:	81 e4       	ldi	r24, 0x41	; 65
    10c4:	98 e0       	ldi	r25, 0x08	; 8
    10c6:	80 93 a3 27 	sts	0x27A3, r24
    10ca:	90 93 a4 27 	sts	0x27A4, r25
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    10ce:	1f dd       	rcall	.-1474   	; 0xb0e <udc_start>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
    10d0:	ca d3       	rcall	.+1940   	; 0x1866 <udd_include_vbus_monitoring>

	if (!udc_include_vbus_monitoring()) {
    10d2:	81 11       	cpse	r24, r1
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <stdio_usb_init+0x2a>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    10d6:	c9 d3       	rcall	.+1938   	; 0x186a <udd_attach>
	}

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    10d8:	61 e1       	ldi	r22, 0x11	; 17
    10da:	78 e0       	ldi	r23, 0x08	; 8
    10dc:	83 e7       	ldi	r24, 0x73	; 115
    10de:	98 e0       	ldi	r25, 0x08	; 8
    10e0:	0c 94 6d 12 	jmp	0x24da	; 0x24da <fdevopen>
    10e4:	08 95       	ret

000010e6 <_write>:
#elif (defined(__GNUC__) && XMEGA)

int _write (char c, int *f);

int _write (char c, int *f)
{
    10e6:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    10e8:	80 91 a7 27 	lds	r24, 0x27A7
    10ec:	90 91 a8 27 	lds	r25, 0x27A8
    10f0:	e0 91 a5 27 	lds	r30, 0x27A5
    10f4:	f0 91 a6 27 	lds	r31, 0x27A6
    10f8:	19 95       	eicall
    10fa:	99 23       	and	r25, r25
    10fc:	1c f0       	brlt	.+6      	; 0x1104 <_write+0x1e>
		return -1;
	}
	return 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    1108:	08 95       	ret

0000110a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    110a:	43 e0       	ldi	r20, 0x03	; 3
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	80 ee       	ldi	r24, 0xE0	; 224
    1112:	97 e0       	ldi	r25, 0x07	; 7
    1114:	46 d9       	rcall	.-3444   	; 0x3a2 <ioport_configure_port_pin>
    1116:	43 e0       	ldi	r20, 0x03	; 3
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	80 ee       	ldi	r24, 0xE0	; 224
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	40 d9       	rcall	.-3456   	; 0x3a2 <ioport_configure_port_pin>
    1122:	43 e0       	ldi	r20, 0x03	; 3
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	60 e1       	ldi	r22, 0x10	; 16
    1128:	80 e6       	ldi	r24, 0x60	; 96
    112a:	96 e0       	ldi	r25, 0x06	; 6
    112c:	3a d9       	rcall	.-3468   	; 0x3a2 <ioport_configure_port_pin>
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	50 e4       	ldi	r21, 0x40	; 64
    1132:	60 e2       	ldi	r22, 0x20	; 32
    1134:	80 e6       	ldi	r24, 0x60	; 96
    1136:	96 e0       	ldi	r25, 0x06	; 6
    1138:	34 d9       	rcall	.-3480   	; 0x3a2 <ioport_configure_port_pin>
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	5b e1       	ldi	r21, 0x1B	; 27
    113e:	60 e2       	ldi	r22, 0x20	; 32
    1140:	80 e8       	ldi	r24, 0x80	; 128
    1142:	96 e0       	ldi	r25, 0x06	; 6
    1144:	2e d9       	rcall	.-3492   	; 0x3a2 <ioport_configure_port_pin>
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	5b e1       	ldi	r21, 0x1B	; 27
    114a:	62 e0       	ldi	r22, 0x02	; 2
    114c:	80 ea       	ldi	r24, 0xA0	; 160
    114e:	96 e0       	ldi	r25, 0x06	; 6
    1150:	28 d9       	rcall	.-3504   	; 0x3a2 <ioport_configure_port_pin>
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	5b e1       	ldi	r21, 0x1B	; 27
    1156:	64 e0       	ldi	r22, 0x04	; 4
    1158:	80 ea       	ldi	r24, 0xA0	; 160
    115a:	96 e0       	ldi	r25, 0x06	; 6
    115c:	22 c9       	rjmp	.-3516   	; 0x3a2 <ioport_configure_port_pin>
    115e:	08 95       	ret

00001160 <ccp_write_io>:
    1160:	1b be       	out	0x3b, r1	; 59
    1162:	fc 01       	movw	r30, r24
    1164:	28 ed       	ldi	r18, 0xD8	; 216
    1166:	24 bf       	out	0x34, r18	; 52
    1168:	60 83       	st	Z, r22
    116a:	08 95       	ret

0000116c <nvm_read_byte>:
    116c:	40 91 ca 01 	lds	r20, 0x01CA
    1170:	e6 2f       	mov	r30, r22
    1172:	f7 2f       	mov	r31, r23
    1174:	80 93 ca 01 	sts	0x01CA, r24
    1178:	84 91       	lpm	r24, Z
    117a:	40 93 ca 01 	sts	0x01CA, r20
    117e:	08 95       	ret

00001180 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1180:	81 11       	cpse	r24, r1
    1182:	18 c0       	rjmp	.+48     	; 0x11b4 <udd_sleep_mode+0x34>
    1184:	90 91 9c 27 	lds	r25, 0x279C
    1188:	99 23       	and	r25, r25
    118a:	89 f0       	breq	.+34     	; 0x11ae <udd_sleep_mode+0x2e>
    118c:	2f b7       	in	r18, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	ed e9       	ldi	r30, 0x9D	; 157
    1192:	f7 e2       	ldi	r31, 0x27	; 39
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	91 50       	subi	r25, 0x01	; 1
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	2f bf       	out	0x3f, r18	; 63
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <udd_sleep_mode+0x2e>
    119e:	2f b7       	in	r18, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	ed e9       	ldi	r30, 0x9D	; 157
    11a4:	f7 e2       	ldi	r31, 0x27	; 39
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	2f bf       	out	0x3f, r18	; 63
    11ae:	80 93 9c 27 	sts	0x279C, r24
    11b2:	08 95       	ret
    11b4:	90 91 9c 27 	lds	r25, 0x279C
    11b8:	99 23       	and	r25, r25
    11ba:	89 f3       	breq	.-30     	; 0x119e <udd_sleep_mode+0x1e>
    11bc:	f8 cf       	rjmp	.-16     	; 0x11ae <udd_sleep_mode+0x2e>

000011be <udd_ctrl_init>:
    11be:	0f 93       	push	r16
    11c0:	e8 ec       	ldi	r30, 0xC8	; 200
    11c2:	f4 e0       	ldi	r31, 0x04	; 4
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 7d       	andi	r24, 0xDF	; 223
    11c8:	80 83       	st	Z, r24
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	80 83       	st	Z, r24
    11d0:	e0 e7       	ldi	r30, 0x70	; 112
    11d2:	f7 e2       	ldi	r31, 0x27	; 39
    11d4:	02 e0       	ldi	r16, 0x02	; 2
    11d6:	05 93       	las	Z, r16
    11d8:	10 92 72 27 	sts	0x2772, r1
    11dc:	10 92 73 27 	sts	0x2773, r1
    11e0:	00 e2       	ldi	r16, 0x20	; 32
    11e2:	06 93       	lac	Z, r16
    11e4:	00 e4       	ldi	r16, 0x40	; 64
    11e6:	06 93       	lac	Z, r16
    11e8:	e8 e6       	ldi	r30, 0x68	; 104
    11ea:	f7 e2       	ldi	r31, 0x27	; 39
    11ec:	00 e2       	ldi	r16, 0x20	; 32
    11ee:	06 93       	lac	Z, r16
    11f0:	00 e4       	ldi	r16, 0x40	; 64
    11f2:	06 93       	lac	Z, r16
    11f4:	e9 ea       	ldi	r30, 0xA9	; 169
    11f6:	f7 e2       	ldi	r31, 0x27	; 39
    11f8:	14 86       	std	Z+12, r1	; 0x0c
    11fa:	15 86       	std	Z+13, r1	; 0x0d
    11fc:	16 86       	std	Z+14, r1	; 0x0e
    11fe:	17 86       	std	Z+15, r1	; 0x0f
    1200:	12 86       	std	Z+10, r1	; 0x0a
    1202:	13 86       	std	Z+11, r1	; 0x0b
    1204:	10 92 59 27 	sts	0x2759, r1
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <udd_ctrl_stall_data>:
    120c:	0f 93       	push	r16
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	80 93 59 27 	sts	0x2759, r24
    1214:	e1 e7       	ldi	r30, 0x71	; 113
    1216:	f7 e2       	ldi	r31, 0x27	; 39
    1218:	04 e0       	ldi	r16, 0x04	; 4
    121a:	05 93       	las	Z, r16
    121c:	e9 e6       	ldi	r30, 0x69	; 105
    121e:	f7 e2       	ldi	r31, 0x27	; 39
    1220:	04 e0       	ldi	r16, 0x04	; 4
    1222:	05 93       	las	Z, r16
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <udd_ctrl_send_zlp_in>:
    1228:	0f 93       	push	r16
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	80 93 59 27 	sts	0x2759, r24
    1230:	10 92 72 27 	sts	0x2772, r1
    1234:	10 92 73 27 	sts	0x2773, r1
    1238:	e0 e7       	ldi	r30, 0x70	; 112
    123a:	f7 e2       	ldi	r31, 0x27	; 39
    123c:	02 e0       	ldi	r16, 0x02	; 2
    123e:	06 93       	lac	Z, r16
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <udd_ctrl_endofrequest>:
    1244:	e0 91 b5 27 	lds	r30, 0x27B5
    1248:	f0 91 b6 27 	lds	r31, 0x27B6
    124c:	30 97       	sbiw	r30, 0x00	; 0
    124e:	09 f0       	breq	.+2      	; 0x1252 <udd_ctrl_endofrequest+0xe>
    1250:	19 95       	eicall
    1252:	08 95       	ret

00001254 <udd_ctrl_in_sent>:
    1254:	0f 93       	push	r16
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	80 91 59 27 	lds	r24, 0x2759
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	19 f4       	brne	.+6      	; 0x1268 <udd_ctrl_in_sent+0x14>
    1262:	f0 df       	rcall	.-32     	; 0x1244 <udd_ctrl_endofrequest>
    1264:	ac df       	rcall	.-168    	; 0x11be <udd_ctrl_init>
    1266:	5e c0       	rjmp	.+188    	; 0x1324 <udd_ctrl_in_sent+0xd0>
    1268:	80 91 55 27 	lds	r24, 0x2755
    126c:	90 91 56 27 	lds	r25, 0x2756
    1270:	c0 91 b3 27 	lds	r28, 0x27B3
    1274:	d0 91 b4 27 	lds	r29, 0x27B4
    1278:	c8 1b       	sub	r28, r24
    127a:	d9 0b       	sbc	r29, r25
    127c:	71 f5       	brne	.+92     	; 0x12da <udd_ctrl_in_sent+0x86>
    127e:	20 91 57 27 	lds	r18, 0x2757
    1282:	30 91 58 27 	lds	r19, 0x2758
    1286:	82 0f       	add	r24, r18
    1288:	93 1f       	adc	r25, r19
    128a:	80 93 57 27 	sts	0x2757, r24
    128e:	90 93 58 27 	sts	0x2758, r25
    1292:	20 91 af 27 	lds	r18, 0x27AF
    1296:	30 91 b0 27 	lds	r19, 0x27B0
    129a:	82 17       	cp	r24, r18
    129c:	93 07       	cpc	r25, r19
    129e:	21 f0       	breq	.+8      	; 0x12a8 <udd_ctrl_in_sent+0x54>
    12a0:	80 91 70 26 	lds	r24, 0x2670
    12a4:	88 23       	and	r24, r24
    12a6:	41 f0       	breq	.+16     	; 0x12b8 <udd_ctrl_in_sent+0x64>
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	80 93 59 27 	sts	0x2759, r24
    12ae:	e8 e6       	ldi	r30, 0x68	; 104
    12b0:	f7 e2       	ldi	r31, 0x27	; 39
    12b2:	02 e0       	ldi	r16, 0x02	; 2
    12b4:	06 93       	lac	Z, r16
    12b6:	36 c0       	rjmp	.+108    	; 0x1324 <udd_ctrl_in_sent+0xd0>
    12b8:	e0 91 b7 27 	lds	r30, 0x27B7
    12bc:	f0 91 b8 27 	lds	r31, 0x27B8
    12c0:	30 97       	sbiw	r30, 0x00	; 0
    12c2:	99 f0       	breq	.+38     	; 0x12ea <udd_ctrl_in_sent+0x96>
    12c4:	19 95       	eicall
    12c6:	88 23       	and	r24, r24
    12c8:	81 f0       	breq	.+32     	; 0x12ea <udd_ctrl_in_sent+0x96>
    12ca:	10 92 55 27 	sts	0x2755, r1
    12ce:	10 92 56 27 	sts	0x2756, r1
    12d2:	c0 91 b3 27 	lds	r28, 0x27B3
    12d6:	d0 91 b4 27 	lds	r29, 0x27B4
    12da:	c0 34       	cpi	r28, 0x40	; 64
    12dc:	d1 05       	cpc	r29, r1
    12de:	28 f0       	brcs	.+10     	; 0x12ea <udd_ctrl_in_sent+0x96>
    12e0:	10 92 70 26 	sts	0x2670, r1
    12e4:	c0 e4       	ldi	r28, 0x40	; 64
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <udd_ctrl_in_sent+0x9c>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 70 26 	sts	0x2670, r24
    12f0:	ec e5       	ldi	r30, 0x5C	; 92
    12f2:	f7 e2       	ldi	r31, 0x27	; 39
    12f4:	c6 8b       	std	Z+22, r28	; 0x16
    12f6:	d7 8b       	std	Z+23, r29	; 0x17
    12f8:	80 91 55 27 	lds	r24, 0x2755
    12fc:	90 91 56 27 	lds	r25, 0x2756
    1300:	20 91 b1 27 	lds	r18, 0x27B1
    1304:	30 91 b2 27 	lds	r19, 0x27B2
    1308:	28 0f       	add	r18, r24
    130a:	39 1f       	adc	r19, r25
    130c:	20 8f       	std	Z+24, r18	; 0x18
    130e:	31 8f       	std	Z+25, r19	; 0x19
    1310:	c8 0f       	add	r28, r24
    1312:	d9 1f       	adc	r29, r25
    1314:	c0 93 55 27 	sts	0x2755, r28
    1318:	d0 93 56 27 	sts	0x2756, r29
    131c:	e0 e7       	ldi	r30, 0x70	; 112
    131e:	f7 e2       	ldi	r31, 0x27	; 39
    1320:	02 e0       	ldi	r16, 0x02	; 2
    1322:	06 93       	lac	Z, r16
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <udd_ep_get_size>:
    132c:	fc 01       	movw	r30, r24
    132e:	81 81       	ldd	r24, Z+1	; 0x01
    1330:	e8 2f       	mov	r30, r24
    1332:	e7 70       	andi	r30, 0x07	; 7
    1334:	8e 2f       	mov	r24, r30
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	e7 30       	cpi	r30, 0x07	; 7
    133e:	f1 05       	cpc	r31, r1
    1340:	d8 f4       	brcc	.+54     	; 0x1378 <udd_ep_get_size+0x4c>
    1342:	88 27       	eor	r24, r24
    1344:	e2 50       	subi	r30, 0x02	; 2
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__tablejump2__>
    134e:	80 e1       	ldi	r24, 0x10	; 16
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	08 95       	ret
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	08 95       	ret
    135a:	80 e4       	ldi	r24, 0x40	; 64
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	08 95       	ret
    1360:	80 e8       	ldi	r24, 0x80	; 128
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	08 95       	ret
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	08 95       	ret
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	08 95       	ret
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	93 e0       	ldi	r25, 0x03	; 3
    1376:	08 95       	ret
    1378:	88 e0       	ldi	r24, 0x08	; 8
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	08 95       	ret

0000137e <udd_ep_get_job>:
    137e:	28 2f       	mov	r18, r24
    1380:	2f 70       	andi	r18, 0x0F	; 15
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	22 0f       	add	r18, r18
    1386:	33 1f       	adc	r19, r19
    1388:	08 2e       	mov	r0, r24
    138a:	00 0c       	add	r0, r0
    138c:	99 0b       	sbc	r25, r25
    138e:	88 27       	eor	r24, r24
    1390:	99 0f       	add	r25, r25
    1392:	88 1f       	adc	r24, r24
    1394:	99 27       	eor	r25, r25
    1396:	82 0f       	add	r24, r18
    1398:	93 1f       	adc	r25, r19
    139a:	02 97       	sbiw	r24, 0x02	; 2
    139c:	9c 01       	movw	r18, r24
    139e:	22 0f       	add	r18, r18
    13a0:	33 1f       	adc	r19, r19
    13a2:	22 0f       	add	r18, r18
    13a4:	33 1f       	adc	r19, r19
    13a6:	22 0f       	add	r18, r18
    13a8:	33 1f       	adc	r19, r19
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	8f 50       	subi	r24, 0x0F	; 15
    13b0:	99 4d       	sbci	r25, 0xD9	; 217
    13b2:	08 95       	ret

000013b4 <udd_ctrl_interrupt_tc_setup>:
    13b4:	0f 93       	push	r16
    13b6:	cf 93       	push	r28
    13b8:	80 91 cc 04 	lds	r24, 0x04CC
    13bc:	80 ff       	sbrs	r24, 0
    13be:	62 c0       	rjmp	.+196    	; 0x1484 <udd_ctrl_interrupt_tc_setup+0xd0>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 cc 04 	sts	0x04CC, r24
    13c6:	e8 e6       	ldi	r30, 0x68	; 104
    13c8:	f7 e2       	ldi	r31, 0x27	; 39
    13ca:	00 e8       	ldi	r16, 0x80	; 128
    13cc:	06 93       	lac	Z, r16
    13ce:	e0 e7       	ldi	r30, 0x70	; 112
    13d0:	f7 e2       	ldi	r31, 0x27	; 39
    13d2:	00 e8       	ldi	r16, 0x80	; 128
    13d4:	06 93       	lac	Z, r16
    13d6:	80 93 ca 04 	sts	0x04CA, r24
    13da:	e8 e6       	ldi	r30, 0x68	; 104
    13dc:	f7 e2       	ldi	r31, 0x27	; 39
    13de:	00 e1       	ldi	r16, 0x10	; 16
    13e0:	06 93       	lac	Z, r16
    13e2:	80 91 59 27 	lds	r24, 0x2759
    13e6:	88 23       	and	r24, r24
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <udd_ctrl_interrupt_tc_setup+0x40>
    13ea:	83 50       	subi	r24, 0x03	; 3
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <udd_ctrl_interrupt_tc_setup+0x3e>
    13f0:	29 df       	rcall	.-430    	; 0x1244 <udd_ctrl_endofrequest>
    13f2:	e5 de       	rcall	.-566    	; 0x11be <udd_ctrl_init>
    13f4:	80 91 6a 27 	lds	r24, 0x276A
    13f8:	90 91 6b 27 	lds	r25, 0x276B
    13fc:	08 97       	sbiw	r24, 0x08	; 8
    13fe:	09 f0       	breq	.+2      	; 0x1402 <udd_ctrl_interrupt_tc_setup+0x4e>
    1400:	43 c0       	rjmp	.+134    	; 0x1488 <udd_ctrl_interrupt_tc_setup+0xd4>
    1402:	88 e0       	ldi	r24, 0x08	; 8
    1404:	e5 e1       	ldi	r30, 0x15	; 21
    1406:	f7 e2       	ldi	r31, 0x27	; 39
    1408:	a9 ea       	ldi	r26, 0xA9	; 169
    140a:	b7 e2       	ldi	r27, 0x27	; 39
    140c:	01 90       	ld	r0, Z+
    140e:	0d 92       	st	X+, r0
    1410:	8a 95       	dec	r24
    1412:	e1 f7       	brne	.-8      	; 0x140c <udd_ctrl_interrupt_tc_setup+0x58>
    1414:	e8 ec       	ldi	r30, 0xC8	; 200
    1416:	f4 e0       	ldi	r31, 0x04	; 4
    1418:	80 81       	ld	r24, Z
    141a:	80 62       	ori	r24, 0x20	; 32
    141c:	80 83       	st	Z, r24
    141e:	80 81       	ld	r24, Z
    1420:	80 62       	ori	r24, 0x20	; 32
    1422:	80 83       	st	Z, r24
    1424:	cd db       	rcall	.-2150   	; 0xbc0 <udc_process_setup>
    1426:	c8 2f       	mov	r28, r24
    1428:	81 11       	cpse	r24, r1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <udd_ctrl_interrupt_tc_setup+0x7e>
    142c:	ef de       	rcall	.-546    	; 0x120c <udd_ctrl_stall_data>
    142e:	c1 e0       	ldi	r28, 0x01	; 1
    1430:	2c c0       	rjmp	.+88     	; 0x148a <udd_ctrl_interrupt_tc_setup+0xd6>
    1432:	80 91 a9 27 	lds	r24, 0x27A9
    1436:	88 23       	and	r24, r24
    1438:	6c f4       	brge	.+26     	; 0x1454 <udd_ctrl_interrupt_tc_setup+0xa0>
    143a:	10 92 57 27 	sts	0x2757, r1
    143e:	10 92 58 27 	sts	0x2758, r1
    1442:	10 92 55 27 	sts	0x2755, r1
    1446:	10 92 56 27 	sts	0x2756, r1
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	80 93 59 27 	sts	0x2759, r24
    1450:	01 df       	rcall	.-510    	; 0x1254 <udd_ctrl_in_sent>
    1452:	1b c0       	rjmp	.+54     	; 0x148a <udd_ctrl_interrupt_tc_setup+0xd6>
    1454:	80 91 af 27 	lds	r24, 0x27AF
    1458:	90 91 b0 27 	lds	r25, 0x27B0
    145c:	89 2b       	or	r24, r25
    145e:	11 f4       	brne	.+4      	; 0x1464 <udd_ctrl_interrupt_tc_setup+0xb0>
    1460:	e3 de       	rcall	.-570    	; 0x1228 <udd_ctrl_send_zlp_in>
    1462:	13 c0       	rjmp	.+38     	; 0x148a <udd_ctrl_interrupt_tc_setup+0xd6>
    1464:	10 92 57 27 	sts	0x2757, r1
    1468:	10 92 58 27 	sts	0x2758, r1
    146c:	10 92 55 27 	sts	0x2755, r1
    1470:	10 92 56 27 	sts	0x2756, r1
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 59 27 	sts	0x2759, r24
    147a:	e8 e6       	ldi	r30, 0x68	; 104
    147c:	f7 e2       	ldi	r31, 0x27	; 39
    147e:	02 e0       	ldi	r16, 0x02	; 2
    1480:	06 93       	lac	Z, r16
    1482:	03 c0       	rjmp	.+6      	; 0x148a <udd_ctrl_interrupt_tc_setup+0xd6>
    1484:	c0 e0       	ldi	r28, 0x00	; 0
    1486:	01 c0       	rjmp	.+2      	; 0x148a <udd_ctrl_interrupt_tc_setup+0xd6>
    1488:	c1 e0       	ldi	r28, 0x01	; 1
    148a:	8c 2f       	mov	r24, r28
    148c:	cf 91       	pop	r28
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret

00001492 <udd_ep_trans_complet>:
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	d8 2e       	mov	r13, r24
    14aa:	69 df       	rcall	.-302    	; 0x137e <udd_ep_get_job>
    14ac:	8c 01       	movw	r16, r24
    14ae:	bd 2c       	mov	r11, r13
    14b0:	bb 1c       	adc	r11, r11
    14b2:	bb 24       	eor	r11, r11
    14b4:	bb 1c       	adc	r11, r11
    14b6:	cd 2d       	mov	r28, r13
    14b8:	cf 70       	andi	r28, 0x0F	; 15
    14ba:	d0 e0       	ldi	r29, 0x00	; 0
    14bc:	cc 0f       	add	r28, r28
    14be:	dd 1f       	adc	r29, r29
    14c0:	cb 0d       	add	r28, r11
    14c2:	d1 1d       	adc	r29, r1
    14c4:	ce 01       	movw	r24, r28
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	9c 01       	movw	r18, r24
    14d4:	28 59       	subi	r18, 0x98	; 152
    14d6:	38 4d       	sbci	r19, 0xD8	; 216
    14d8:	79 01       	movw	r14, r18
    14da:	c9 01       	movw	r24, r18
    14dc:	27 df       	rcall	.-434    	; 0x132c <udd_ep_get_size>
    14de:	4c 01       	movw	r8, r24
    14e0:	bb 20       	and	r11, r11
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <udd_ep_trans_complet+0x54>
    14e4:	79 c0       	rjmp	.+242    	; 0x15d8 <udd_ep_trans_complet+0x146>
    14e6:	fe 01       	movw	r30, r28
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	e4 5a       	subi	r30, 0xA4	; 164
    14f6:	f8 4d       	sbci	r31, 0xD8	; 216
    14f8:	22 89       	ldd	r18, Z+18	; 0x12
    14fa:	33 89       	ldd	r19, Z+19	; 0x13
    14fc:	d8 01       	movw	r26, r16
    14fe:	15 96       	adiw	r26, 0x05	; 5
    1500:	8d 91       	ld	r24, X+
    1502:	9c 91       	ld	r25, X
    1504:	16 97       	sbiw	r26, 0x06	; 6
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	15 96       	adiw	r26, 0x05	; 5
    150c:	8d 93       	st	X+, r24
    150e:	9c 93       	st	X, r25
    1510:	16 97       	sbiw	r26, 0x06	; 6
    1512:	13 96       	adiw	r26, 0x03	; 3
    1514:	2d 91       	ld	r18, X+
    1516:	3c 91       	ld	r19, X
    1518:	14 97       	sbiw	r26, 0x04	; 4
    151a:	82 17       	cp	r24, r18
    151c:	93 07       	cpc	r25, r19
    151e:	09 f4       	brne	.+2      	; 0x1522 <udd_ep_trans_complet+0x90>
    1520:	45 c0       	rjmp	.+138    	; 0x15ac <udd_ep_trans_complet+0x11a>
    1522:	28 1b       	sub	r18, r24
    1524:	39 0b       	sbc	r19, r25
    1526:	21 15       	cp	r18, r1
    1528:	b4 e0       	ldi	r27, 0x04	; 4
    152a:	3b 07       	cpc	r19, r27
    152c:	38 f0       	brcs	.+14     	; 0x153c <udd_ep_trans_complet+0xaa>
    152e:	2f ef       	ldi	r18, 0xFF	; 255
    1530:	33 e0       	ldi	r19, 0x03	; 3
    1532:	c9 01       	movw	r24, r18
    1534:	b4 01       	movw	r22, r8
    1536:	8a d7       	rcall	.+3860   	; 0x244c <__udivmodhi4>
    1538:	28 1b       	sub	r18, r24
    153a:	39 0b       	sbc	r19, r25
    153c:	f8 01       	movw	r30, r16
    153e:	80 81       	ld	r24, Z
    1540:	81 ff       	sbrs	r24, 1
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <udd_ep_trans_complet+0xc4>
    1544:	c9 01       	movw	r24, r18
    1546:	b4 01       	movw	r22, r8
    1548:	81 d7       	rcall	.+3842   	; 0x244c <__udivmodhi4>
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	89 2b       	or	r24, r25
    154e:	09 f0       	breq	.+2      	; 0x1552 <udd_ep_trans_complet+0xc0>
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	84 2f       	mov	r24, r20
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <udd_ep_trans_complet+0xc6>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	d8 01       	movw	r26, r16
    155a:	9c 91       	ld	r25, X
    155c:	80 fb       	bst	r24, 0
    155e:	91 f9       	bld	r25, 1
    1560:	9c 93       	st	X, r25
    1562:	fe 01       	movw	r30, r28
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	e4 5a       	subi	r30, 0xA4	; 164
    1572:	f8 4d       	sbci	r31, 0xD8	; 216
    1574:	12 8a       	std	Z+18, r1	; 0x12
    1576:	13 8a       	std	Z+19, r1	; 0x13
    1578:	26 87       	std	Z+14, r18	; 0x0e
    157a:	37 87       	std	Z+15, r19	; 0x0f
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	2d 91       	ld	r18, X+
    1580:	3c 91       	ld	r19, X
    1582:	12 97       	sbiw	r26, 0x02	; 2
    1584:	15 96       	adiw	r26, 0x05	; 5
    1586:	8d 91       	ld	r24, X+
    1588:	9c 91       	ld	r25, X
    158a:	16 97       	sbiw	r26, 0x06	; 6
    158c:	82 0f       	add	r24, r18
    158e:	93 1f       	adc	r25, r19
    1590:	cc 0f       	add	r28, r28
    1592:	dd 1f       	adc	r29, r29
    1594:	cc 0f       	add	r28, r28
    1596:	dd 1f       	adc	r29, r29
    1598:	cc 0f       	add	r28, r28
    159a:	dd 1f       	adc	r29, r29
    159c:	c4 59       	subi	r28, 0x94	; 148
    159e:	d8 4d       	sbci	r29, 0xD8	; 216
    15a0:	88 83       	st	Y, r24
    15a2:	99 83       	std	Y+1, r25	; 0x01
    15a4:	f7 01       	movw	r30, r14
    15a6:	02 e0       	ldi	r16, 0x02	; 2
    15a8:	06 93       	lac	Z, r16
    15aa:	e4 c0       	rjmp	.+456    	; 0x1774 <udd_ep_trans_complet+0x2e2>
    15ac:	d8 01       	movw	r26, r16
    15ae:	8c 91       	ld	r24, X
    15b0:	81 ff       	sbrs	r24, 1
    15b2:	cd c0       	rjmp	.+410    	; 0x174e <udd_ep_trans_complet+0x2bc>
    15b4:	8d 7f       	andi	r24, 0xFD	; 253
    15b6:	8c 93       	st	X, r24
    15b8:	cc 0f       	add	r28, r28
    15ba:	dd 1f       	adc	r29, r29
    15bc:	cc 0f       	add	r28, r28
    15be:	dd 1f       	adc	r29, r29
    15c0:	cc 0f       	add	r28, r28
    15c2:	dd 1f       	adc	r29, r29
    15c4:	c4 5a       	subi	r28, 0xA4	; 164
    15c6:	d8 4d       	sbci	r29, 0xD8	; 216
    15c8:	1a 8a       	std	Y+18, r1	; 0x12
    15ca:	1b 8a       	std	Y+19, r1	; 0x13
    15cc:	1e 86       	std	Y+14, r1	; 0x0e
    15ce:	1f 86       	std	Y+15, r1	; 0x0f
    15d0:	f7 01       	movw	r30, r14
    15d2:	02 e0       	ldi	r16, 0x02	; 2
    15d4:	06 93       	lac	Z, r16
    15d6:	ce c0       	rjmp	.+412    	; 0x1774 <udd_ep_trans_complet+0x2e2>
    15d8:	fe 01       	movw	r30, r28
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	e4 5a       	subi	r30, 0xA4	; 164
    15e8:	f8 4d       	sbci	r31, 0xD8	; 216
    15ea:	a6 84       	ldd	r10, Z+14	; 0x0e
    15ec:	b7 84       	ldd	r11, Z+15	; 0x0f
    15ee:	d8 01       	movw	r26, r16
    15f0:	8c 91       	ld	r24, X
    15f2:	82 ff       	sbrs	r24, 2
    15f4:	19 c0       	rjmp	.+50     	; 0x1628 <udd_ep_trans_complet+0x196>
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	ed 91       	ld	r30, X+
    15fa:	fc 91       	ld	r31, X
    15fc:	12 97       	sbiw	r26, 0x02	; 2
    15fe:	15 96       	adiw	r26, 0x05	; 5
    1600:	2d 91       	ld	r18, X+
    1602:	3c 91       	ld	r19, X
    1604:	16 97       	sbiw	r26, 0x06	; 6
    1606:	13 96       	adiw	r26, 0x03	; 3
    1608:	8d 91       	ld	r24, X+
    160a:	9c 91       	ld	r25, X
    160c:	14 97       	sbiw	r26, 0x04	; 4
    160e:	b4 01       	movw	r22, r8
    1610:	1d d7       	rcall	.+3642   	; 0x244c <__udivmodhi4>
    1612:	b0 e4       	ldi	r27, 0x40	; 64
    1614:	db 9e       	mul	r13, r27
    1616:	b0 01       	movw	r22, r0
    1618:	11 24       	eor	r1, r1
    161a:	6f 5c       	subi	r22, 0xCF	; 207
    161c:	79 4d       	sbci	r23, 0xD9	; 217
    161e:	ac 01       	movw	r20, r24
    1620:	cf 01       	movw	r24, r30
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	50 d7       	rcall	.+3744   	; 0x24c8 <memcpy>
    1628:	f8 01       	movw	r30, r16
    162a:	25 81       	ldd	r18, Z+5	; 0x05
    162c:	36 81       	ldd	r19, Z+6	; 0x06
    162e:	2a 0d       	add	r18, r10
    1630:	3b 1d       	adc	r19, r11
    1632:	25 83       	std	Z+5, r18	; 0x05
    1634:	36 83       	std	Z+6, r19	; 0x06
    1636:	83 81       	ldd	r24, Z+3	; 0x03
    1638:	94 81       	ldd	r25, Z+4	; 0x04
    163a:	82 17       	cp	r24, r18
    163c:	93 07       	cpc	r25, r19
    163e:	68 f4       	brcc	.+26     	; 0x165a <udd_ep_trans_complet+0x1c8>
    1640:	85 83       	std	Z+5, r24	; 0x05
    1642:	96 83       	std	Z+6, r25	; 0x06
    1644:	cc 0f       	add	r28, r28
    1646:	dd 1f       	adc	r29, r29
    1648:	cc 0f       	add	r28, r28
    164a:	dd 1f       	adc	r29, r29
    164c:	cc 0f       	add	r28, r28
    164e:	dd 1f       	adc	r29, r29
    1650:	c4 5a       	subi	r28, 0xA4	; 164
    1652:	d8 4d       	sbci	r29, 0xD8	; 216
    1654:	8a 89       	ldd	r24, Y+18	; 0x12
    1656:	9b 89       	ldd	r25, Y+19	; 0x13
    1658:	7a c0       	rjmp	.+244    	; 0x174e <udd_ep_trans_complet+0x2bc>
    165a:	fe 01       	movw	r30, r28
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	e4 5a       	subi	r30, 0xA4	; 164
    166a:	f8 4d       	sbci	r31, 0xD8	; 216
    166c:	42 89       	ldd	r20, Z+18	; 0x12
    166e:	53 89       	ldd	r21, Z+19	; 0x13
    1670:	4a 15       	cp	r20, r10
    1672:	5b 05       	cpc	r21, r11
    1674:	09 f0       	breq	.+2      	; 0x1678 <udd_ep_trans_complet+0x1e6>
    1676:	6b c0       	rjmp	.+214    	; 0x174e <udd_ep_trans_complet+0x2bc>
    1678:	28 17       	cp	r18, r24
    167a:	39 07       	cpc	r19, r25
    167c:	09 f4       	brne	.+2      	; 0x1680 <udd_ep_trans_complet+0x1ee>
    167e:	67 c0       	rjmp	.+206    	; 0x174e <udd_ep_trans_complet+0x2bc>
    1680:	ac 01       	movw	r20, r24
    1682:	42 1b       	sub	r20, r18
    1684:	53 0b       	sbc	r21, r19
    1686:	9a 01       	movw	r18, r20
    1688:	21 15       	cp	r18, r1
    168a:	54 e0       	ldi	r21, 0x04	; 4
    168c:	35 07       	cpc	r19, r21
    168e:	50 f0       	brcs	.+20     	; 0x16a4 <udd_ep_trans_complet+0x212>
    1690:	2f ef       	ldi	r18, 0xFF	; 255
    1692:	33 e0       	ldi	r19, 0x03	; 3
    1694:	c9 01       	movw	r24, r18
    1696:	b4 01       	movw	r22, r8
    1698:	d9 d6       	rcall	.+3506   	; 0x244c <__udivmodhi4>
    169a:	d9 01       	movw	r26, r18
    169c:	a8 1b       	sub	r26, r24
    169e:	b9 0b       	sbc	r27, r25
    16a0:	cd 01       	movw	r24, r26
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <udd_ep_trans_complet+0x220>
    16a4:	c9 01       	movw	r24, r18
    16a6:	b4 01       	movw	r22, r8
    16a8:	d1 d6       	rcall	.+3490   	; 0x244c <__udivmodhi4>
    16aa:	f9 01       	movw	r30, r18
    16ac:	e8 1b       	sub	r30, r24
    16ae:	f9 0b       	sbc	r31, r25
    16b0:	cf 01       	movw	r24, r30
    16b2:	fe 01       	movw	r30, r28
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	e4 5a       	subi	r30, 0xA4	; 164
    16c2:	f8 4d       	sbci	r31, 0xD8	; 216
    16c4:	16 86       	std	Z+14, r1	; 0x0e
    16c6:	17 86       	std	Z+15, r1	; 0x0f
    16c8:	88 15       	cp	r24, r8
    16ca:	99 05       	cpc	r25, r9
    16cc:	00 f5       	brcc	.+64     	; 0x170e <udd_ep_trans_complet+0x27c>
    16ce:	d8 01       	movw	r26, r16
    16d0:	8c 91       	ld	r24, X
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	8c 93       	st	X, r24
    16d6:	b0 e4       	ldi	r27, 0x40	; 64
    16d8:	db 9e       	mul	r13, r27
    16da:	c0 01       	movw	r24, r0
    16dc:	11 24       	eor	r1, r1
    16de:	8f 5c       	subi	r24, 0xCF	; 207
    16e0:	99 4d       	sbci	r25, 0xD9	; 217
    16e2:	fe 01       	movw	r30, r28
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	e4 59       	subi	r30, 0x94	; 148
    16f2:	f8 4d       	sbci	r31, 0xD8	; 216
    16f4:	80 83       	st	Z, r24
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	cc 0f       	add	r28, r28
    16fa:	dd 1f       	adc	r29, r29
    16fc:	cc 0f       	add	r28, r28
    16fe:	dd 1f       	adc	r29, r29
    1700:	cc 0f       	add	r28, r28
    1702:	dd 1f       	adc	r29, r29
    1704:	c4 5a       	subi	r28, 0xA4	; 164
    1706:	d8 4d       	sbci	r29, 0xD8	; 216
    1708:	8a 8a       	std	Y+18, r8	; 0x12
    170a:	9b 8a       	std	Y+19, r9	; 0x13
    170c:	1c c0       	rjmp	.+56     	; 0x1746 <udd_ep_trans_complet+0x2b4>
    170e:	f8 01       	movw	r30, r16
    1710:	41 81       	ldd	r20, Z+1	; 0x01
    1712:	52 81       	ldd	r21, Z+2	; 0x02
    1714:	25 81       	ldd	r18, Z+5	; 0x05
    1716:	36 81       	ldd	r19, Z+6	; 0x06
    1718:	24 0f       	add	r18, r20
    171a:	35 1f       	adc	r19, r21
    171c:	fe 01       	movw	r30, r28
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	e4 59       	subi	r30, 0x94	; 148
    172c:	f8 4d       	sbci	r31, 0xD8	; 216
    172e:	20 83       	st	Z, r18
    1730:	31 83       	std	Z+1, r19	; 0x01
    1732:	cc 0f       	add	r28, r28
    1734:	dd 1f       	adc	r29, r29
    1736:	cc 0f       	add	r28, r28
    1738:	dd 1f       	adc	r29, r29
    173a:	cc 0f       	add	r28, r28
    173c:	dd 1f       	adc	r29, r29
    173e:	c4 5a       	subi	r28, 0xA4	; 164
    1740:	d8 4d       	sbci	r29, 0xD8	; 216
    1742:	8a 8b       	std	Y+18, r24	; 0x12
    1744:	9b 8b       	std	Y+19, r25	; 0x13
    1746:	f7 01       	movw	r30, r14
    1748:	02 e0       	ldi	r16, 0x02	; 2
    174a:	06 93       	lac	Z, r16
    174c:	13 c0       	rjmp	.+38     	; 0x1774 <udd_ep_trans_complet+0x2e2>
    174e:	d8 01       	movw	r26, r16
    1750:	8c 91       	ld	r24, X
    1752:	80 ff       	sbrs	r24, 0
    1754:	0f c0       	rjmp	.+30     	; 0x1774 <udd_ep_trans_complet+0x2e2>
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	8c 93       	st	X, r24
    175a:	17 96       	adiw	r26, 0x07	; 7
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	18 97       	sbiw	r26, 0x08	; 8
    1762:	30 97       	sbiw	r30, 0x00	; 0
    1764:	39 f0       	breq	.+14     	; 0x1774 <udd_ep_trans_complet+0x2e2>
    1766:	15 96       	adiw	r26, 0x05	; 5
    1768:	6d 91       	ld	r22, X+
    176a:	7c 91       	ld	r23, X
    176c:	16 97       	sbiw	r26, 0x06	; 6
    176e:	4d 2d       	mov	r20, r13
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	19 95       	eicall
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	08 95       	ret

0000178c <udd_enable>:
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	c0 e6       	ldi	r28, 0x60	; 96
    1792:	d0 e0       	ldi	r29, 0x00	; 0
    1794:	18 82       	st	Y, r1
    1796:	80 e3       	ldi	r24, 0x30	; 48
    1798:	0e 94 9a 01 	call	0x334	; 0x334 <sysclk_enable_usb>
    179c:	e0 ec       	ldi	r30, 0xC0	; 192
    179e:	f4 e0       	ldi	r31, 0x04	; 4
    17a0:	80 81       	ld	r24, Z
    17a2:	80 64       	ori	r24, 0x40	; 64
    17a4:	80 83       	st	Z, r24
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	88 83       	st	Y, r24
    17aa:	cf b7       	in	r28, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	ec e5       	ldi	r30, 0x5C	; 92
    17b0:	f7 e2       	ldi	r31, 0x27	; 39
    17b2:	15 86       	std	Z+13, r1	; 0x0d
    17b4:	15 8a       	std	Z+21, r1	; 0x15
    17b6:	15 8e       	std	Z+29, r1	; 0x1d
    17b8:	15 a2       	std	Z+37, r1	; 0x25
    17ba:	15 a6       	std	Z+45, r1	; 0x2d
    17bc:	15 aa       	std	Z+53, r1	; 0x35
    17be:	e1 ef       	ldi	r30, 0xF1	; 241
    17c0:	f6 e2       	ldi	r31, 0x26	; 38
    17c2:	80 81       	ld	r24, Z
    17c4:	8e 7f       	andi	r24, 0xFE	; 254
    17c6:	80 83       	st	Z, r24
    17c8:	ea ef       	ldi	r30, 0xFA	; 250
    17ca:	f6 e2       	ldi	r31, 0x26	; 38
    17cc:	80 81       	ld	r24, Z
    17ce:	8e 7f       	andi	r24, 0xFE	; 254
    17d0:	80 83       	st	Z, r24
    17d2:	e3 e0       	ldi	r30, 0x03	; 3
    17d4:	f7 e2       	ldi	r31, 0x27	; 39
    17d6:	80 81       	ld	r24, Z
    17d8:	8e 7f       	andi	r24, 0xFE	; 254
    17da:	80 83       	st	Z, r24
    17dc:	ec e0       	ldi	r30, 0x0C	; 12
    17de:	f7 e2       	ldi	r31, 0x27	; 39
    17e0:	80 81       	ld	r24, Z
    17e2:	8e 7f       	andi	r24, 0xFE	; 254
    17e4:	80 83       	st	Z, r24
    17e6:	6a e1       	ldi	r22, 0x1A	; 26
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	bf dc       	rcall	.-1666   	; 0x116c <nvm_read_byte>
    17ee:	8f 3f       	cpi	r24, 0xFF	; 255
    17f0:	19 f0       	breq	.+6      	; 0x17f8 <udd_enable+0x6c>
    17f2:	80 93 fa 04 	sts	0x04FA, r24
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <udd_enable+0x72>
    17f8:	8f e1       	ldi	r24, 0x1F	; 31
    17fa:	80 93 fa 04 	sts	0x04FA, r24
    17fe:	6b e1       	ldi	r22, 0x1B	; 27
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	b3 dc       	rcall	.-1690   	; 0x116c <nvm_read_byte>
    1806:	8f 3f       	cpi	r24, 0xFF	; 255
    1808:	19 f0       	breq	.+6      	; 0x1810 <udd_enable+0x84>
    180a:	80 93 fb 04 	sts	0x04FB, r24
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <udd_enable+0x8a>
    1810:	8f e1       	ldi	r24, 0x1F	; 31
    1812:	80 93 fb 04 	sts	0x04FB, r24
    1816:	e0 ec       	ldi	r30, 0xC0	; 192
    1818:	f4 e0       	ldi	r31, 0x04	; 4
    181a:	80 81       	ld	r24, Z
    181c:	82 60       	ori	r24, 0x02	; 2
    181e:	80 83       	st	Z, r24
    1820:	80 81       	ld	r24, Z
    1822:	80 68       	ori	r24, 0x80	; 128
    1824:	80 83       	st	Z, r24
    1826:	80 81       	ld	r24, Z
    1828:	80 61       	ori	r24, 0x10	; 16
    182a:	80 83       	st	Z, r24
    182c:	88 e6       	ldi	r24, 0x68	; 104
    182e:	97 e2       	ldi	r25, 0x27	; 39
    1830:	86 83       	std	Z+6, r24	; 0x06
    1832:	97 83       	std	Z+7, r25	; 0x07
    1834:	80 81       	ld	r24, Z
    1836:	80 62       	ori	r24, 0x20	; 32
    1838:	80 83       	st	Z, r24
    183a:	8f ef       	ldi	r24, 0xFF	; 255
    183c:	80 93 c5 04 	sts	0x04C5, r24
    1840:	e8 ec       	ldi	r30, 0xC8	; 200
    1842:	f4 e0       	ldi	r31, 0x04	; 4
    1844:	80 81       	ld	r24, Z
    1846:	81 60       	ori	r24, 0x01	; 1
    1848:	80 83       	st	Z, r24
    184a:	10 92 9c 27 	sts	0x279C, r1
    184e:	9f b7       	in	r25, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	ed e9       	ldi	r30, 0x9D	; 157
    1854:	f7 e2       	ldi	r31, 0x27	; 39
    1856:	85 81       	ldd	r24, Z+5	; 0x05
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	85 83       	std	Z+5, r24	; 0x05
    185c:	9f bf       	out	0x3f, r25	; 63
    185e:	cf bf       	out	0x3f, r28	; 63
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <udd_include_vbus_monitoring>:
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret

0000186a <udd_attach>:
    186a:	cf 93       	push	r28
    186c:	cf b7       	in	r28, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	86 dc       	rcall	.-1780   	; 0x1180 <udd_sleep_mode>
    1874:	ea ec       	ldi	r30, 0xCA	; 202
    1876:	f4 e0       	ldi	r31, 0x04	; 4
    1878:	80 e4       	ldi	r24, 0x40	; 64
    187a:	80 83       	st	Z, r24
    187c:	80 e2       	ldi	r24, 0x20	; 32
    187e:	80 83       	st	Z, r24
    1880:	e1 ec       	ldi	r30, 0xC1	; 193
    1882:	f4 e0       	ldi	r31, 0x04	; 4
    1884:	80 81       	ld	r24, Z
    1886:	81 60       	ori	r24, 0x01	; 1
    1888:	80 83       	st	Z, r24
    188a:	a9 ec       	ldi	r26, 0xC9	; 201
    188c:	b4 e0       	ldi	r27, 0x04	; 4
    188e:	8c 91       	ld	r24, X
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	8c 93       	st	X, r24
    1894:	e8 ec       	ldi	r30, 0xC8	; 200
    1896:	f4 e0       	ldi	r31, 0x04	; 4
    1898:	80 81       	ld	r24, Z
    189a:	80 64       	ori	r24, 0x40	; 64
    189c:	80 83       	st	Z, r24
    189e:	8c 91       	ld	r24, X
    18a0:	81 60       	ori	r24, 0x01	; 1
    18a2:	8c 93       	st	X, r24
    18a4:	80 81       	ld	r24, Z
    18a6:	80 68       	ori	r24, 0x80	; 128
    18a8:	80 83       	st	Z, r24
    18aa:	cf bf       	out	0x3f, r28	; 63
    18ac:	cf 91       	pop	r28
    18ae:	08 95       	ret

000018b0 <udd_is_high_speed>:
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	08 95       	ret

000018b4 <udd_set_address>:
    18b4:	80 93 c3 04 	sts	0x04C3, r24
    18b8:	08 95       	ret

000018ba <udd_getaddress>:
    18ba:	80 91 c3 04 	lds	r24, 0x04C3
    18be:	08 95       	ret

000018c0 <udd_get_frame_number>:
    18c0:	80 91 98 27 	lds	r24, 0x2798
    18c4:	90 91 99 27 	lds	r25, 0x2799
    18c8:	08 95       	ret

000018ca <udd_get_micro_frame_number>:
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	08 95       	ret

000018d0 <udd_set_setup_payload>:
    18d0:	e9 ea       	ldi	r30, 0xA9	; 169
    18d2:	f7 e2       	ldi	r31, 0x27	; 39
    18d4:	80 87       	std	Z+8, r24	; 0x08
    18d6:	91 87       	std	Z+9, r25	; 0x09
    18d8:	62 87       	std	Z+10, r22	; 0x0a
    18da:	73 87       	std	Z+11, r23	; 0x0b
    18dc:	08 95       	ret

000018de <udd_ep_alloc>:
    18de:	28 2f       	mov	r18, r24
    18e0:	2f 70       	andi	r18, 0x0F	; 15
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	22 0f       	add	r18, r18
    18e6:	33 1f       	adc	r19, r19
    18e8:	08 2e       	mov	r0, r24
    18ea:	00 0c       	add	r0, r0
    18ec:	99 0b       	sbc	r25, r25
    18ee:	88 27       	eor	r24, r24
    18f0:	99 0f       	add	r25, r25
    18f2:	88 1f       	adc	r24, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	fc 01       	movw	r30, r24
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	e4 5a       	subi	r30, 0xA4	; 164
    190a:	f8 4d       	sbci	r31, 0xD8	; 216
    190c:	25 85       	ldd	r18, Z+13	; 0x0d
    190e:	20 7c       	andi	r18, 0xC0	; 192
    1910:	09 f0       	breq	.+2      	; 0x1914 <udd_ep_alloc+0x36>
    1912:	5f c0       	rjmp	.+190    	; 0x19d2 <udd_ep_alloc+0xf4>
    1914:	63 70       	andi	r22, 0x03	; 3
    1916:	61 30       	cpi	r22, 0x01	; 1
    1918:	19 f0       	breq	.+6      	; 0x1920 <udd_ep_alloc+0x42>
    191a:	20 f4       	brcc	.+8      	; 0x1924 <udd_ep_alloc+0x46>
    191c:	20 e4       	ldi	r18, 0x40	; 64
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <udd_ep_alloc+0x48>
    1920:	20 ec       	ldi	r18, 0xC0	; 192
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <udd_ep_alloc+0x48>
    1924:	20 e8       	ldi	r18, 0x80	; 128
    1926:	40 38       	cpi	r20, 0x80	; 128
    1928:	51 05       	cpc	r21, r1
    192a:	e9 f0       	breq	.+58     	; 0x1966 <udd_ep_alloc+0x88>
    192c:	50 f4       	brcc	.+20     	; 0x1942 <udd_ep_alloc+0x64>
    192e:	40 32       	cpi	r20, 0x20	; 32
    1930:	51 05       	cpc	r21, r1
    1932:	a9 f0       	breq	.+42     	; 0x195e <udd_ep_alloc+0x80>
    1934:	40 34       	cpi	r20, 0x40	; 64
    1936:	51 05       	cpc	r21, r1
    1938:	a1 f0       	breq	.+40     	; 0x1962 <udd_ep_alloc+0x84>
    193a:	40 31       	cpi	r20, 0x10	; 16
    193c:	51 05       	cpc	r21, r1
    193e:	d9 f4       	brne	.+54     	; 0x1976 <udd_ep_alloc+0x98>
    1940:	0c c0       	rjmp	.+24     	; 0x195a <udd_ep_alloc+0x7c>
    1942:	41 15       	cp	r20, r1
    1944:	32 e0       	ldi	r19, 0x02	; 2
    1946:	53 07       	cpc	r21, r19
    1948:	91 f0       	breq	.+36     	; 0x196e <udd_ep_alloc+0x90>
    194a:	4f 3f       	cpi	r20, 0xFF	; 255
    194c:	33 e0       	ldi	r19, 0x03	; 3
    194e:	53 07       	cpc	r21, r19
    1950:	81 f0       	breq	.+32     	; 0x1972 <udd_ep_alloc+0x94>
    1952:	41 15       	cp	r20, r1
    1954:	51 40       	sbci	r21, 0x01	; 1
    1956:	79 f4       	brne	.+30     	; 0x1976 <udd_ep_alloc+0x98>
    1958:	08 c0       	rjmp	.+16     	; 0x196a <udd_ep_alloc+0x8c>
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0d c0       	rjmp	.+26     	; 0x1978 <udd_ep_alloc+0x9a>
    195e:	42 e0       	ldi	r20, 0x02	; 2
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <udd_ep_alloc+0x9a>
    1962:	43 e0       	ldi	r20, 0x03	; 3
    1964:	09 c0       	rjmp	.+18     	; 0x1978 <udd_ep_alloc+0x9a>
    1966:	44 e0       	ldi	r20, 0x04	; 4
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <udd_ep_alloc+0x9a>
    196a:	45 e0       	ldi	r20, 0x05	; 5
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <udd_ep_alloc+0x9a>
    196e:	46 e0       	ldi	r20, 0x06	; 6
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <udd_ep_alloc+0x9a>
    1972:	47 e0       	ldi	r20, 0x07	; 7
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <udd_ep_alloc+0x9a>
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	fc 01       	movw	r30, r24
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	e4 5a       	subi	r30, 0xA4	; 164
    1988:	f8 4d       	sbci	r31, 0xD8	; 216
    198a:	15 86       	std	Z+13, r1	; 0x0d
    198c:	36 e0       	ldi	r19, 0x06	; 6
    198e:	34 87       	std	Z+12, r19	; 0x0c
    1990:	24 2b       	or	r18, r20
    1992:	25 87       	std	Z+13, r18	; 0x0d
    1994:	25 85       	ldd	r18, Z+13	; 0x0d
    1996:	20 7c       	andi	r18, 0xC0	; 192
    1998:	20 3c       	cpi	r18, 0xC0	; 192
    199a:	69 f4       	brne	.+26     	; 0x19b6 <udd_ep_alloc+0xd8>
    199c:	fc 01       	movw	r30, r24
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	ee 0f       	add	r30, r30
    19a8:	ff 1f       	adc	r31, r31
    19aa:	e4 5a       	subi	r30, 0xA4	; 164
    19ac:	f8 4d       	sbci	r31, 0xD8	; 216
    19ae:	25 85       	ldd	r18, Z+13	; 0x0d
    19b0:	27 70       	andi	r18, 0x07	; 7
    19b2:	27 30       	cpi	r18, 0x07	; 7
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <udd_ep_alloc+0xf8>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	fc 01       	movw	r30, r24
    19c4:	e4 5a       	subi	r30, 0xA4	; 164
    19c6:	f8 4d       	sbci	r31, 0xD8	; 216
    19c8:	85 85       	ldd	r24, Z+13	; 0x0d
    19ca:	80 62       	ori	r24, 0x20	; 32
    19cc:	85 87       	std	Z+13, r24	; 0x0d
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	08 95       	ret
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	08 95       	ret
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	08 95       	ret

000019da <udd_ep_is_halted>:
    19da:	e8 2f       	mov	r30, r24
    19dc:	ef 70       	andi	r30, 0x0F	; 15
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	ee 0f       	add	r30, r30
    19e2:	ff 1f       	adc	r31, r31
    19e4:	08 2e       	mov	r0, r24
    19e6:	00 0c       	add	r0, r0
    19e8:	99 0b       	sbc	r25, r25
    19ea:	88 27       	eor	r24, r24
    19ec:	99 0f       	add	r25, r25
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 27       	eor	r25, r25
    19f2:	e8 0f       	add	r30, r24
    19f4:	f9 1f       	adc	r31, r25
    19f6:	ee 0f       	add	r30, r30
    19f8:	ff 1f       	adc	r31, r31
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	e4 5a       	subi	r30, 0xA4	; 164
    1a04:	f8 4d       	sbci	r31, 0xD8	; 216
    1a06:	85 85       	ldd	r24, Z+13	; 0x0d
    1a08:	82 fb       	bst	r24, 2
    1a0a:	88 27       	eor	r24, r24
    1a0c:	80 f9       	bld	r24, 0
    1a0e:	08 95       	ret

00001a10 <udd_ep_clear_halt>:
    1a10:	28 2f       	mov	r18, r24
    1a12:	2f 70       	andi	r18, 0x0F	; 15
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	44 0f       	add	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	08 2e       	mov	r0, r24
    1a20:	00 0c       	add	r0, r0
    1a22:	33 0b       	sbc	r19, r19
    1a24:	22 27       	eor	r18, r18
    1a26:	33 0f       	add	r19, r19
    1a28:	22 1f       	adc	r18, r18
    1a2a:	33 27       	eor	r19, r19
    1a2c:	24 0f       	add	r18, r20
    1a2e:	35 1f       	adc	r19, r21
    1a30:	f9 01       	movw	r30, r18
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	ee 0f       	add	r30, r30
    1a3c:	ff 1f       	adc	r31, r31
    1a3e:	e4 5a       	subi	r30, 0xA4	; 164
    1a40:	f8 4d       	sbci	r31, 0xD8	; 216
    1a42:	95 85       	ldd	r25, Z+13	; 0x0d
    1a44:	92 ff       	sbrs	r25, 2
    1a46:	17 c0       	rjmp	.+46     	; 0x1a76 <udd_ep_clear_halt+0x66>
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	22 0f       	add	r18, r18
    1a52:	33 1f       	adc	r19, r19
    1a54:	f9 01       	movw	r30, r18
    1a56:	e4 5a       	subi	r30, 0xA4	; 164
    1a58:	f8 4d       	sbci	r31, 0xD8	; 216
    1a5a:	95 85       	ldd	r25, Z+13	; 0x0d
    1a5c:	9b 7f       	andi	r25, 0xFB	; 251
    1a5e:	95 87       	std	Z+13, r25	; 0x0d
    1a60:	8e dc       	rcall	.-1764   	; 0x137e <udd_ep_get_job>
    1a62:	fc 01       	movw	r30, r24
    1a64:	80 81       	ld	r24, Z
    1a66:	80 ff       	sbrs	r24, 0
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <udd_ep_clear_halt+0x66>
    1a6a:	8e 7f       	andi	r24, 0xFE	; 254
    1a6c:	80 83       	st	Z, r24
    1a6e:	07 80       	ldd	r0, Z+7	; 0x07
    1a70:	f0 85       	ldd	r31, Z+8	; 0x08
    1a72:	e0 2d       	mov	r30, r0
    1a74:	19 95       	eicall
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	08 95       	ret

00001a7a <udd_ep_run>:
    1a7a:	7f 92       	push	r7
    1a7c:	8f 92       	push	r8
    1a7e:	9f 92       	push	r9
    1a80:	af 92       	push	r10
    1a82:	bf 92       	push	r11
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	98 2e       	mov	r9, r24
    1a96:	86 2e       	mov	r8, r22
    1a98:	6a 01       	movw	r12, r20
    1a9a:	79 01       	movw	r14, r18
    1a9c:	70 dc       	rcall	.-1824   	; 0x137e <udd_ep_get_job>
    1a9e:	5c 01       	movw	r10, r24
    1aa0:	79 2c       	mov	r7, r9
    1aa2:	77 1c       	adc	r7, r7
    1aa4:	77 24       	eor	r7, r7
    1aa6:	77 1c       	adc	r7, r7
    1aa8:	c9 2d       	mov	r28, r9
    1aaa:	cf 70       	andi	r28, 0x0F	; 15
    1aac:	d0 e0       	ldi	r29, 0x00	; 0
    1aae:	cc 0f       	add	r28, r28
    1ab0:	dd 1f       	adc	r29, r29
    1ab2:	c7 0d       	add	r28, r7
    1ab4:	d1 1d       	adc	r29, r1
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	e4 5a       	subi	r30, 0xA4	; 164
    1ac6:	f8 4d       	sbci	r31, 0xD8	; 216
    1ac8:	85 85       	ldd	r24, Z+13	; 0x0d
    1aca:	80 7c       	andi	r24, 0xC0	; 192
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <udd_ep_run+0x56>
    1ace:	7d c0       	rjmp	.+250    	; 0x1bca <udd_ep_run+0x150>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	e4 5a       	subi	r30, 0xA4	; 164
    1ae0:	f8 4d       	sbci	r31, 0xD8	; 216
    1ae2:	85 85       	ldd	r24, Z+13	; 0x0d
    1ae4:	80 7c       	andi	r24, 0xC0	; 192
    1ae6:	80 3c       	cpi	r24, 0xC0	; 192
    1ae8:	61 f0       	breq	.+24     	; 0x1b02 <udd_ep_run+0x88>
    1aea:	fe 01       	movw	r30, r28
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	e4 5a       	subi	r30, 0xA4	; 164
    1afa:	f8 4d       	sbci	r31, 0xD8	; 216
    1afc:	85 85       	ldd	r24, Z+13	; 0x0d
    1afe:	82 fd       	sbrc	r24, 2
    1b00:	66 c0       	rjmp	.+204    	; 0x1bce <udd_ep_run+0x154>
    1b02:	8f b7       	in	r24, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	f5 01       	movw	r30, r10
    1b08:	90 81       	ld	r25, Z
    1b0a:	90 ff       	sbrs	r25, 0
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <udd_ep_run+0x9a>
    1b0e:	8f bf       	out	0x3f, r24	; 63
    1b10:	71 2c       	mov	r7, r1
    1b12:	5e c0       	rjmp	.+188    	; 0x1bd0 <udd_ep_run+0x156>
    1b14:	f5 01       	movw	r30, r10
    1b16:	90 81       	ld	r25, Z
    1b18:	91 60       	ori	r25, 0x01	; 1
    1b1a:	90 83       	st	Z, r25
    1b1c:	8f bf       	out	0x3f, r24	; 63
    1b1e:	c1 82       	std	Z+1, r12	; 0x01
    1b20:	d2 82       	std	Z+2, r13	; 0x02
    1b22:	e3 82       	std	Z+3, r14	; 0x03
    1b24:	f4 82       	std	Z+4, r15	; 0x04
    1b26:	15 82       	std	Z+5, r1	; 0x05
    1b28:	16 82       	std	Z+6, r1	; 0x06
    1b2a:	07 83       	std	Z+7, r16	; 0x07
    1b2c:	10 87       	std	Z+8, r17	; 0x08
    1b2e:	81 10       	cpse	r8, r1
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <udd_ep_run+0xc4>
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	e1 14       	cp	r14, r1
    1b36:	f1 04       	cpc	r15, r1
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <udd_ep_run+0xc6>
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <udd_ep_run+0xc6>
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	f5 01       	movw	r30, r10
    1b42:	80 81       	ld	r24, Z
    1b44:	90 fb       	bst	r25, 0
    1b46:	81 f9       	bld	r24, 1
    1b48:	8b 7f       	andi	r24, 0xFB	; 251
    1b4a:	80 83       	st	Z, r24
    1b4c:	77 20       	and	r7, r7
    1b4e:	59 f0       	breq	.+22     	; 0x1b66 <udd_ep_run+0xec>
    1b50:	cc 0f       	add	r28, r28
    1b52:	dd 1f       	adc	r29, r29
    1b54:	cc 0f       	add	r28, r28
    1b56:	dd 1f       	adc	r29, r29
    1b58:	cc 0f       	add	r28, r28
    1b5a:	dd 1f       	adc	r29, r29
    1b5c:	c4 5a       	subi	r28, 0xA4	; 164
    1b5e:	d8 4d       	sbci	r29, 0xD8	; 216
    1b60:	1a 8a       	std	Y+18, r1	; 0x12
    1b62:	1b 8a       	std	Y+19, r1	; 0x13
    1b64:	2d c0       	rjmp	.+90     	; 0x1bc0 <udd_ep_run+0x146>
    1b66:	fe 01       	movw	r30, r28
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	e4 5a       	subi	r30, 0xA4	; 164
    1b76:	f8 4d       	sbci	r31, 0xD8	; 216
    1b78:	85 85       	ldd	r24, Z+13	; 0x0d
    1b7a:	80 7c       	andi	r24, 0xC0	; 192
    1b7c:	80 3c       	cpi	r24, 0xC0	; 192
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <udd_ep_run+0x12e>
    1b80:	ce 01       	movw	r24, r28
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	88 59       	subi	r24, 0x98	; 152
    1b90:	98 4d       	sbci	r25, 0xD8	; 216
    1b92:	cc db       	rcall	.-2152   	; 0x132c <udd_ep_get_size>
    1b94:	bc 01       	movw	r22, r24
    1b96:	c7 01       	movw	r24, r14
    1b98:	59 d4       	rcall	.+2226   	; 0x244c <__udivmodhi4>
    1b9a:	89 2b       	or	r24, r25
    1b9c:	29 f0       	breq	.+10     	; 0x1ba8 <udd_ep_run+0x12e>
    1b9e:	f5 01       	movw	r30, r10
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	80 83       	st	Z, r24
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <udd_ep_run+0x156>
    1ba8:	cc 0f       	add	r28, r28
    1baa:	dd 1f       	adc	r29, r29
    1bac:	cc 0f       	add	r28, r28
    1bae:	dd 1f       	adc	r29, r29
    1bb0:	cc 0f       	add	r28, r28
    1bb2:	dd 1f       	adc	r29, r29
    1bb4:	c4 5a       	subi	r28, 0xA4	; 164
    1bb6:	d8 4d       	sbci	r29, 0xD8	; 216
    1bb8:	1e 86       	std	Y+14, r1	; 0x0e
    1bba:	1f 86       	std	Y+15, r1	; 0x0f
    1bbc:	1a 8a       	std	Y+18, r1	; 0x12
    1bbe:	1b 8a       	std	Y+19, r1	; 0x13
    1bc0:	89 2d       	mov	r24, r9
    1bc2:	67 dc       	rcall	.-1842   	; 0x1492 <udd_ep_trans_complet>
    1bc4:	77 24       	eor	r7, r7
    1bc6:	73 94       	inc	r7
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <udd_ep_run+0x156>
    1bca:	71 2c       	mov	r7, r1
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <udd_ep_run+0x156>
    1bce:	71 2c       	mov	r7, r1
    1bd0:	87 2d       	mov	r24, r7
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	df 90       	pop	r13
    1be0:	cf 90       	pop	r12
    1be2:	bf 90       	pop	r11
    1be4:	af 90       	pop	r10
    1be6:	9f 90       	pop	r9
    1be8:	8f 90       	pop	r8
    1bea:	7f 90       	pop	r7
    1bec:	08 95       	ret

00001bee <udd_ep_abort>:
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	18 2f       	mov	r17, r24
    1bfa:	f8 2e       	mov	r15, r24
    1bfc:	ff 1c       	adc	r15, r15
    1bfe:	ff 24       	eor	r15, r15
    1c00:	ff 1c       	adc	r15, r15
    1c02:	c8 2f       	mov	r28, r24
    1c04:	cf 70       	andi	r28, 0x0F	; 15
    1c06:	d0 e0       	ldi	r29, 0x00	; 0
    1c08:	cc 0f       	add	r28, r28
    1c0a:	dd 1f       	adc	r29, r29
    1c0c:	cf 0d       	add	r28, r15
    1c0e:	d1 1d       	adc	r29, r1
    1c10:	b6 db       	rcall	.-2196   	; 0x137e <udd_ep_get_job>
    1c12:	dc 01       	movw	r26, r24
    1c14:	fe 01       	movw	r30, r28
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	e8 59       	subi	r30, 0x98	; 152
    1c24:	f8 4d       	sbci	r31, 0xD8	; 216
    1c26:	02 e0       	ldi	r16, 0x02	; 2
    1c28:	05 93       	las	Z, r16
    1c2a:	8c 91       	ld	r24, X
    1c2c:	80 ff       	sbrs	r24, 0
    1c2e:	22 c0       	rjmp	.+68     	; 0x1c74 <udd_ep_abort+0x86>
    1c30:	8e 7f       	andi	r24, 0xFE	; 254
    1c32:	8c 93       	st	X, r24
    1c34:	17 96       	adiw	r26, 0x07	; 7
    1c36:	ed 91       	ld	r30, X+
    1c38:	fc 91       	ld	r31, X
    1c3a:	18 97       	sbiw	r26, 0x08	; 8
    1c3c:	30 97       	sbiw	r30, 0x00	; 0
    1c3e:	d1 f0       	breq	.+52     	; 0x1c74 <udd_ep_abort+0x86>
    1c40:	ff 20       	and	r15, r15
    1c42:	59 f0       	breq	.+22     	; 0x1c5a <udd_ep_abort+0x6c>
    1c44:	cc 0f       	add	r28, r28
    1c46:	dd 1f       	adc	r29, r29
    1c48:	cc 0f       	add	r28, r28
    1c4a:	dd 1f       	adc	r29, r29
    1c4c:	cc 0f       	add	r28, r28
    1c4e:	dd 1f       	adc	r29, r29
    1c50:	c4 5a       	subi	r28, 0xA4	; 164
    1c52:	d8 4d       	sbci	r29, 0xD8	; 216
    1c54:	6a 89       	ldd	r22, Y+18	; 0x12
    1c56:	7b 89       	ldd	r23, Y+19	; 0x13
    1c58:	0a c0       	rjmp	.+20     	; 0x1c6e <udd_ep_abort+0x80>
    1c5a:	cc 0f       	add	r28, r28
    1c5c:	dd 1f       	adc	r29, r29
    1c5e:	cc 0f       	add	r28, r28
    1c60:	dd 1f       	adc	r29, r29
    1c62:	cc 0f       	add	r28, r28
    1c64:	dd 1f       	adc	r29, r29
    1c66:	c4 5a       	subi	r28, 0xA4	; 164
    1c68:	d8 4d       	sbci	r29, 0xD8	; 216
    1c6a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c6c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c6e:	41 2f       	mov	r20, r17
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	19 95       	eicall
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	08 95       	ret

00001c80 <udd_ep_free>:
    1c80:	cf 93       	push	r28
    1c82:	c8 2f       	mov	r28, r24
    1c84:	b4 df       	rcall	.-152    	; 0x1bee <udd_ep_abort>
    1c86:	ec 2f       	mov	r30, r28
    1c88:	ef 70       	andi	r30, 0x0F	; 15
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	8c 2f       	mov	r24, r28
    1c92:	cc 0f       	add	r28, r28
    1c94:	99 0b       	sbc	r25, r25
    1c96:	88 27       	eor	r24, r24
    1c98:	99 0f       	add	r25, r25
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 27       	eor	r25, r25
    1c9e:	e8 0f       	add	r30, r24
    1ca0:	f9 1f       	adc	r31, r25
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	e4 5a       	subi	r30, 0xA4	; 164
    1cb0:	f8 4d       	sbci	r31, 0xD8	; 216
    1cb2:	15 86       	std	Z+13, r1	; 0x0d
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <udd_ep_set_halt>:
    1cb8:	0f 93       	push	r16
    1cba:	e8 2f       	mov	r30, r24
    1cbc:	ef 70       	andi	r30, 0x0F	; 15
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	08 2e       	mov	r0, r24
    1cc8:	00 0c       	add	r0, r0
    1cca:	33 0b       	sbc	r19, r19
    1ccc:	22 27       	eor	r18, r18
    1cce:	33 0f       	add	r19, r19
    1cd0:	22 1f       	adc	r18, r18
    1cd2:	33 27       	eor	r19, r19
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	df 01       	movw	r26, r30
    1ce6:	a4 5a       	subi	r26, 0xA4	; 164
    1ce8:	b8 4d       	sbci	r27, 0xD8	; 216
    1cea:	1d 96       	adiw	r26, 0x0d	; 13
    1cec:	9c 91       	ld	r25, X
    1cee:	1d 97       	sbiw	r26, 0x0d	; 13
    1cf0:	94 60       	ori	r25, 0x04	; 4
    1cf2:	1d 96       	adiw	r26, 0x0d	; 13
    1cf4:	9c 93       	st	X, r25
    1cf6:	e8 59       	subi	r30, 0x98	; 152
    1cf8:	f8 4d       	sbci	r31, 0xD8	; 216
    1cfa:	01 e0       	ldi	r16, 0x01	; 1
    1cfc:	06 93       	lac	Z, r16
    1cfe:	77 df       	rcall	.-274    	; 0x1bee <udd_ep_abort>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	0b b6       	in	r0, 0x3b	; 59
    1d12:	0f 92       	push	r0
    1d14:	0f 93       	push	r16
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1d2e:	80 91 cb 04 	lds	r24, 0x04CB
    1d32:	88 23       	and	r24, r24
    1d34:	34 f4       	brge	.+12     	; 0x1d42 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    1d36:	80 e8       	ldi	r24, 0x80	; 128
    1d38:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1d3c:	0e 94 b0 05 	call	0xb60	; 0xb60 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1d40:	82 c0       	rjmp	.+260    	; 0x1e46 <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1d42:	80 91 cb 04 	lds	r24, 0x04CB
    1d46:	82 ff       	sbrs	r24, 2
    1d48:	20 c0       	rjmp	.+64     	; 0x1d8a <__vector_125+0x84>
		udd_ack_underflow_event();
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1d50:	80 91 70 27 	lds	r24, 0x2770
    1d54:	86 ff       	sbrs	r24, 6
    1d56:	77 c0       	rjmp	.+238    	; 0x1e46 <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1d58:	80 91 cc 04 	lds	r24, 0x04CC
    1d5c:	81 fd       	sbrc	r24, 1
    1d5e:	73 c0       	rjmp	.+230    	; 0x1e46 <__vector_125+0x140>
    1d60:	29 db       	rcall	.-2478   	; 0x13b4 <udd_ctrl_interrupt_tc_setup>
    1d62:	81 11       	cpse	r24, r1
    1d64:	70 c0       	rjmp	.+224    	; 0x1e46 <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1d66:	80 91 59 27 	lds	r24, 0x2759
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	11 f4       	brne	.+4      	; 0x1d72 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1d6e:	5c da       	rcall	.-2888   	; 0x1228 <udd_ctrl_send_zlp_in>
    1d70:	6a c0       	rjmp	.+212    	; 0x1e46 <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1d72:	84 30       	cpi	r24, 0x04	; 4
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <__vector_125+0x72>
    1d76:	67 c0       	rjmp	.+206    	; 0x1e46 <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1d78:	e1 e7       	ldi	r30, 0x71	; 113
    1d7a:	f7 e2       	ldi	r31, 0x27	; 39
    1d7c:	04 e0       	ldi	r16, 0x04	; 4
    1d7e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1d80:	e9 e6       	ldi	r30, 0x69	; 105
    1d82:	f7 e2       	ldi	r31, 0x27	; 39
    1d84:	04 e0       	ldi	r16, 0x04	; 4
    1d86:	05 93       	las	Z, r16
    1d88:	5e c0       	rjmp	.+188    	; 0x1e46 <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1d8a:	80 91 cb 04 	lds	r24, 0x04CB
    1d8e:	81 ff       	sbrs	r24, 1
    1d90:	55 c0       	rjmp	.+170    	; 0x1e3c <__vector_125+0x136>
		udd_ack_overflow_event();
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1d98:	80 91 68 27 	lds	r24, 0x2768
    1d9c:	86 ff       	sbrs	r24, 6
    1d9e:	53 c0       	rjmp	.+166    	; 0x1e46 <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1da0:	80 91 cc 04 	lds	r24, 0x04CC
    1da4:	81 fd       	sbrc	r24, 1
    1da6:	4f c0       	rjmp	.+158    	; 0x1e46 <__vector_125+0x140>
    1da8:	05 db       	rcall	.-2550   	; 0x13b4 <udd_ctrl_interrupt_tc_setup>
    1daa:	81 11       	cpse	r24, r1
    1dac:	4c c0       	rjmp	.+152    	; 0x1e46 <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1dae:	80 91 59 27 	lds	r24, 0x2759
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	41 f4       	brne	.+16     	; 0x1dc6 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1db6:	84 e0       	ldi	r24, 0x04	; 4
    1db8:	80 93 59 27 	sts	0x2759, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1dbc:	e8 e6       	ldi	r30, 0x68	; 104
    1dbe:	f7 e2       	ldi	r31, 0x27	; 39
    1dc0:	02 e0       	ldi	r16, 0x02	; 2
    1dc2:	06 93       	lac	Z, r16
    1dc4:	40 c0       	rjmp	.+128    	; 0x1e46 <__vector_125+0x140>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <__vector_125+0xc6>
    1dca:	3d c0       	rjmp	.+122    	; 0x1e46 <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1dcc:	e1 e7       	ldi	r30, 0x71	; 113
    1dce:	f7 e2       	ldi	r31, 0x27	; 39
    1dd0:	04 e0       	ldi	r16, 0x04	; 4
    1dd2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1dd4:	e9 e6       	ldi	r30, 0x69	; 105
    1dd6:	f7 e2       	ldi	r31, 0x27	; 39
    1dd8:	04 e0       	ldi	r16, 0x04	; 4
    1dda:	05 93       	las	Z, r16
    1ddc:	34 c0       	rjmp	.+104    	; 0x1e46 <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1dde:	80 e1       	ldi	r24, 0x10	; 16
    1de0:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	03 df       	rcall	.-506    	; 0x1bee <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1de8:	81 e8       	ldi	r24, 0x81	; 129
    1dea:	01 df       	rcall	.-510    	; 0x1bee <udd_ep_abort>
		}
#endif
		udc_reset();
    1dec:	0e 94 89 05 	call	0xb12	; 0xb12 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1df0:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1df4:	ec e5       	ldi	r30, 0x5C	; 92
    1df6:	f7 e2       	ldi	r31, 0x27	; 39
    1df8:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    1dfa:	96 e0       	ldi	r25, 0x06	; 6
    1dfc:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1dfe:	83 e4       	ldi	r24, 0x43	; 67
    1e00:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1e02:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    1e04:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1e06:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1e08:	85 e1       	ldi	r24, 0x15	; 21
    1e0a:	97 e2       	ldi	r25, 0x27	; 39
    1e0c:	80 8b       	std	Z+16, r24	; 0x10
    1e0e:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    1e10:	d6 d9       	rcall	.-3156   	; 0x11be <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1e12:	19 c0       	rjmp	.+50     	; 0x1e46 <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    1e14:	80 91 cb 04 	lds	r24, 0x04CB
    1e18:	86 ff       	sbrs	r24, 6
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <__vector_125+0x122>
		udd_ack_suspend_event();
    1e1c:	80 e4       	ldi	r24, 0x40	; 64
    1e1e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	ad d9       	rcall	.-3238   	; 0x1180 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    1e28:	80 91 cb 04 	lds	r24, 0x04CB
    1e2c:	85 ff       	sbrs	r24, 5
    1e2e:	0b c0       	rjmp	.+22     	; 0x1e46 <__vector_125+0x140>
		udd_ack_resume_event();
    1e30:	80 e2       	ldi	r24, 0x20	; 32
    1e32:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	a3 d9       	rcall	.-3258   	; 0x1180 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1e3a:	05 c0       	rjmp	.+10     	; 0x1e46 <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1e3c:	80 91 cb 04 	lds	r24, 0x04CB
    1e40:	84 ff       	sbrs	r24, 4
    1e42:	e8 cf       	rjmp	.-48     	; 0x1e14 <__vector_125+0x10e>
    1e44:	cc cf       	rjmp	.-104    	; 0x1dde <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	bf 91       	pop	r27
    1e4c:	af 91       	pop	r26
    1e4e:	9f 91       	pop	r25
    1e50:	8f 91       	pop	r24
    1e52:	7f 91       	pop	r23
    1e54:	6f 91       	pop	r22
    1e56:	5f 91       	pop	r21
    1e58:	4f 91       	pop	r20
    1e5a:	3f 91       	pop	r19
    1e5c:	2f 91       	pop	r18
    1e5e:	0f 91       	pop	r16
    1e60:	0f 90       	pop	r0
    1e62:	0b be       	out	0x3b, r0	; 59
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	0f 90       	pop	r0
    1e6a:	1f 90       	pop	r1
    1e6c:	18 95       	reti

00001e6e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	11 24       	eor	r1, r1
    1e78:	0b b6       	in	r0, 0x3b	; 59
    1e7a:	0f 92       	push	r0
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	2f 93       	push	r18
    1e82:	3f 93       	push	r19
    1e84:	4f 93       	push	r20
    1e86:	5f 93       	push	r21
    1e88:	6f 93       	push	r22
    1e8a:	7f 93       	push	r23
    1e8c:	8f 93       	push	r24
    1e8e:	9f 93       	push	r25
    1e90:	af 93       	push	r26
    1e92:	bf 93       	push	r27
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	ef 93       	push	r30
    1e9a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1e9c:	80 91 cc 04 	lds	r24, 0x04CC
    1ea0:	81 fd       	sbrc	r24, 1
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1ea4:	87 da       	rcall	.-2802   	; 0x13b4 <udd_ctrl_interrupt_tc_setup>
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	c1 c0       	rjmp	.+386    	; 0x202c <__vector_126+0x1be>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1eb0:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1eb4:	81 95       	neg	r24
    1eb6:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1eb8:	e8 e6       	ldi	r30, 0x68	; 104
    1eba:	f7 e2       	ldi	r31, 0x27	; 39
    1ebc:	e8 1b       	sub	r30, r24
    1ebe:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	28 56       	subi	r18, 0x68	; 104
    1ec6:	37 42       	sbci	r19, 0x27	; 39
    1ec8:	36 95       	lsr	r19
    1eca:	27 95       	ror	r18
    1ecc:	36 95       	lsr	r19
    1ece:	27 95       	ror	r18
    1ed0:	36 95       	lsr	r19
    1ed2:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1ed4:	82 2f       	mov	r24, r18
    1ed6:	86 95       	lsr	r24
    1ed8:	20 fd       	sbrc	r18, 0
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <__vector_126+0x72>
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <__vector_126+0x74>
    1ee0:	90 e8       	ldi	r25, 0x80	; 128
    1ee2:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1ee4:	e8 2f       	mov	r30, r24
    1ee6:	ef 70       	andi	r30, 0x0F	; 15
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1eee:	28 2f       	mov	r18, r24
    1ef0:	08 2e       	mov	r0, r24
    1ef2:	00 0c       	add	r0, r0
    1ef4:	33 0b       	sbc	r19, r19
    1ef6:	22 27       	eor	r18, r18
    1ef8:	33 0f       	add	r19, r19
    1efa:	22 1f       	adc	r18, r18
    1efc:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1f02:	df 01       	movw	r26, r30
    1f04:	aa 0f       	add	r26, r26
    1f06:	bb 1f       	adc	r27, r27
    1f08:	aa 0f       	add	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	aa 0f       	add	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	a4 5a       	subi	r26, 0xA4	; 164
    1f12:	b8 4d       	sbci	r27, 0xD8	; 216
    1f14:	1c 96       	adiw	r26, 0x0c	; 12
    1f16:	9c 91       	ld	r25, X
    1f18:	95 ff       	sbrs	r25, 5
    1f1a:	88 c0       	rjmp	.+272    	; 0x202c <__vector_126+0x1be>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ee 0f       	add	r30, r30
    1f22:	ff 1f       	adc	r31, r31
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	e8 59       	subi	r30, 0x98	; 152
    1f2a:	f8 4d       	sbci	r31, 0xD8	; 216
    1f2c:	00 e2       	ldi	r16, 0x20	; 32
    1f2e:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1f30:	81 11       	cpse	r24, r1
    1f32:	77 c0       	rjmp	.+238    	; 0x2022 <__vector_126+0x1b4>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1f34:	80 91 59 27 	lds	r24, 0x2759
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	19 f4       	brne	.+6      	; 0x1f42 <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1f3c:	83 d9       	rcall	.-3322   	; 0x1244 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1f3e:	3f d9       	rcall	.-3458   	; 0x11be <udd_ctrl_init>
    1f40:	75 c0       	rjmp	.+234    	; 0x202c <__vector_126+0x1be>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1f42:	00 91 6a 27 	lds	r16, 0x276A
    1f46:	10 91 6b 27 	lds	r17, 0x276B

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1f4a:	80 91 b3 27 	lds	r24, 0x27B3
    1f4e:	90 91 b4 27 	lds	r25, 0x27B4
    1f52:	c0 91 55 27 	lds	r28, 0x2755
    1f56:	d0 91 56 27 	lds	r29, 0x2756
    1f5a:	9e 01       	movw	r18, r28
    1f5c:	20 0f       	add	r18, r16
    1f5e:	31 1f       	adc	r19, r17
    1f60:	82 17       	cp	r24, r18
    1f62:	93 07       	cpc	r25, r19
    1f64:	18 f4       	brcc	.+6      	; 0x1f6c <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1f66:	8c 01       	movw	r16, r24
    1f68:	0c 1b       	sub	r16, r28
    1f6a:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1f6c:	80 91 b1 27 	lds	r24, 0x27B1
    1f70:	90 91 b2 27 	lds	r25, 0x27B2
    1f74:	a8 01       	movw	r20, r16
    1f76:	65 e1       	ldi	r22, 0x15	; 21
    1f78:	77 e2       	ldi	r23, 0x27	; 39
    1f7a:	8c 0f       	add	r24, r28
    1f7c:	9d 1f       	adc	r25, r29
    1f7e:	a4 d2       	rcall	.+1352   	; 0x24c8 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1f80:	c0 0f       	add	r28, r16
    1f82:	d1 1f       	adc	r29, r17
    1f84:	c0 93 55 27 	sts	0x2755, r28
    1f88:	d0 93 56 27 	sts	0x2756, r29

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f8c:	00 34       	cpi	r16, 0x40	; 64
    1f8e:	11 05       	cpc	r17, r1
    1f90:	69 f4       	brne	.+26     	; 0x1fac <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1f92:	80 91 57 27 	lds	r24, 0x2757
    1f96:	90 91 58 27 	lds	r25, 0x2758
    1f9a:	8c 0f       	add	r24, r28
    1f9c:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f9e:	20 91 af 27 	lds	r18, 0x27AF
    1fa2:	30 91 b0 27 	lds	r19, 0x27B0
    1fa6:	82 17       	cp	r24, r18
    1fa8:	93 07       	cpc	r25, r19
    1faa:	80 f0       	brcs	.+32     	; 0x1fcc <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1fac:	e9 ea       	ldi	r30, 0xA9	; 169
    1fae:	f7 e2       	ldi	r31, 0x27	; 39
    1fb0:	c2 87       	std	Z+10, r28	; 0x0a
    1fb2:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1fb4:	06 84       	ldd	r0, Z+14	; 0x0e
    1fb6:	f7 85       	ldd	r31, Z+15	; 0x0f
    1fb8:	e0 2d       	mov	r30, r0
    1fba:	30 97       	sbiw	r30, 0x00	; 0
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <__vector_126+0x15a>
			if (!udd_g_ctrlreq.over_under_run()) {
    1fbe:	19 95       	eicall
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <__vector_126+0x15a>
				// Stall ZLP
				udd_ctrl_stall_data();
    1fc4:	23 d9       	rcall	.-3514   	; 0x120c <udd_ctrl_stall_data>
    1fc6:	32 c0       	rjmp	.+100    	; 0x202c <__vector_126+0x1be>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1fc8:	2f d9       	rcall	.-3490   	; 0x1228 <udd_ctrl_send_zlp_in>
    1fca:	30 c0       	rjmp	.+96     	; 0x202c <__vector_126+0x1be>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1fcc:	80 91 b3 27 	lds	r24, 0x27B3
    1fd0:	90 91 b4 27 	lds	r25, 0x27B4
    1fd4:	c8 17       	cp	r28, r24
    1fd6:	d9 07       	cpc	r29, r25
    1fd8:	f9 f4       	brne	.+62     	; 0x2018 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1fda:	e0 91 b7 27 	lds	r30, 0x27B7
    1fde:	f0 91 b8 27 	lds	r31, 0x27B8
    1fe2:	30 97       	sbiw	r30, 0x00	; 0
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <__vector_126+0x17c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1fe6:	12 d9       	rcall	.-3548   	; 0x120c <udd_ctrl_stall_data>
    1fe8:	21 c0       	rjmp	.+66     	; 0x202c <__vector_126+0x1be>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1fea:	19 95       	eicall
    1fec:	81 11       	cpse	r24, r1
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1ff0:	0d d9       	rcall	.-3558   	; 0x120c <udd_ctrl_stall_data>
    1ff2:	1c c0       	rjmp	.+56     	; 0x202c <__vector_126+0x1be>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1ff4:	20 91 57 27 	lds	r18, 0x2757
    1ff8:	30 91 58 27 	lds	r19, 0x2758
    1ffc:	80 91 55 27 	lds	r24, 0x2755
    2000:	90 91 56 27 	lds	r25, 0x2756
    2004:	82 0f       	add	r24, r18
    2006:	93 1f       	adc	r25, r19
    2008:	80 93 57 27 	sts	0x2757, r24
    200c:	90 93 58 27 	sts	0x2758, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2010:	10 92 55 27 	sts	0x2755, r1
    2014:	10 92 56 27 	sts	0x2756, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2018:	e8 e6       	ldi	r30, 0x68	; 104
    201a:	f7 e2       	ldi	r31, 0x27	; 39
    201c:	02 e0       	ldi	r16, 0x02	; 2
    201e:	06 93       	lac	Z, r16
    2020:	05 c0       	rjmp	.+10     	; 0x202c <__vector_126+0x1be>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2022:	80 38       	cpi	r24, 0x80	; 128
    2024:	11 f4       	brne	.+4      	; 0x202a <__vector_126+0x1bc>
		udd_ctrl_in_sent();
    2026:	16 d9       	rcall	.-3540   	; 0x1254 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2028:	01 c0       	rjmp	.+2      	; 0x202c <__vector_126+0x1be>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    202a:	33 da       	rcall	.-2970   	; 0x1492 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    202c:	ff 91       	pop	r31
    202e:	ef 91       	pop	r30
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	bf 91       	pop	r27
    2036:	af 91       	pop	r26
    2038:	9f 91       	pop	r25
    203a:	8f 91       	pop	r24
    203c:	7f 91       	pop	r23
    203e:	6f 91       	pop	r22
    2040:	5f 91       	pop	r21
    2042:	4f 91       	pop	r20
    2044:	3f 91       	pop	r19
    2046:	2f 91       	pop	r18
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	0f 90       	pop	r0
    204e:	0b be       	out	0x3b, r0	; 59
    2050:	0f 90       	pop	r0
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	0f 90       	pop	r0
    2056:	1f 90       	pop	r1
    2058:	18 95       	reti

0000205a <init_pwm_motor_driver>:
	else
	{
		sign = positive;
	}
	return sign;
}
    205a:	a0 e4       	ldi	r26, 0x40	; 64
    205c:	b6 e0       	ldi	r27, 0x06	; 6
    205e:	8f e0       	ldi	r24, 0x0F	; 15
    2060:	8c 93       	st	X, r24
    2062:	e0 e0       	ldi	r30, 0x00	; 0
    2064:	f8 e0       	ldi	r31, 0x08	; 8
    2066:	80 81       	ld	r24, Z
    2068:	84 60       	ori	r24, 0x04	; 4
    206a:	80 83       	st	Z, r24
    206c:	81 81       	ldd	r24, Z+1	; 0x01
    206e:	83 63       	ori	r24, 0x33	; 51
    2070:	81 83       	std	Z+1, r24	; 0x01
    2072:	80 ed       	ldi	r24, 0xD0	; 208
    2074:	97 e0       	ldi	r25, 0x07	; 7
    2076:	86 a3       	std	Z+38, r24	; 0x26
    2078:	97 a3       	std	Z+39, r25	; 0x27
    207a:	12 a6       	std	Z+42, r1	; 0x2a
    207c:	13 a6       	std	Z+43, r1	; 0x2b
    207e:	10 a6       	std	Z+40, r1	; 0x28
    2080:	11 a6       	std	Z+41, r1	; 0x29
    2082:	14 96       	adiw	r26, 0x04	; 4
    2084:	8c 91       	ld	r24, X
    2086:	14 97       	sbiw	r26, 0x04	; 4
    2088:	84 60       	ori	r24, 0x04	; 4
    208a:	14 96       	adiw	r26, 0x04	; 4
    208c:	8c 93       	st	X, r24
    208e:	14 97       	sbiw	r26, 0x04	; 4
    2090:	14 96       	adiw	r26, 0x04	; 4
    2092:	8c 91       	ld	r24, X
    2094:	14 97       	sbiw	r26, 0x04	; 4
    2096:	88 60       	ori	r24, 0x08	; 8
    2098:	14 96       	adiw	r26, 0x04	; 4
    209a:	8c 93       	st	X, r24
    209c:	08 95       	ret

0000209e <calculate_left_wheel_speed>:

int16_t calculate_left_wheel_speed(	int16_t linear_setting,
									int16_t angular_setting)
{
	int16_t tmp = (angular_setting*diff_shaft_len)/100;
	int16_t numerator = (2*linear_setting - tmp);
    209e:	9c 01       	movw	r18, r24
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
}

int16_t calculate_left_wheel_speed(	int16_t linear_setting,
									int16_t angular_setting)
{
	int16_t tmp = (angular_setting*diff_shaft_len)/100;
    20a4:	4c e2       	ldi	r20, 0x2C	; 44
    20a6:	46 9f       	mul	r20, r22
    20a8:	c0 01       	movw	r24, r0
    20aa:	47 9f       	mul	r20, r23
    20ac:	90 0d       	add	r25, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	64 e6       	ldi	r22, 0x64	; 100
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	df d1       	rcall	.+958    	; 0x2474 <__divmodhi4>
	int16_t numerator = (2*linear_setting - tmp);
    20b6:	26 1b       	sub	r18, r22
    20b8:	37 0b       	sbc	r19, r23
	int16_t denominator = 2;//*wheel_radius;
	int16_t speed = numerator/denominator;
    20ba:	c9 01       	movw	r24, r18
    20bc:	99 23       	and	r25, r25
    20be:	0c f4       	brge	.+2      	; 0x20c2 <calculate_left_wheel_speed+0x24>
    20c0:	01 96       	adiw	r24, 0x01	; 1
	return speed;
}
    20c2:	95 95       	asr	r25
    20c4:	87 95       	ror	r24
    20c6:	08 95       	ret

000020c8 <calculate_right_wheel_speed>:

int16_t calculate_right_wheel_speed(int16_t linear_setting,
									int16_t angular_setting)
{
	int16_t tmp = (angular_setting*diff_shaft_len)/100;
	int16_t numerator = (2*linear_setting + tmp);
    20c8:	9c 01       	movw	r18, r24
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
}

int16_t calculate_right_wheel_speed(int16_t linear_setting,
									int16_t angular_setting)
{
	int16_t tmp = (angular_setting*diff_shaft_len)/100;
    20ce:	4c e2       	ldi	r20, 0x2C	; 44
    20d0:	46 9f       	mul	r20, r22
    20d2:	c0 01       	movw	r24, r0
    20d4:	47 9f       	mul	r20, r23
    20d6:	90 0d       	add	r25, r0
    20d8:	11 24       	eor	r1, r1
    20da:	64 e6       	ldi	r22, 0x64	; 100
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	ca d1       	rcall	.+916    	; 0x2474 <__divmodhi4>
	int16_t numerator = (2*linear_setting + tmp);
    20e0:	c9 01       	movw	r24, r18
    20e2:	86 0f       	add	r24, r22
    20e4:	97 1f       	adc	r25, r23
	int16_t denominator = 2;//*wheel_radius;
	int16_t speed = numerator/denominator;
    20e6:	99 23       	and	r25, r25
    20e8:	0c f4       	brge	.+2      	; 0x20ec <calculate_right_wheel_speed+0x24>
    20ea:	01 96       	adiw	r24, 0x01	; 1
	return speed;
}
    20ec:	95 95       	asr	r25
    20ee:	87 95       	ror	r24
    20f0:	08 95       	ret

000020f2 <speedToMotorSetting>:

uint16_t speedToMotorSetting(uint16_t speed)
{
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	ec 01       	movw	r28, r24
	uint16_t motorSetting;
	printf("speed: %d\n\r",speed);
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	82 ea       	ldi	r24, 0xA2	; 162
    20fe:	90 e2       	ldi	r25, 0x20	; 32
    2100:	9f 93       	push	r25
    2102:	8f 93       	push	r24
    2104:	34 d2       	rcall	.+1128   	; 0x256e <printf>
	if(speed < 1)
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	20 97       	sbiw	r28, 0x00	; 0
    2110:	01 f1       	breq	.+64     	; 0x2152 <speedToMotorSetting+0x60>
	{
		return 0;	// This will prevent an invalid negative number in the unsigned int.
	}
	//motorSetting = ( (1250*speed) - 75)/100; // This will overflow when speen exeeds 40;
	motorSetting = (125*speed - 7)/10; // An approximation to the above, to prevent overflow;
    2112:	8d e7       	ldi	r24, 0x7D	; 125
    2114:	8c 9f       	mul	r24, r28
    2116:	90 01       	movw	r18, r0
    2118:	8d 9f       	mul	r24, r29
    211a:	30 0d       	add	r19, r0
    211c:	11 24       	eor	r1, r1
    211e:	27 50       	subi	r18, 0x07	; 7
    2120:	31 09       	sbc	r19, r1
    2122:	ad ec       	ldi	r26, 0xCD	; 205
    2124:	bc ec       	ldi	r27, 0xCC	; 204
    2126:	c1 d1       	rcall	.+898    	; 0x24aa <__umulhisi3>
    2128:	ec 01       	movw	r28, r24
    212a:	d6 95       	lsr	r29
    212c:	c7 95       	ror	r28
    212e:	d6 95       	lsr	r29
    2130:	c7 95       	ror	r28
    2132:	d6 95       	lsr	r29
    2134:	c7 95       	ror	r28
	
	printf("motorSetting: %d\n\r",motorSetting);
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	8e ea       	ldi	r24, 0xAE	; 174
    213c:	90 e2       	ldi	r25, 0x20	; 32
    213e:	9f 93       	push	r25
    2140:	8f 93       	push	r24
    2142:	15 d2       	rcall	.+1066   	; 0x256e <printf>
	return motorSetting;
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	8c 2f       	mov	r24, r28
    214e:	9d 2f       	mov	r25, r29
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <speedToMotorSetting+0x64>
{
	uint16_t motorSetting;
	printf("speed: %d\n\r",speed);
	if(speed < 1)
	{
		return 0;	// This will prevent an invalid negative number in the unsigned int.
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
	//motorSetting = ( (1250*speed) - 75)/100; // This will overflow when speen exeeds 40;
	motorSetting = (125*speed - 7)/10; // An approximation to the above, to prevent overflow;
	
	printf("motorSetting: %d\n\r",motorSetting);
	return motorSetting;
}
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <left_set_wheel_speed>:

void left_set_wheel_speed(int16_t speed)
{
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
}

enum Sign get_sign(int16_t value)
{
	enum Sign sign;
	if(value < 0)
    2162:	49 2f       	mov	r20, r25
    2164:	44 1f       	adc	r20, r20
    2166:	44 27       	eor	r20, r20
    2168:	44 1f       	adc	r20, r20
	{
		sign = negative;
    216a:	c4 2f       	mov	r28, r20
}

void left_set_wheel_speed(int16_t speed)
{
	enum Sign sign = get_sign(speed);
	uint16_t abs_speed = (speed >= 0 ? speed:-speed);
    216c:	28 2f       	mov	r18, r24
    216e:	39 2f       	mov	r19, r25
    2170:	33 23       	and	r19, r19
    2172:	1c f4       	brge	.+6      	; 0x217a <left_set_wheel_speed+0x1e>
    2174:	31 95       	neg	r19
    2176:	21 95       	neg	r18
    2178:	31 09       	sbc	r19, r1
    217a:	12 2f       	mov	r17, r18
    217c:	d3 2f       	mov	r29, r19
	
	printf("L Speed: %d, Sign: %d\n\r",abs_speed,sign);
    217e:	1f 92       	push	r1
    2180:	4f 93       	push	r20
    2182:	3f 93       	push	r19
    2184:	2f 93       	push	r18
    2186:	21 ec       	ldi	r18, 0xC1	; 193
    2188:	30 e2       	ldi	r19, 0x20	; 32
    218a:	3f 93       	push	r19
    218c:	2f 93       	push	r18
    218e:	ef d1       	rcall	.+990    	; 0x256e <printf>
	
	if(sign == negative)
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	c1 30       	cpi	r28, 0x01	; 1
    219e:	31 f4       	brne	.+12     	; 0x21ac <left_set_wheel_speed+0x50>
	{
		PORTC.OUT &= ~(1<<3); // Set directional pin to indicate REVERSE.
    21a0:	e0 e4       	ldi	r30, 0x40	; 64
    21a2:	f6 e0       	ldi	r31, 0x06	; 6
    21a4:	84 81       	ldd	r24, Z+4	; 0x04
    21a6:	87 7f       	andi	r24, 0xF7	; 247
    21a8:	84 83       	std	Z+4, r24	; 0x04
    21aa:	07 c0       	rjmp	.+14     	; 0x21ba <left_set_wheel_speed+0x5e>
		//printf("LREVERSE\n\r");
	}
	else if (sign == positive)
    21ac:	c1 11       	cpse	r28, r1
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <left_set_wheel_speed+0x5e>
	{
		PORTC.OUT |= (1<<3); // Set directional pin to indicate FORWARD.
    21b0:	e0 e4       	ldi	r30, 0x40	; 64
    21b2:	f6 e0       	ldi	r31, 0x06	; 6
    21b4:	84 81       	ldd	r24, Z+4	; 0x04
    21b6:	88 60       	ori	r24, 0x08	; 8
    21b8:	84 83       	std	Z+4, r24	; 0x04
		//printf("LFORWARD\n\r");
	}
	
	uint16_t motorSetting = speedToMotorSetting(abs_speed);
    21ba:	81 2f       	mov	r24, r17
    21bc:	9d 2f       	mov	r25, r29
    21be:	99 df       	rcall	.-206    	; 0x20f2 <speedToMotorSetting>
	TCC0.CCB = motorSetting;
    21c0:	80 93 2a 08 	sts	0x082A, r24
    21c4:	90 93 2b 08 	sts	0x082B, r25
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	08 95       	ret

000021d0 <right_set_wheel_speed>:

void right_set_wheel_speed(int16_t speed)
{
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
}

enum Sign get_sign(int16_t value)
{
	enum Sign sign;
	if(value < 0)
    21d6:	49 2f       	mov	r20, r25
    21d8:	44 1f       	adc	r20, r20
    21da:	44 27       	eor	r20, r20
    21dc:	44 1f       	adc	r20, r20
	{
		sign = negative;
    21de:	c4 2f       	mov	r28, r20
}

void right_set_wheel_speed(int16_t speed)
{
	enum Sign sign = get_sign(speed);
	uint16_t abs_speed = (speed >= 0 ? speed:-speed);
    21e0:	28 2f       	mov	r18, r24
    21e2:	39 2f       	mov	r19, r25
    21e4:	33 23       	and	r19, r19
    21e6:	1c f4       	brge	.+6      	; 0x21ee <right_set_wheel_speed+0x1e>
    21e8:	31 95       	neg	r19
    21ea:	21 95       	neg	r18
    21ec:	31 09       	sbc	r19, r1
    21ee:	12 2f       	mov	r17, r18
    21f0:	d3 2f       	mov	r29, r19
	
	printf("R Speed: %d, Sign: %d\n\r",abs_speed,sign);
    21f2:	1f 92       	push	r1
    21f4:	4f 93       	push	r20
    21f6:	3f 93       	push	r19
    21f8:	2f 93       	push	r18
    21fa:	29 ed       	ldi	r18, 0xD9	; 217
    21fc:	30 e2       	ldi	r19, 0x20	; 32
    21fe:	3f 93       	push	r19
    2200:	2f 93       	push	r18
    2202:	b5 d1       	rcall	.+874    	; 0x256e <printf>
	
	if(sign == negative)
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	c1 30       	cpi	r28, 0x01	; 1
    2212:	31 f4       	brne	.+12     	; 0x2220 <right_set_wheel_speed+0x50>
	{
		PORTC.OUT &= ~(1<<2); // Set directional pin to indicate REVERSE.
    2214:	e0 e4       	ldi	r30, 0x40	; 64
    2216:	f6 e0       	ldi	r31, 0x06	; 6
    2218:	84 81       	ldd	r24, Z+4	; 0x04
    221a:	8b 7f       	andi	r24, 0xFB	; 251
    221c:	84 83       	std	Z+4, r24	; 0x04
    221e:	07 c0       	rjmp	.+14     	; 0x222e <right_set_wheel_speed+0x5e>
		//printf("RFORWARD\n\r");
	}
	else if (sign == positive)
    2220:	c1 11       	cpse	r28, r1
    2222:	05 c0       	rjmp	.+10     	; 0x222e <right_set_wheel_speed+0x5e>
	{
		PORTC.OUT |= (1<<2); // Set directional pin to indicate FORWARD.
    2224:	e0 e4       	ldi	r30, 0x40	; 64
    2226:	f6 e0       	ldi	r31, 0x06	; 6
    2228:	84 81       	ldd	r24, Z+4	; 0x04
    222a:	84 60       	ori	r24, 0x04	; 4
    222c:	84 83       	std	Z+4, r24	; 0x04
		//printf("RREVERSE\n\r");
	}
	uint16_t motorSetting = speedToMotorSetting(abs_speed);
    222e:	81 2f       	mov	r24, r17
    2230:	9d 2f       	mov	r25, r29
    2232:	5f df       	rcall	.-322    	; 0x20f2 <speedToMotorSetting>
	TCC0.CCA = motorSetting;
    2234:	80 93 28 08 	sts	0x0828, r24
    2238:	90 93 29 08 	sts	0x0829, r25
}
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	08 95       	ret

00002244 <charToMotorSetting>:

int16_t charToMotorSetting(uint8_t input, uint8_t val_sign)
{
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
	int16_t result;
	
	result = ( (0x00 << 8) | (input) & 0xff );
    2248:	c8 2f       	mov	r28, r24
    224a:	d0 e0       	ldi	r29, 0x00	; 0
	
	if (val_sign == 45)
    224c:	6d 32       	cpi	r22, 0x2D	; 45
    224e:	11 f4       	brne	.+4      	; 0x2254 <charToMotorSetting+0x10>
	{
		result = ~result;
    2250:	c0 95       	com	r28
    2252:	d0 95       	com	r29
	}
	printf("%d\n",result);
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	81 ef       	ldi	r24, 0xF1	; 241
    225a:	90 e2       	ldi	r25, 0x20	; 32
    225c:	9f 93       	push	r25
    225e:	8f 93       	push	r24
    2260:	86 d1       	rcall	.+780    	; 0x256e <printf>
	return result;
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
}
    226a:	ce 01       	movw	r24, r28
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <main>:

/**
 * \brief main function
 */
int main (void)
{
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	2b 97       	sbiw	r28, 0x0b	; 11
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	de bf       	out	0x3e, r29	; 62
	 * - Initialize system clock sources according to device-specific
	 *   configuration parameters supplied in a conf_clock.h file.
	 * - Set up GPIO and board-specific features using additional configuration
	 *   parameters, if any, specified in a conf_board.h file.
	 */
	sysclk_init();
    2280:	0e 94 2d 01 	call	0x25a	; 0x25a <sysclk_init>
	board_init();
    2284:	0e 94 85 08 	call	0x110a	; 0x110a <board_init>

	// Initialize interrupt vector table support.
	irq_initialize_vectors();
    2288:	87 e0       	ldi	r24, 0x07	; 7
    228a:	80 93 a2 00 	sts	0x00A2, r24

	// Enable interrupts
	cpu_irq_enable();
    228e:	78 94       	sei
	/* Call a local utility routine to initialize C-Library Standard I/O over
	 * a USB CDC protocol. Tunable parameters in a conf_usb.h file must be
	 * supplied to configure the USB device correctly.
	 */
		
	stdio_usb_init();
    2290:	0e 94 57 08 	call	0x10ae	; 0x10ae <stdio_usb_init>

	init_pwm_motor_driver();
    2294:	e2 de       	rcall	.-572    	; 0x205a <init_pwm_motor_driver>
	left_set_wheel_speed(0);
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	60 df       	rcall	.-320    	; 0x215c <left_set_wheel_speed>
	right_set_wheel_speed(0);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	97 df       	rcall	.-210    	; 0x21d0 <right_set_wheel_speed>
	
	int16_t left_speed_setting = 0;
	int16_t right_speed_setting = 0;
	
	int16_t linear_speed_setting = 0;
	int16_t angular_speed_setting = 0;
    22a2:	18 86       	std	Y+8, r1	; 0x08
    22a4:	19 86       	std	Y+9, r1	; 0x09
	enum Receiver_State rx_state = idle;
	
	int16_t left_speed_setting = 0;
	int16_t right_speed_setting = 0;
	
	int16_t linear_speed_setting = 0;
    22a6:	a1 2c       	mov	r10, r1
    22a8:	b1 2c       	mov	r11, r1
	left_set_wheel_speed(0);
	right_set_wheel_speed(0);

	uint8_t ch;
	
	enum Receiver_State rx_state = idle;
    22aa:	10 e0       	ldi	r17, 0x00	; 0
					rx_state = after_message;
				}
				break;
				
			case after_message:
				printf("After Message.\n\r");
    22ac:	0f 2e       	mov	r0, r31
    22ae:	fa e1       	ldi	r31, 0x1A	; 26
    22b0:	cf 2e       	mov	r12, r31
    22b2:	f1 e2       	ldi	r31, 0x21	; 33
    22b4:	df 2e       	mov	r13, r31
    22b6:	f0 2d       	mov	r31, r0
				right_speed_setting = calculate_right_wheel_speed(linear_speed_setting,
																angular_speed_setting);
				left_set_wheel_speed(left_speed_setting);
				right_set_wheel_speed(right_speed_setting);
				rx_state = idle;
				printf("e\n\r"); // Confirm out of receive mode. 
    22b8:	0f 2e       	mov	r0, r31
    22ba:	fb e2       	ldi	r31, 0x2B	; 43
    22bc:	6f 2e       	mov	r6, r31
    22be:	f1 e2       	ldi	r31, 0x21	; 33
    22c0:	7f 2e       	mov	r7, r31
    22c2:	f0 2d       	mov	r31, r0
				break;
				
			case idle:
				printf("Idle.\n\r");
    22c4:	0f 2e       	mov	r0, r31
    22c6:	ff e2       	ldi	r31, 0x2F	; 47
    22c8:	4f 2e       	mov	r4, r31
    22ca:	f1 e2       	ldi	r31, 0x21	; 33
    22cc:	5f 2e       	mov	r5, r31
    22ce:	f0 2d       	mov	r31, r0
				scanf("%c",&ch); // get one input character
    22d0:	9e 01       	movw	r18, r28
    22d2:	2f 5f       	subi	r18, 0xFF	; 255
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	79 01       	movw	r14, r18
		* - ANGULAR SPEED: Speed setting, a 0 to 127 value.
		* - END OF MESSAGE: ascii value for "ESC"
		*/
		switch(rx_state){
			case receiving:
				printf("Receiving.\n\r");
    22d8:	0f 2e       	mov	r0, r31
    22da:	f5 ef       	ldi	r31, 0xF5	; 245
    22dc:	2f 2e       	mov	r2, r31
    22de:	f0 e2       	ldi	r31, 0x20	; 32
    22e0:	3f 2e       	mov	r3, r31
    22e2:	f0 2d       	mov	r31, r0
				scanf("%c",&ch);
				printf("Echo: %c\n\r",ch); // echo to output
    22e4:	0f 2e       	mov	r0, r31
    22e6:	f5 e0       	ldi	r31, 0x05	; 5
    22e8:	8f 2e       	mov	r8, r31
    22ea:	f1 e2       	ldi	r31, 0x21	; 33
    22ec:	9f 2e       	mov	r9, r31
    22ee:	f0 2d       	mov	r31, r0
				else if (ch == 97) // if "a"
				{
					uint8_t new_setting, val_sign;
					int16_t result;
					// Set angular speed;
					scanf("%c",&val_sign);
    22f0:	ce 01       	movw	r24, r28
    22f2:	02 96       	adiw	r24, 0x02	; 2
    22f4:	8c 83       	std	Y+4, r24	; 0x04
    22f6:	9d 83       	std	Y+5, r25	; 0x05
					//printf("Echo: %c\n",ch); // echo to output
					scanf("%c",&new_setting);
    22f8:	de 01       	movw	r26, r28
    22fa:	13 96       	adiw	r26, 0x03	; 3
    22fc:	ae 83       	std	Y+6, r26	; 0x06
    22fe:	bf 83       	std	Y+7, r27	; 0x07
		* - BEGINNING OF ANGULAR SPEED: ascii value for "a"
		* - +/-, ANGULAR SPEED: a char with the ascii value for + or -
		* - ANGULAR SPEED: Speed setting, a 0 to 127 value.
		* - END OF MESSAGE: ascii value for "ESC"
		*/
		switch(rx_state){
    2300:	11 30       	cpi	r17, 0x01	; 1
    2302:	09 f4       	brne	.+2      	; 0x2306 <main+0x94>
    2304:	6a c0       	rjmp	.+212    	; 0x23da <main+0x168>
    2306:	08 f4       	brcc	.+2      	; 0x230a <main+0x98>
    2308:	84 c0       	rjmp	.+264    	; 0x2412 <main+0x1a0>
    230a:	12 30       	cpi	r17, 0x02	; 2
    230c:	c9 f7       	brne	.-14     	; 0x2300 <main+0x8e>
			case receiving:
				printf("Receiving.\n\r");
    230e:	3f 92       	push	r3
    2310:	2f 92       	push	r2
    2312:	2d d1       	rcall	.+602    	; 0x256e <printf>
				scanf("%c",&ch);
    2314:	ff 92       	push	r15
    2316:	ef 92       	push	r14
    2318:	a2 e0       	ldi	r26, 0x02	; 2
    231a:	b1 e2       	ldi	r27, 0x21	; 33
    231c:	bf 93       	push	r27
    231e:	af 93       	push	r26
    2320:	39 d1       	rcall	.+626    	; 0x2594 <scanf>
				printf("Echo: %c\n\r",ch); // echo to output
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	1f 92       	push	r1
    2326:	8f 93       	push	r24
    2328:	9f 92       	push	r9
    232a:	8f 92       	push	r8
    232c:	20 d1       	rcall	.+576    	; 0x256e <printf>
				if (ch == 115) // if "s"
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	83 37       	cpi	r24, 0x73	; 115
    2336:	81 f5       	brne	.+96     	; 0x2398 <main+0x126>
				{
					int16_t result;
					uint8_t new_setting, val_sign;
					// Set linear speed;
					scanf("%c",&val_sign);
    2338:	bd 81       	ldd	r27, Y+5	; 0x05
    233a:	bf 93       	push	r27
    233c:	2c 81       	ldd	r18, Y+4	; 0x04
    233e:	2f 93       	push	r18
    2340:	a2 e0       	ldi	r26, 0x02	; 2
    2342:	b1 e2       	ldi	r27, 0x21	; 33
    2344:	bf 93       	push	r27
    2346:	af 93       	push	r26
    2348:	25 d1       	rcall	.+586    	; 0x2594 <scanf>
					//printf("Echo: %c\n",ch); // echo to output
					printf("%c\n",val_sign); // echo to output
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	1f 92       	push	r1
    234e:	8f 93       	push	r24
    2350:	a6 e1       	ldi	r26, 0x16	; 22
    2352:	b1 e2       	ldi	r27, 0x21	; 33
    2354:	bf 93       	push	r27
    2356:	af 93       	push	r26
    2358:	0a d1       	rcall	.+532    	; 0x256e <printf>
					scanf("%c",&new_setting);
    235a:	3f 81       	ldd	r19, Y+7	; 0x07
    235c:	3f 93       	push	r19
    235e:	8e 81       	ldd	r24, Y+6	; 0x06
    2360:	8f 93       	push	r24
    2362:	a2 e0       	ldi	r26, 0x02	; 2
    2364:	b1 e2       	ldi	r27, 0x21	; 33
    2366:	bf 93       	push	r27
    2368:	af 93       	push	r26
    236a:	14 d1       	rcall	.+552    	; 0x2594 <scanf>
					printf("Echo: %c\n",new_setting); // echo to output
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	1f 92       	push	r1
    2370:	8f 93       	push	r24
    2372:	a0 e1       	ldi	r26, 0x10	; 16
    2374:	b1 e2       	ldi	r27, 0x21	; 33
    2376:	bf 93       	push	r27
    2378:	af 93       	push	r26
    237a:	f9 d0       	rcall	.+498    	; 0x256e <printf>

					linear_speed_setting = charToMotorSetting(new_setting, val_sign);
    237c:	6a 81       	ldd	r22, Y+2	; 0x02
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	61 df       	rcall	.-318    	; 0x2244 <charToMotorSetting>
    2382:	5c 01       	movw	r10, r24
					printf("%d\n",result); // echo to output
    2384:	1f 92       	push	r1
    2386:	1f 92       	push	r1
    2388:	a1 ef       	ldi	r26, 0xF1	; 241
    238a:	b0 e2       	ldi	r27, 0x20	; 32
    238c:	bf 93       	push	r27
    238e:	af 93       	push	r26
    2390:	ee d0       	rcall	.+476    	; 0x256e <printf>
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	b4 cf       	rjmp	.-152    	; 0x2300 <main+0x8e>
				}
				else if (ch == 97) // if "a"
    2398:	81 36       	cpi	r24, 0x61	; 97
    239a:	d1 f4       	brne	.+52     	; 0x23d0 <main+0x15e>
				{
					uint8_t new_setting, val_sign;
					int16_t result;
					// Set angular speed;
					scanf("%c",&val_sign);
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	9f 93       	push	r25
    23a0:	ac 81       	ldd	r26, Y+4	; 0x04
    23a2:	af 93       	push	r26
    23a4:	a2 e0       	ldi	r26, 0x02	; 2
    23a6:	b1 e2       	ldi	r27, 0x21	; 33
    23a8:	bf 93       	push	r27
    23aa:	af 93       	push	r26
    23ac:	f3 d0       	rcall	.+486    	; 0x2594 <scanf>
					//printf("Echo: %c\n",ch); // echo to output
					scanf("%c",&new_setting);
    23ae:	3f 81       	ldd	r19, Y+7	; 0x07
    23b0:	3f 93       	push	r19
    23b2:	8e 81       	ldd	r24, Y+6	; 0x06
    23b4:	8f 93       	push	r24
    23b6:	a2 e0       	ldi	r26, 0x02	; 2
    23b8:	b1 e2       	ldi	r27, 0x21	; 33
    23ba:	bf 93       	push	r27
    23bc:	af 93       	push	r26
    23be:	ea d0       	rcall	.+468    	; 0x2594 <scanf>

					
					angular_speed_setting = charToMotorSetting(new_setting, val_sign);
    23c0:	6a 81       	ldd	r22, Y+2	; 0x02
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	3f df       	rcall	.-386    	; 0x2244 <charToMotorSetting>
    23c6:	88 87       	std	Y+8, r24	; 0x08
    23c8:	99 87       	std	Y+9, r25	; 0x09
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	98 cf       	rjmp	.-208    	; 0x2300 <main+0x8e>
				}
				else if (ch == 27) //if "Escape"
    23d0:	8b 31       	cpi	r24, 0x1B	; 27
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <main+0x164>
    23d4:	95 cf       	rjmp	.-214    	; 0x2300 <main+0x8e>
				{
					rx_state = after_message;
    23d6:	11 e0       	ldi	r17, 0x01	; 1
    23d8:	93 cf       	rjmp	.-218    	; 0x2300 <main+0x8e>
				}
				break;
				
			case after_message:
				printf("After Message.\n\r");
    23da:	df 92       	push	r13
    23dc:	cf 92       	push	r12
    23de:	c7 d0       	rcall	.+398    	; 0x256e <printf>
				// Reset watchdog here.
				// Update commands here.
				left_speed_setting = calculate_left_wheel_speed(linear_speed_setting, 
    23e0:	68 85       	ldd	r22, Y+8	; 0x08
    23e2:	79 85       	ldd	r23, Y+9	; 0x09
    23e4:	c5 01       	movw	r24, r10
    23e6:	5b de       	rcall	.-842    	; 0x209e <calculate_left_wheel_speed>
    23e8:	8a 87       	std	Y+10, r24	; 0x0a
    23ea:	9b 87       	std	Y+11, r25	; 0x0b
																angular_speed_setting);
				right_speed_setting = calculate_right_wheel_speed(linear_speed_setting,
    23ec:	68 85       	ldd	r22, Y+8	; 0x08
    23ee:	79 85       	ldd	r23, Y+9	; 0x09
    23f0:	c5 01       	movw	r24, r10
    23f2:	6a de       	rcall	.-812    	; 0x20c8 <calculate_right_wheel_speed>
    23f4:	8c 01       	movw	r16, r24
																angular_speed_setting);
				left_set_wheel_speed(left_speed_setting);
    23f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fa:	b0 de       	rcall	.-672    	; 0x215c <left_set_wheel_speed>
				right_set_wheel_speed(right_speed_setting);
    23fc:	c8 01       	movw	r24, r16
    23fe:	e8 de       	rcall	.-560    	; 0x21d0 <right_set_wheel_speed>
				rx_state = idle;
				printf("e\n\r"); // Confirm out of receive mode. 
    2400:	7f 92       	push	r7
    2402:	6f 92       	push	r6
    2404:	b4 d0       	rcall	.+360    	; 0x256e <printf>
				break;
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
																angular_speed_setting);
				right_speed_setting = calculate_right_wheel_speed(linear_speed_setting,
																angular_speed_setting);
				left_set_wheel_speed(left_speed_setting);
				right_set_wheel_speed(right_speed_setting);
				rx_state = idle;
    240e:	10 e0       	ldi	r17, 0x00	; 0
				printf("e\n\r"); // Confirm out of receive mode. 
				break;
    2410:	77 cf       	rjmp	.-274    	; 0x2300 <main+0x8e>
				
			case idle:
				printf("Idle.\n\r");
    2412:	5f 92       	push	r5
    2414:	4f 92       	push	r4
    2416:	ab d0       	rcall	.+342    	; 0x256e <printf>
				scanf("%c",&ch); // get one input character
    2418:	ff 92       	push	r15
    241a:	ef 92       	push	r14
    241c:	a2 e0       	ldi	r26, 0x02	; 2
    241e:	b1 e2       	ldi	r27, 0x21	; 33
    2420:	bf 93       	push	r27
    2422:	af 93       	push	r26
    2424:	b7 d0       	rcall	.+366    	; 0x2594 <scanf>
				//printf("Echo: %c\n\r",ch); // echo to output
				if (ch == 58) { // if ":"
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	8a 33       	cpi	r24, 0x3A	; 58
    2436:	09 f0       	breq	.+2      	; 0x243a <main+0x1c8>
    2438:	63 cf       	rjmp	.-314    	; 0x2300 <main+0x8e>
					printf("r\n\r"); // Confirm in receive mode
    243a:	a7 e3       	ldi	r26, 0x37	; 55
    243c:	b1 e2       	ldi	r27, 0x21	; 33
    243e:	bf 93       	push	r27
    2440:	af 93       	push	r26
    2442:	95 d0       	rcall	.+298    	; 0x256e <printf>
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
					rx_state = receiving;
    2448:	12 e0       	ldi	r17, 0x02	; 2
    244a:	5a cf       	rjmp	.-332    	; 0x2300 <main+0x8e>

0000244c <__udivmodhi4>:
    244c:	aa 1b       	sub	r26, r26
    244e:	bb 1b       	sub	r27, r27
    2450:	51 e1       	ldi	r21, 0x11	; 17
    2452:	07 c0       	rjmp	.+14     	; 0x2462 <__udivmodhi4_ep>

00002454 <__udivmodhi4_loop>:
    2454:	aa 1f       	adc	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	a6 17       	cp	r26, r22
    245a:	b7 07       	cpc	r27, r23
    245c:	10 f0       	brcs	.+4      	; 0x2462 <__udivmodhi4_ep>
    245e:	a6 1b       	sub	r26, r22
    2460:	b7 0b       	sbc	r27, r23

00002462 <__udivmodhi4_ep>:
    2462:	88 1f       	adc	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	5a 95       	dec	r21
    2468:	a9 f7       	brne	.-22     	; 0x2454 <__udivmodhi4_loop>
    246a:	80 95       	com	r24
    246c:	90 95       	com	r25
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	08 95       	ret

00002474 <__divmodhi4>:
    2474:	97 fb       	bst	r25, 7
    2476:	07 2e       	mov	r0, r23
    2478:	16 f4       	brtc	.+4      	; 0x247e <__divmodhi4+0xa>
    247a:	00 94       	com	r0
    247c:	06 d0       	rcall	.+12     	; 0x248a <__divmodhi4_neg1>
    247e:	77 fd       	sbrc	r23, 7
    2480:	08 d0       	rcall	.+16     	; 0x2492 <__divmodhi4_neg2>
    2482:	e4 df       	rcall	.-56     	; 0x244c <__udivmodhi4>
    2484:	07 fc       	sbrc	r0, 7
    2486:	05 d0       	rcall	.+10     	; 0x2492 <__divmodhi4_neg2>
    2488:	3e f4       	brtc	.+14     	; 0x2498 <__divmodhi4_exit>

0000248a <__divmodhi4_neg1>:
    248a:	90 95       	com	r25
    248c:	81 95       	neg	r24
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	08 95       	ret

00002492 <__divmodhi4_neg2>:
    2492:	70 95       	com	r23
    2494:	61 95       	neg	r22
    2496:	7f 4f       	sbci	r23, 0xFF	; 255

00002498 <__divmodhi4_exit>:
    2498:	08 95       	ret

0000249a <__tablejump2__>:
    249a:	ee 0f       	add	r30, r30
    249c:	ff 1f       	adc	r31, r31
    249e:	88 1f       	adc	r24, r24
    24a0:	8b bf       	out	0x3b, r24	; 59
    24a2:	07 90       	elpm	r0, Z+
    24a4:	f6 91       	elpm	r31, Z
    24a6:	e0 2d       	mov	r30, r0
    24a8:	19 94       	eijmp

000024aa <__umulhisi3>:
    24aa:	a2 9f       	mul	r26, r18
    24ac:	b0 01       	movw	r22, r0
    24ae:	b3 9f       	mul	r27, r19
    24b0:	c0 01       	movw	r24, r0
    24b2:	a3 9f       	mul	r26, r19
    24b4:	70 0d       	add	r23, r0
    24b6:	81 1d       	adc	r24, r1
    24b8:	11 24       	eor	r1, r1
    24ba:	91 1d       	adc	r25, r1
    24bc:	b2 9f       	mul	r27, r18
    24be:	70 0d       	add	r23, r0
    24c0:	81 1d       	adc	r24, r1
    24c2:	11 24       	eor	r1, r1
    24c4:	91 1d       	adc	r25, r1
    24c6:	08 95       	ret

000024c8 <memcpy>:
    24c8:	fb 01       	movw	r30, r22
    24ca:	dc 01       	movw	r26, r24
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <memcpy+0xa>
    24ce:	01 90       	ld	r0, Z+
    24d0:	0d 92       	st	X+, r0
    24d2:	41 50       	subi	r20, 0x01	; 1
    24d4:	50 40       	sbci	r21, 0x00	; 0
    24d6:	d8 f7       	brcc	.-10     	; 0x24ce <memcpy+0x6>
    24d8:	08 95       	ret

000024da <fdevopen>:
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	31 f4       	brne	.+12     	; 0x24f2 <fdevopen+0x18>
    24e6:	61 15       	cp	r22, r1
    24e8:	71 05       	cpc	r23, r1
    24ea:	19 f4       	brne	.+6      	; 0x24f2 <fdevopen+0x18>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	39 c0       	rjmp	.+114    	; 0x2564 <fdevopen+0x8a>
    24f2:	8b 01       	movw	r16, r22
    24f4:	ec 01       	movw	r28, r24
    24f6:	6e e0       	ldi	r22, 0x0E	; 14
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	06 d5       	rcall	.+2572   	; 0x2f0c <calloc>
    2500:	fc 01       	movw	r30, r24
    2502:	89 2b       	or	r24, r25
    2504:	99 f3       	breq	.-26     	; 0x24ec <fdevopen+0x12>
    2506:	80 e8       	ldi	r24, 0x80	; 128
    2508:	83 83       	std	Z+3, r24	; 0x03
    250a:	01 15       	cp	r16, r1
    250c:	11 05       	cpc	r17, r1
    250e:	71 f0       	breq	.+28     	; 0x252c <fdevopen+0x52>
    2510:	02 87       	std	Z+10, r16	; 0x0a
    2512:	13 87       	std	Z+11, r17	; 0x0b
    2514:	81 e8       	ldi	r24, 0x81	; 129
    2516:	83 83       	std	Z+3, r24	; 0x03
    2518:	80 91 b9 27 	lds	r24, 0x27B9
    251c:	90 91 ba 27 	lds	r25, 0x27BA
    2520:	89 2b       	or	r24, r25
    2522:	21 f4       	brne	.+8      	; 0x252c <fdevopen+0x52>
    2524:	e0 93 b9 27 	sts	0x27B9, r30
    2528:	f0 93 ba 27 	sts	0x27BA, r31
    252c:	20 97       	sbiw	r28, 0x00	; 0
    252e:	c9 f0       	breq	.+50     	; 0x2562 <fdevopen+0x88>
    2530:	c0 87       	std	Z+8, r28	; 0x08
    2532:	d1 87       	std	Z+9, r29	; 0x09
    2534:	83 81       	ldd	r24, Z+3	; 0x03
    2536:	82 60       	ori	r24, 0x02	; 2
    2538:	83 83       	std	Z+3, r24	; 0x03
    253a:	80 91 bb 27 	lds	r24, 0x27BB
    253e:	90 91 bc 27 	lds	r25, 0x27BC
    2542:	89 2b       	or	r24, r25
    2544:	71 f4       	brne	.+28     	; 0x2562 <fdevopen+0x88>
    2546:	e0 93 bb 27 	sts	0x27BB, r30
    254a:	f0 93 bc 27 	sts	0x27BC, r31
    254e:	80 91 bd 27 	lds	r24, 0x27BD
    2552:	90 91 be 27 	lds	r25, 0x27BE
    2556:	89 2b       	or	r24, r25
    2558:	21 f4       	brne	.+8      	; 0x2562 <fdevopen+0x88>
    255a:	e0 93 bd 27 	sts	0x27BD, r30
    255e:	f0 93 be 27 	sts	0x27BE, r31
    2562:	cf 01       	movw	r24, r30
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	08 95       	ret

0000256e <printf>:
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	ae 01       	movw	r20, r28
    2578:	4a 5f       	subi	r20, 0xFA	; 250
    257a:	5f 4f       	sbci	r21, 0xFF	; 255
    257c:	fa 01       	movw	r30, r20
    257e:	61 91       	ld	r22, Z+
    2580:	71 91       	ld	r23, Z+
    2582:	af 01       	movw	r20, r30
    2584:	80 91 bb 27 	lds	r24, 0x27BB
    2588:	90 91 bc 27 	lds	r25, 0x27BC
    258c:	16 d0       	rcall	.+44     	; 0x25ba <vfprintf>
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	08 95       	ret

00002594 <scanf>:
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	ae 01       	movw	r20, r28
    259e:	4a 5f       	subi	r20, 0xFA	; 250
    25a0:	5f 4f       	sbci	r21, 0xFF	; 255
    25a2:	fa 01       	movw	r30, r20
    25a4:	61 91       	ld	r22, Z+
    25a6:	71 91       	ld	r23, Z+
    25a8:	af 01       	movw	r20, r30
    25aa:	80 91 b9 27 	lds	r24, 0x27B9
    25ae:	90 91 ba 27 	lds	r25, 0x27BA
    25b2:	8c d3       	rcall	.+1816   	; 0x2ccc <vfscanf>
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <vfprintf>:
    25ba:	2f 92       	push	r2
    25bc:	3f 92       	push	r3
    25be:	4f 92       	push	r4
    25c0:	5f 92       	push	r5
    25c2:	6f 92       	push	r6
    25c4:	7f 92       	push	r7
    25c6:	8f 92       	push	r8
    25c8:	9f 92       	push	r9
    25ca:	af 92       	push	r10
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	2c 97       	sbiw	r28, 0x0c	; 12
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	7c 01       	movw	r14, r24
    25ea:	6b 01       	movw	r12, r22
    25ec:	8a 01       	movw	r16, r20
    25ee:	fc 01       	movw	r30, r24
    25f0:	16 82       	std	Z+6, r1	; 0x06
    25f2:	17 82       	std	Z+7, r1	; 0x07
    25f4:	83 81       	ldd	r24, Z+3	; 0x03
    25f6:	81 ff       	sbrs	r24, 1
    25f8:	b0 c1       	rjmp	.+864    	; 0x295a <vfprintf+0x3a0>
    25fa:	ce 01       	movw	r24, r28
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	4c 01       	movw	r8, r24
    2600:	f7 01       	movw	r30, r14
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	f6 01       	movw	r30, r12
    2606:	93 fd       	sbrc	r25, 3
    2608:	85 91       	lpm	r24, Z+
    260a:	93 ff       	sbrs	r25, 3
    260c:	81 91       	ld	r24, Z+
    260e:	6f 01       	movw	r12, r30
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <vfprintf+0x5c>
    2614:	9e c1       	rjmp	.+828    	; 0x2952 <vfprintf+0x398>
    2616:	85 32       	cpi	r24, 0x25	; 37
    2618:	39 f4       	brne	.+14     	; 0x2628 <vfprintf+0x6e>
    261a:	93 fd       	sbrc	r25, 3
    261c:	85 91       	lpm	r24, Z+
    261e:	93 ff       	sbrs	r25, 3
    2620:	81 91       	ld	r24, Z+
    2622:	6f 01       	movw	r12, r30
    2624:	85 32       	cpi	r24, 0x25	; 37
    2626:	21 f4       	brne	.+8      	; 0x2630 <vfprintf+0x76>
    2628:	b7 01       	movw	r22, r14
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	24 d6       	rcall	.+3144   	; 0x3276 <fputc>
    262e:	e8 cf       	rjmp	.-48     	; 0x2600 <vfprintf+0x46>
    2630:	51 2c       	mov	r5, r1
    2632:	31 2c       	mov	r3, r1
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	20 32       	cpi	r18, 0x20	; 32
    2638:	a0 f4       	brcc	.+40     	; 0x2662 <vfprintf+0xa8>
    263a:	8b 32       	cpi	r24, 0x2B	; 43
    263c:	69 f0       	breq	.+26     	; 0x2658 <vfprintf+0x9e>
    263e:	30 f4       	brcc	.+12     	; 0x264c <vfprintf+0x92>
    2640:	80 32       	cpi	r24, 0x20	; 32
    2642:	59 f0       	breq	.+22     	; 0x265a <vfprintf+0xa0>
    2644:	83 32       	cpi	r24, 0x23	; 35
    2646:	69 f4       	brne	.+26     	; 0x2662 <vfprintf+0xa8>
    2648:	20 61       	ori	r18, 0x10	; 16
    264a:	2c c0       	rjmp	.+88     	; 0x26a4 <vfprintf+0xea>
    264c:	8d 32       	cpi	r24, 0x2D	; 45
    264e:	39 f0       	breq	.+14     	; 0x265e <vfprintf+0xa4>
    2650:	80 33       	cpi	r24, 0x30	; 48
    2652:	39 f4       	brne	.+14     	; 0x2662 <vfprintf+0xa8>
    2654:	21 60       	ori	r18, 0x01	; 1
    2656:	26 c0       	rjmp	.+76     	; 0x26a4 <vfprintf+0xea>
    2658:	22 60       	ori	r18, 0x02	; 2
    265a:	24 60       	ori	r18, 0x04	; 4
    265c:	23 c0       	rjmp	.+70     	; 0x26a4 <vfprintf+0xea>
    265e:	28 60       	ori	r18, 0x08	; 8
    2660:	21 c0       	rjmp	.+66     	; 0x26a4 <vfprintf+0xea>
    2662:	27 fd       	sbrc	r18, 7
    2664:	27 c0       	rjmp	.+78     	; 0x26b4 <vfprintf+0xfa>
    2666:	30 ed       	ldi	r19, 0xD0	; 208
    2668:	38 0f       	add	r19, r24
    266a:	3a 30       	cpi	r19, 0x0A	; 10
    266c:	78 f4       	brcc	.+30     	; 0x268c <vfprintf+0xd2>
    266e:	26 ff       	sbrs	r18, 6
    2670:	06 c0       	rjmp	.+12     	; 0x267e <vfprintf+0xc4>
    2672:	fa e0       	ldi	r31, 0x0A	; 10
    2674:	5f 9e       	mul	r5, r31
    2676:	30 0d       	add	r19, r0
    2678:	11 24       	eor	r1, r1
    267a:	53 2e       	mov	r5, r19
    267c:	13 c0       	rjmp	.+38     	; 0x26a4 <vfprintf+0xea>
    267e:	8a e0       	ldi	r24, 0x0A	; 10
    2680:	38 9e       	mul	r3, r24
    2682:	30 0d       	add	r19, r0
    2684:	11 24       	eor	r1, r1
    2686:	33 2e       	mov	r3, r19
    2688:	20 62       	ori	r18, 0x20	; 32
    268a:	0c c0       	rjmp	.+24     	; 0x26a4 <vfprintf+0xea>
    268c:	8e 32       	cpi	r24, 0x2E	; 46
    268e:	21 f4       	brne	.+8      	; 0x2698 <vfprintf+0xde>
    2690:	26 fd       	sbrc	r18, 6
    2692:	5f c1       	rjmp	.+702    	; 0x2952 <vfprintf+0x398>
    2694:	20 64       	ori	r18, 0x40	; 64
    2696:	06 c0       	rjmp	.+12     	; 0x26a4 <vfprintf+0xea>
    2698:	8c 36       	cpi	r24, 0x6C	; 108
    269a:	11 f4       	brne	.+4      	; 0x26a0 <vfprintf+0xe6>
    269c:	20 68       	ori	r18, 0x80	; 128
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <vfprintf+0xea>
    26a0:	88 36       	cpi	r24, 0x68	; 104
    26a2:	41 f4       	brne	.+16     	; 0x26b4 <vfprintf+0xfa>
    26a4:	f6 01       	movw	r30, r12
    26a6:	93 fd       	sbrc	r25, 3
    26a8:	85 91       	lpm	r24, Z+
    26aa:	93 ff       	sbrs	r25, 3
    26ac:	81 91       	ld	r24, Z+
    26ae:	6f 01       	movw	r12, r30
    26b0:	81 11       	cpse	r24, r1
    26b2:	c1 cf       	rjmp	.-126    	; 0x2636 <vfprintf+0x7c>
    26b4:	98 2f       	mov	r25, r24
    26b6:	9f 7d       	andi	r25, 0xDF	; 223
    26b8:	95 54       	subi	r25, 0x45	; 69
    26ba:	93 30       	cpi	r25, 0x03	; 3
    26bc:	28 f4       	brcc	.+10     	; 0x26c8 <vfprintf+0x10e>
    26be:	0c 5f       	subi	r16, 0xFC	; 252
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	ff e3       	ldi	r31, 0x3F	; 63
    26c4:	f9 83       	std	Y+1, r31	; 0x01
    26c6:	0d c0       	rjmp	.+26     	; 0x26e2 <vfprintf+0x128>
    26c8:	83 36       	cpi	r24, 0x63	; 99
    26ca:	31 f0       	breq	.+12     	; 0x26d8 <vfprintf+0x11e>
    26cc:	83 37       	cpi	r24, 0x73	; 115
    26ce:	71 f0       	breq	.+28     	; 0x26ec <vfprintf+0x132>
    26d0:	83 35       	cpi	r24, 0x53	; 83
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <vfprintf+0x11c>
    26d4:	57 c0       	rjmp	.+174    	; 0x2784 <vfprintf+0x1ca>
    26d6:	21 c0       	rjmp	.+66     	; 0x271a <vfprintf+0x160>
    26d8:	f8 01       	movw	r30, r16
    26da:	80 81       	ld	r24, Z
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	0e 5f       	subi	r16, 0xFE	; 254
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	44 24       	eor	r4, r4
    26e4:	43 94       	inc	r4
    26e6:	51 2c       	mov	r5, r1
    26e8:	54 01       	movw	r10, r8
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <vfprintf+0x15a>
    26ec:	38 01       	movw	r6, r16
    26ee:	f2 e0       	ldi	r31, 0x02	; 2
    26f0:	6f 0e       	add	r6, r31
    26f2:	71 1c       	adc	r7, r1
    26f4:	f8 01       	movw	r30, r16
    26f6:	a0 80       	ld	r10, Z
    26f8:	b1 80       	ldd	r11, Z+1	; 0x01
    26fa:	26 ff       	sbrs	r18, 6
    26fc:	03 c0       	rjmp	.+6      	; 0x2704 <vfprintf+0x14a>
    26fe:	65 2d       	mov	r22, r5
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <vfprintf+0x14e>
    2704:	6f ef       	ldi	r22, 0xFF	; 255
    2706:	7f ef       	ldi	r23, 0xFF	; 255
    2708:	c5 01       	movw	r24, r10
    270a:	2c 87       	std	Y+12, r18	; 0x0c
    270c:	6b d5       	rcall	.+2774   	; 0x31e4 <strnlen>
    270e:	2c 01       	movw	r4, r24
    2710:	83 01       	movw	r16, r6
    2712:	2c 85       	ldd	r18, Y+12	; 0x0c
    2714:	2f 77       	andi	r18, 0x7F	; 127
    2716:	22 2e       	mov	r2, r18
    2718:	16 c0       	rjmp	.+44     	; 0x2746 <vfprintf+0x18c>
    271a:	38 01       	movw	r6, r16
    271c:	f2 e0       	ldi	r31, 0x02	; 2
    271e:	6f 0e       	add	r6, r31
    2720:	71 1c       	adc	r7, r1
    2722:	f8 01       	movw	r30, r16
    2724:	a0 80       	ld	r10, Z
    2726:	b1 80       	ldd	r11, Z+1	; 0x01
    2728:	26 ff       	sbrs	r18, 6
    272a:	03 c0       	rjmp	.+6      	; 0x2732 <vfprintf+0x178>
    272c:	65 2d       	mov	r22, r5
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <vfprintf+0x17c>
    2732:	6f ef       	ldi	r22, 0xFF	; 255
    2734:	7f ef       	ldi	r23, 0xFF	; 255
    2736:	c5 01       	movw	r24, r10
    2738:	2c 87       	std	Y+12, r18	; 0x0c
    273a:	42 d5       	rcall	.+2692   	; 0x31c0 <strnlen_P>
    273c:	2c 01       	movw	r4, r24
    273e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2740:	20 68       	ori	r18, 0x80	; 128
    2742:	22 2e       	mov	r2, r18
    2744:	83 01       	movw	r16, r6
    2746:	23 fc       	sbrc	r2, 3
    2748:	19 c0       	rjmp	.+50     	; 0x277c <vfprintf+0x1c2>
    274a:	83 2d       	mov	r24, r3
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	48 16       	cp	r4, r24
    2750:	59 06       	cpc	r5, r25
    2752:	a0 f4       	brcc	.+40     	; 0x277c <vfprintf+0x1c2>
    2754:	b7 01       	movw	r22, r14
    2756:	80 e2       	ldi	r24, 0x20	; 32
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	8d d5       	rcall	.+2842   	; 0x3276 <fputc>
    275c:	3a 94       	dec	r3
    275e:	f5 cf       	rjmp	.-22     	; 0x274a <vfprintf+0x190>
    2760:	f5 01       	movw	r30, r10
    2762:	27 fc       	sbrc	r2, 7
    2764:	85 91       	lpm	r24, Z+
    2766:	27 fe       	sbrs	r2, 7
    2768:	81 91       	ld	r24, Z+
    276a:	5f 01       	movw	r10, r30
    276c:	b7 01       	movw	r22, r14
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	82 d5       	rcall	.+2820   	; 0x3276 <fputc>
    2772:	31 10       	cpse	r3, r1
    2774:	3a 94       	dec	r3
    2776:	f1 e0       	ldi	r31, 0x01	; 1
    2778:	4f 1a       	sub	r4, r31
    277a:	51 08       	sbc	r5, r1
    277c:	41 14       	cp	r4, r1
    277e:	51 04       	cpc	r5, r1
    2780:	79 f7       	brne	.-34     	; 0x2760 <vfprintf+0x1a6>
    2782:	de c0       	rjmp	.+444    	; 0x2940 <vfprintf+0x386>
    2784:	84 36       	cpi	r24, 0x64	; 100
    2786:	11 f0       	breq	.+4      	; 0x278c <vfprintf+0x1d2>
    2788:	89 36       	cpi	r24, 0x69	; 105
    278a:	31 f5       	brne	.+76     	; 0x27d8 <vfprintf+0x21e>
    278c:	f8 01       	movw	r30, r16
    278e:	27 ff       	sbrs	r18, 7
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <vfprintf+0x1e6>
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	0c 5f       	subi	r16, 0xFC	; 252
    279c:	1f 4f       	sbci	r17, 0xFF	; 255
    279e:	08 c0       	rjmp	.+16     	; 0x27b0 <vfprintf+0x1f6>
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	07 2e       	mov	r0, r23
    27a6:	00 0c       	add	r0, r0
    27a8:	88 0b       	sbc	r24, r24
    27aa:	99 0b       	sbc	r25, r25
    27ac:	0e 5f       	subi	r16, 0xFE	; 254
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	2f 76       	andi	r18, 0x6F	; 111
    27b2:	72 2e       	mov	r7, r18
    27b4:	97 ff       	sbrs	r25, 7
    27b6:	09 c0       	rjmp	.+18     	; 0x27ca <vfprintf+0x210>
    27b8:	90 95       	com	r25
    27ba:	80 95       	com	r24
    27bc:	70 95       	com	r23
    27be:	61 95       	neg	r22
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	8f 4f       	sbci	r24, 0xFF	; 255
    27c4:	9f 4f       	sbci	r25, 0xFF	; 255
    27c6:	20 68       	ori	r18, 0x80	; 128
    27c8:	72 2e       	mov	r7, r18
    27ca:	2a e0       	ldi	r18, 0x0A	; 10
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	a4 01       	movw	r20, r8
    27d0:	a3 d5       	rcall	.+2886   	; 0x3318 <__ultoa_invert>
    27d2:	a8 2e       	mov	r10, r24
    27d4:	a8 18       	sub	r10, r8
    27d6:	43 c0       	rjmp	.+134    	; 0x285e <vfprintf+0x2a4>
    27d8:	85 37       	cpi	r24, 0x75	; 117
    27da:	29 f4       	brne	.+10     	; 0x27e6 <vfprintf+0x22c>
    27dc:	2f 7e       	andi	r18, 0xEF	; 239
    27de:	b2 2e       	mov	r11, r18
    27e0:	2a e0       	ldi	r18, 0x0A	; 10
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	25 c0       	rjmp	.+74     	; 0x2830 <vfprintf+0x276>
    27e6:	f2 2f       	mov	r31, r18
    27e8:	f9 7f       	andi	r31, 0xF9	; 249
    27ea:	bf 2e       	mov	r11, r31
    27ec:	8f 36       	cpi	r24, 0x6F	; 111
    27ee:	c1 f0       	breq	.+48     	; 0x2820 <vfprintf+0x266>
    27f0:	18 f4       	brcc	.+6      	; 0x27f8 <vfprintf+0x23e>
    27f2:	88 35       	cpi	r24, 0x58	; 88
    27f4:	79 f0       	breq	.+30     	; 0x2814 <vfprintf+0x25a>
    27f6:	ad c0       	rjmp	.+346    	; 0x2952 <vfprintf+0x398>
    27f8:	80 37       	cpi	r24, 0x70	; 112
    27fa:	19 f0       	breq	.+6      	; 0x2802 <vfprintf+0x248>
    27fc:	88 37       	cpi	r24, 0x78	; 120
    27fe:	21 f0       	breq	.+8      	; 0x2808 <vfprintf+0x24e>
    2800:	a8 c0       	rjmp	.+336    	; 0x2952 <vfprintf+0x398>
    2802:	2f 2f       	mov	r18, r31
    2804:	20 61       	ori	r18, 0x10	; 16
    2806:	b2 2e       	mov	r11, r18
    2808:	b4 fe       	sbrs	r11, 4
    280a:	0d c0       	rjmp	.+26     	; 0x2826 <vfprintf+0x26c>
    280c:	8b 2d       	mov	r24, r11
    280e:	84 60       	ori	r24, 0x04	; 4
    2810:	b8 2e       	mov	r11, r24
    2812:	09 c0       	rjmp	.+18     	; 0x2826 <vfprintf+0x26c>
    2814:	24 ff       	sbrs	r18, 4
    2816:	0a c0       	rjmp	.+20     	; 0x282c <vfprintf+0x272>
    2818:	9f 2f       	mov	r25, r31
    281a:	96 60       	ori	r25, 0x06	; 6
    281c:	b9 2e       	mov	r11, r25
    281e:	06 c0       	rjmp	.+12     	; 0x282c <vfprintf+0x272>
    2820:	28 e0       	ldi	r18, 0x08	; 8
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <vfprintf+0x276>
    2826:	20 e1       	ldi	r18, 0x10	; 16
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <vfprintf+0x276>
    282c:	20 e1       	ldi	r18, 0x10	; 16
    282e:	32 e0       	ldi	r19, 0x02	; 2
    2830:	f8 01       	movw	r30, r16
    2832:	b7 fe       	sbrs	r11, 7
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <vfprintf+0x28a>
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	0c 5f       	subi	r16, 0xFC	; 252
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	06 c0       	rjmp	.+12     	; 0x2850 <vfprintf+0x296>
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 5f       	subi	r16, 0xFE	; 254
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	a4 01       	movw	r20, r8
    2852:	62 d5       	rcall	.+2756   	; 0x3318 <__ultoa_invert>
    2854:	a8 2e       	mov	r10, r24
    2856:	a8 18       	sub	r10, r8
    2858:	fb 2d       	mov	r31, r11
    285a:	ff 77       	andi	r31, 0x7F	; 127
    285c:	7f 2e       	mov	r7, r31
    285e:	76 fe       	sbrs	r7, 6
    2860:	0b c0       	rjmp	.+22     	; 0x2878 <vfprintf+0x2be>
    2862:	37 2d       	mov	r19, r7
    2864:	3e 7f       	andi	r19, 0xFE	; 254
    2866:	a5 14       	cp	r10, r5
    2868:	50 f4       	brcc	.+20     	; 0x287e <vfprintf+0x2c4>
    286a:	74 fe       	sbrs	r7, 4
    286c:	0a c0       	rjmp	.+20     	; 0x2882 <vfprintf+0x2c8>
    286e:	72 fc       	sbrc	r7, 2
    2870:	08 c0       	rjmp	.+16     	; 0x2882 <vfprintf+0x2c8>
    2872:	37 2d       	mov	r19, r7
    2874:	3e 7e       	andi	r19, 0xEE	; 238
    2876:	05 c0       	rjmp	.+10     	; 0x2882 <vfprintf+0x2c8>
    2878:	ba 2c       	mov	r11, r10
    287a:	37 2d       	mov	r19, r7
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <vfprintf+0x2ca>
    287e:	ba 2c       	mov	r11, r10
    2880:	01 c0       	rjmp	.+2      	; 0x2884 <vfprintf+0x2ca>
    2882:	b5 2c       	mov	r11, r5
    2884:	34 ff       	sbrs	r19, 4
    2886:	0d c0       	rjmp	.+26     	; 0x28a2 <vfprintf+0x2e8>
    2888:	fe 01       	movw	r30, r28
    288a:	ea 0d       	add	r30, r10
    288c:	f1 1d       	adc	r31, r1
    288e:	80 81       	ld	r24, Z
    2890:	80 33       	cpi	r24, 0x30	; 48
    2892:	11 f4       	brne	.+4      	; 0x2898 <vfprintf+0x2de>
    2894:	39 7e       	andi	r19, 0xE9	; 233
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <vfprintf+0x2f0>
    2898:	32 ff       	sbrs	r19, 2
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0x2ee>
    289c:	b3 94       	inc	r11
    289e:	b3 94       	inc	r11
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <vfprintf+0x2f0>
    28a2:	83 2f       	mov	r24, r19
    28a4:	86 78       	andi	r24, 0x86	; 134
    28a6:	09 f0       	breq	.+2      	; 0x28aa <vfprintf+0x2f0>
    28a8:	b3 94       	inc	r11
    28aa:	33 fd       	sbrc	r19, 3
    28ac:	12 c0       	rjmp	.+36     	; 0x28d2 <vfprintf+0x318>
    28ae:	30 ff       	sbrs	r19, 0
    28b0:	06 c0       	rjmp	.+12     	; 0x28be <vfprintf+0x304>
    28b2:	5a 2c       	mov	r5, r10
    28b4:	b3 14       	cp	r11, r3
    28b6:	18 f4       	brcc	.+6      	; 0x28be <vfprintf+0x304>
    28b8:	53 0c       	add	r5, r3
    28ba:	5b 18       	sub	r5, r11
    28bc:	b3 2c       	mov	r11, r3
    28be:	b3 14       	cp	r11, r3
    28c0:	60 f4       	brcc	.+24     	; 0x28da <vfprintf+0x320>
    28c2:	b7 01       	movw	r22, r14
    28c4:	80 e2       	ldi	r24, 0x20	; 32
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	3c 87       	std	Y+12, r19	; 0x0c
    28ca:	d5 d4       	rcall	.+2474   	; 0x3276 <fputc>
    28cc:	b3 94       	inc	r11
    28ce:	3c 85       	ldd	r19, Y+12	; 0x0c
    28d0:	f6 cf       	rjmp	.-20     	; 0x28be <vfprintf+0x304>
    28d2:	b3 14       	cp	r11, r3
    28d4:	10 f4       	brcc	.+4      	; 0x28da <vfprintf+0x320>
    28d6:	3b 18       	sub	r3, r11
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <vfprintf+0x322>
    28da:	31 2c       	mov	r3, r1
    28dc:	34 ff       	sbrs	r19, 4
    28de:	11 c0       	rjmp	.+34     	; 0x2902 <vfprintf+0x348>
    28e0:	b7 01       	movw	r22, r14
    28e2:	80 e3       	ldi	r24, 0x30	; 48
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	3c 87       	std	Y+12, r19	; 0x0c
    28e8:	c6 d4       	rcall	.+2444   	; 0x3276 <fputc>
    28ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    28ec:	32 ff       	sbrs	r19, 2
    28ee:	16 c0       	rjmp	.+44     	; 0x291c <vfprintf+0x362>
    28f0:	31 fd       	sbrc	r19, 1
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <vfprintf+0x340>
    28f4:	88 e7       	ldi	r24, 0x78	; 120
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <vfprintf+0x344>
    28fa:	88 e5       	ldi	r24, 0x58	; 88
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	b7 01       	movw	r22, r14
    2900:	0c c0       	rjmp	.+24     	; 0x291a <vfprintf+0x360>
    2902:	83 2f       	mov	r24, r19
    2904:	86 78       	andi	r24, 0x86	; 134
    2906:	51 f0       	breq	.+20     	; 0x291c <vfprintf+0x362>
    2908:	31 ff       	sbrs	r19, 1
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <vfprintf+0x356>
    290c:	8b e2       	ldi	r24, 0x2B	; 43
    290e:	01 c0       	rjmp	.+2      	; 0x2912 <vfprintf+0x358>
    2910:	80 e2       	ldi	r24, 0x20	; 32
    2912:	37 fd       	sbrc	r19, 7
    2914:	8d e2       	ldi	r24, 0x2D	; 45
    2916:	b7 01       	movw	r22, r14
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	ad d4       	rcall	.+2394   	; 0x3276 <fputc>
    291c:	a5 14       	cp	r10, r5
    291e:	30 f4       	brcc	.+12     	; 0x292c <vfprintf+0x372>
    2920:	b7 01       	movw	r22, r14
    2922:	80 e3       	ldi	r24, 0x30	; 48
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a7 d4       	rcall	.+2382   	; 0x3276 <fputc>
    2928:	5a 94       	dec	r5
    292a:	f8 cf       	rjmp	.-16     	; 0x291c <vfprintf+0x362>
    292c:	aa 94       	dec	r10
    292e:	f4 01       	movw	r30, r8
    2930:	ea 0d       	add	r30, r10
    2932:	f1 1d       	adc	r31, r1
    2934:	80 81       	ld	r24, Z
    2936:	b7 01       	movw	r22, r14
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9d d4       	rcall	.+2362   	; 0x3276 <fputc>
    293c:	a1 10       	cpse	r10, r1
    293e:	f6 cf       	rjmp	.-20     	; 0x292c <vfprintf+0x372>
    2940:	33 20       	and	r3, r3
    2942:	09 f4       	brne	.+2      	; 0x2946 <vfprintf+0x38c>
    2944:	5d ce       	rjmp	.-838    	; 0x2600 <vfprintf+0x46>
    2946:	b7 01       	movw	r22, r14
    2948:	80 e2       	ldi	r24, 0x20	; 32
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	94 d4       	rcall	.+2344   	; 0x3276 <fputc>
    294e:	3a 94       	dec	r3
    2950:	f7 cf       	rjmp	.-18     	; 0x2940 <vfprintf+0x386>
    2952:	f7 01       	movw	r30, r14
    2954:	86 81       	ldd	r24, Z+6	; 0x06
    2956:	97 81       	ldd	r25, Z+7	; 0x07
    2958:	02 c0       	rjmp	.+4      	; 0x295e <vfprintf+0x3a4>
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	9f ef       	ldi	r25, 0xFF	; 255
    295e:	2c 96       	adiw	r28, 0x0c	; 12
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	cf 90       	pop	r12
    2974:	bf 90       	pop	r11
    2976:	af 90       	pop	r10
    2978:	9f 90       	pop	r9
    297a:	8f 90       	pop	r8
    297c:	7f 90       	pop	r7
    297e:	6f 90       	pop	r6
    2980:	5f 90       	pop	r5
    2982:	4f 90       	pop	r4
    2984:	3f 90       	pop	r3
    2986:	2f 90       	pop	r2
    2988:	08 95       	ret

0000298a <putval>:
    298a:	20 fd       	sbrc	r18, 0
    298c:	09 c0       	rjmp	.+18     	; 0x29a0 <putval+0x16>
    298e:	fc 01       	movw	r30, r24
    2990:	23 fd       	sbrc	r18, 3
    2992:	05 c0       	rjmp	.+10     	; 0x299e <putval+0x14>
    2994:	22 ff       	sbrs	r18, 2
    2996:	02 c0       	rjmp	.+4      	; 0x299c <putval+0x12>
    2998:	73 83       	std	Z+3, r23	; 0x03
    299a:	62 83       	std	Z+2, r22	; 0x02
    299c:	51 83       	std	Z+1, r21	; 0x01
    299e:	40 83       	st	Z, r20
    29a0:	08 95       	ret

000029a2 <mulacc>:
    29a2:	44 fd       	sbrc	r20, 4
    29a4:	10 c0       	rjmp	.+32     	; 0x29c6 <mulacc+0x24>
    29a6:	46 fd       	sbrc	r20, 6
    29a8:	10 c0       	rjmp	.+32     	; 0x29ca <mulacc+0x28>
    29aa:	db 01       	movw	r26, r22
    29ac:	fc 01       	movw	r30, r24
    29ae:	aa 0f       	add	r26, r26
    29b0:	bb 1f       	adc	r27, r27
    29b2:	ee 1f       	adc	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	10 94       	com	r1
    29b8:	d1 f7       	brne	.-12     	; 0x29ae <mulacc+0xc>
    29ba:	6a 0f       	add	r22, r26
    29bc:	7b 1f       	adc	r23, r27
    29be:	8e 1f       	adc	r24, r30
    29c0:	9f 1f       	adc	r25, r31
    29c2:	31 e0       	ldi	r19, 0x01	; 1
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <mulacc+0x2a>
    29c6:	33 e0       	ldi	r19, 0x03	; 3
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <mulacc+0x2a>
    29ca:	34 e0       	ldi	r19, 0x04	; 4
    29cc:	66 0f       	add	r22, r22
    29ce:	77 1f       	adc	r23, r23
    29d0:	88 1f       	adc	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	31 50       	subi	r19, 0x01	; 1
    29d6:	d1 f7       	brne	.-12     	; 0x29cc <mulacc+0x2a>
    29d8:	62 0f       	add	r22, r18
    29da:	71 1d       	adc	r23, r1
    29dc:	81 1d       	adc	r24, r1
    29de:	91 1d       	adc	r25, r1
    29e0:	08 95       	ret

000029e2 <skip_spaces>:
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	8c 01       	movw	r16, r24
    29ec:	c8 01       	movw	r24, r16
    29ee:	05 d4       	rcall	.+2058   	; 0x31fa <fgetc>
    29f0:	ec 01       	movw	r28, r24
    29f2:	97 fd       	sbrc	r25, 7
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <skip_spaces+0x20>
    29f6:	d1 d3       	rcall	.+1954   	; 0x319a <isspace>
    29f8:	89 2b       	or	r24, r25
    29fa:	c1 f7       	brne	.-16     	; 0x29ec <skip_spaces+0xa>
    29fc:	b8 01       	movw	r22, r16
    29fe:	ce 01       	movw	r24, r28
    2a00:	72 d4       	rcall	.+2276   	; 0x32e6 <ungetc>
    2a02:	ce 01       	movw	r24, r28
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	08 95       	ret

00002a0e <conv_int>:
    2a0e:	8f 92       	push	r8
    2a10:	9f 92       	push	r9
    2a12:	af 92       	push	r10
    2a14:	bf 92       	push	r11
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	1f 92       	push	r1
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	8c 01       	movw	r16, r24
    2a2e:	c6 2e       	mov	r12, r22
    2a30:	7a 01       	movw	r14, r20
    2a32:	29 83       	std	Y+1, r18	; 0x01
    2a34:	e2 d3       	rcall	.+1988   	; 0x31fa <fgetc>
    2a36:	ac 01       	movw	r20, r24
    2a38:	55 27       	eor	r21, r21
    2a3a:	29 81       	ldd	r18, Y+1	; 0x01
    2a3c:	4b 32       	cpi	r20, 0x2B	; 43
    2a3e:	51 05       	cpc	r21, r1
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <conv_int+0x3c>
    2a42:	4d 32       	cpi	r20, 0x2D	; 45
    2a44:	51 05       	cpc	r21, r1
    2a46:	61 f4       	brne	.+24     	; 0x2a60 <conv_int+0x52>
    2a48:	20 68       	ori	r18, 0x80	; 128
    2a4a:	ca 94       	dec	r12
    2a4c:	c1 10       	cpse	r12, r1
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <conv_int+0x46>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	6f c0       	rjmp	.+222    	; 0x2b32 <conv_int+0x124>
    2a54:	c8 01       	movw	r24, r16
    2a56:	29 83       	std	Y+1, r18	; 0x01
    2a58:	d0 d3       	rcall	.+1952   	; 0x31fa <fgetc>
    2a5a:	29 81       	ldd	r18, Y+1	; 0x01
    2a5c:	97 fd       	sbrc	r25, 7
    2a5e:	f8 cf       	rjmp	.-16     	; 0x2a50 <conv_int+0x42>
    2a60:	32 2f       	mov	r19, r18
    2a62:	3d 7f       	andi	r19, 0xFD	; 253
    2a64:	d3 2e       	mov	r13, r19
    2a66:	32 2f       	mov	r19, r18
    2a68:	30 73       	andi	r19, 0x30	; 48
    2a6a:	39 f5       	brne	.+78     	; 0x2aba <conv_int+0xac>
    2a6c:	80 33       	cpi	r24, 0x30	; 48
    2a6e:	29 f5       	brne	.+74     	; 0x2aba <conv_int+0xac>
    2a70:	bb 24       	eor	r11, r11
    2a72:	ba 94       	dec	r11
    2a74:	bc 0c       	add	r11, r12
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <conv_int+0x6c>
    2a78:	49 c0       	rjmp	.+146    	; 0x2b0c <conv_int+0xfe>
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	29 83       	std	Y+1, r18	; 0x01
    2a7e:	bd d3       	rcall	.+1914   	; 0x31fa <fgetc>
    2a80:	29 81       	ldd	r18, Y+1	; 0x01
    2a82:	97 fd       	sbrc	r25, 7
    2a84:	43 c0       	rjmp	.+134    	; 0x2b0c <conv_int+0xfe>
    2a86:	38 2f       	mov	r19, r24
    2a88:	3f 7d       	andi	r19, 0xDF	; 223
    2a8a:	38 35       	cpi	r19, 0x58	; 88
    2a8c:	61 f4       	brne	.+24     	; 0x2aa6 <conv_int+0x98>
    2a8e:	8d 2d       	mov	r24, r13
    2a90:	82 64       	ori	r24, 0x42	; 66
    2a92:	d8 2e       	mov	r13, r24
    2a94:	ca 94       	dec	r12
    2a96:	ca 94       	dec	r12
    2a98:	cc 20       	and	r12, r12
    2a9a:	c1 f1       	breq	.+112    	; 0x2b0c <conv_int+0xfe>
    2a9c:	c8 01       	movw	r24, r16
    2a9e:	ad d3       	rcall	.+1882   	; 0x31fa <fgetc>
    2aa0:	97 ff       	sbrs	r25, 7
    2aa2:	0b c0       	rjmp	.+22     	; 0x2aba <conv_int+0xac>
    2aa4:	33 c0       	rjmp	.+102    	; 0x2b0c <conv_int+0xfe>
    2aa6:	26 ff       	sbrs	r18, 6
    2aa8:	04 c0       	rjmp	.+8      	; 0x2ab2 <conv_int+0xa4>
    2aaa:	2d 2d       	mov	r18, r13
    2aac:	22 60       	ori	r18, 0x02	; 2
    2aae:	d2 2e       	mov	r13, r18
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <conv_int+0xaa>
    2ab2:	3d 2d       	mov	r19, r13
    2ab4:	32 61       	ori	r19, 0x12	; 18
    2ab6:	d3 2e       	mov	r13, r19
    2ab8:	cb 2c       	mov	r12, r11
    2aba:	81 2c       	mov	r8, r1
    2abc:	91 2c       	mov	r9, r1
    2abe:	54 01       	movw	r10, r8
    2ac0:	20 ed       	ldi	r18, 0xD0	; 208
    2ac2:	28 0f       	add	r18, r24
    2ac4:	28 30       	cpi	r18, 0x08	; 8
    2ac6:	78 f0       	brcs	.+30     	; 0x2ae6 <conv_int+0xd8>
    2ac8:	d4 fe       	sbrs	r13, 4
    2aca:	03 c0       	rjmp	.+6      	; 0x2ad2 <conv_int+0xc4>
    2acc:	b8 01       	movw	r22, r16
    2ace:	0b d4       	rcall	.+2070   	; 0x32e6 <ungetc>
    2ad0:	1a c0       	rjmp	.+52     	; 0x2b06 <conv_int+0xf8>
    2ad2:	2a 30       	cpi	r18, 0x0A	; 10
    2ad4:	40 f0       	brcs	.+16     	; 0x2ae6 <conv_int+0xd8>
    2ad6:	d6 fe       	sbrs	r13, 6
    2ad8:	f9 cf       	rjmp	.-14     	; 0x2acc <conv_int+0xbe>
    2ada:	2f 7d       	andi	r18, 0xDF	; 223
    2adc:	3f ee       	ldi	r19, 0xEF	; 239
    2ade:	32 0f       	add	r19, r18
    2ae0:	36 30       	cpi	r19, 0x06	; 6
    2ae2:	a0 f7       	brcc	.-24     	; 0x2acc <conv_int+0xbe>
    2ae4:	27 50       	subi	r18, 0x07	; 7
    2ae6:	4d 2d       	mov	r20, r13
    2ae8:	c5 01       	movw	r24, r10
    2aea:	b4 01       	movw	r22, r8
    2aec:	5a df       	rcall	.-332    	; 0x29a2 <mulacc>
    2aee:	4b 01       	movw	r8, r22
    2af0:	5c 01       	movw	r10, r24
    2af2:	8d 2d       	mov	r24, r13
    2af4:	82 60       	ori	r24, 0x02	; 2
    2af6:	d8 2e       	mov	r13, r24
    2af8:	ca 94       	dec	r12
    2afa:	cc 20       	and	r12, r12
    2afc:	51 f0       	breq	.+20     	; 0x2b12 <conv_int+0x104>
    2afe:	c8 01       	movw	r24, r16
    2b00:	7c d3       	rcall	.+1784   	; 0x31fa <fgetc>
    2b02:	97 ff       	sbrs	r25, 7
    2b04:	dd cf       	rjmp	.-70     	; 0x2ac0 <conv_int+0xb2>
    2b06:	d1 fc       	sbrc	r13, 1
    2b08:	04 c0       	rjmp	.+8      	; 0x2b12 <conv_int+0x104>
    2b0a:	a2 cf       	rjmp	.-188    	; 0x2a50 <conv_int+0x42>
    2b0c:	81 2c       	mov	r8, r1
    2b0e:	91 2c       	mov	r9, r1
    2b10:	54 01       	movw	r10, r8
    2b12:	d7 fe       	sbrs	r13, 7
    2b14:	08 c0       	rjmp	.+16     	; 0x2b26 <conv_int+0x118>
    2b16:	b0 94       	com	r11
    2b18:	a0 94       	com	r10
    2b1a:	90 94       	com	r9
    2b1c:	80 94       	com	r8
    2b1e:	81 1c       	adc	r8, r1
    2b20:	91 1c       	adc	r9, r1
    2b22:	a1 1c       	adc	r10, r1
    2b24:	b1 1c       	adc	r11, r1
    2b26:	2d 2d       	mov	r18, r13
    2b28:	b5 01       	movw	r22, r10
    2b2a:	a4 01       	movw	r20, r8
    2b2c:	c7 01       	movw	r24, r14
    2b2e:	2d df       	rcall	.-422    	; 0x298a <putval>
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	0f 90       	pop	r0
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
    2b44:	bf 90       	pop	r11
    2b46:	af 90       	pop	r10
    2b48:	9f 90       	pop	r9
    2b4a:	8f 90       	pop	r8
    2b4c:	08 95       	ret

00002b4e <conv_brk>:
    2b4e:	6f 92       	push	r6
    2b50:	7f 92       	push	r7
    2b52:	8f 92       	push	r8
    2b54:	9f 92       	push	r9
    2b56:	af 92       	push	r10
    2b58:	bf 92       	push	r11
    2b5a:	cf 92       	push	r12
    2b5c:	df 92       	push	r13
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	a1 97       	sbiw	r28, 0x21	; 33
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	5c 01       	movw	r10, r24
    2b76:	7a 01       	movw	r14, r20
    2b78:	ce 01       	movw	r24, r28
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	6c 01       	movw	r12, r24
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	f6 01       	movw	r30, r12
    2b82:	11 92       	st	Z+, r1
    2b84:	8a 95       	dec	r24
    2b86:	e9 f7       	brne	.-6      	; 0x2b82 <conv_brk+0x34>
    2b88:	f5 01       	movw	r30, r10
    2b8a:	83 80       	ldd	r8, Z+3	; 0x03
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	91 2c       	mov	r9, r1
    2b92:	71 2c       	mov	r7, r1
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	a1 e0       	ldi	r26, 0x01	; 1
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	f9 01       	movw	r30, r18
    2b9c:	83 fc       	sbrc	r8, 3
    2b9e:	85 91       	lpm	r24, Z+
    2ba0:	83 fe       	sbrs	r8, 3
    2ba2:	81 91       	ld	r24, Z+
    2ba4:	8f 01       	movw	r16, r30
    2ba6:	98 2f       	mov	r25, r24
    2ba8:	9f 01       	movw	r18, r30
    2baa:	81 11       	cpse	r24, r1
    2bac:	03 c0       	rjmp	.+6      	; 0x2bb4 <conv_brk+0x66>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	7a c0       	rjmp	.+244    	; 0x2ca8 <conv_brk+0x15a>
    2bb4:	8e 35       	cpi	r24, 0x5E	; 94
    2bb6:	19 f4       	brne	.+6      	; 0x2bbe <conv_brk+0x70>
    2bb8:	41 15       	cp	r20, r1
    2bba:	51 05       	cpc	r21, r1
    2bbc:	49 f1       	breq	.+82     	; 0x2c10 <conv_brk+0xc2>
    2bbe:	e7 2f       	mov	r30, r23
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	e4 17       	cp	r30, r20
    2bc4:	f5 07       	cpc	r31, r21
    2bc6:	3c f4       	brge	.+14     	; 0x2bd6 <conv_brk+0x88>
    2bc8:	8d 35       	cpi	r24, 0x5D	; 93
    2bca:	59 f1       	breq	.+86     	; 0x2c22 <conv_brk+0xd4>
    2bcc:	8d 32       	cpi	r24, 0x2D	; 45
    2bce:	19 f4       	brne	.+6      	; 0x2bd6 <conv_brk+0x88>
    2bd0:	77 20       	and	r7, r7
    2bd2:	01 f1       	breq	.+64     	; 0x2c14 <conv_brk+0xc6>
    2bd4:	03 c0       	rjmp	.+6      	; 0x2bdc <conv_brk+0x8e>
    2bd6:	71 10       	cpse	r7, r1
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <conv_brk+0x8e>
    2bda:	98 2e       	mov	r9, r24
    2bdc:	89 2f       	mov	r24, r25
    2bde:	86 95       	lsr	r24
    2be0:	86 95       	lsr	r24
    2be2:	86 95       	lsr	r24
    2be4:	86 01       	movw	r16, r12
    2be6:	08 0f       	add	r16, r24
    2be8:	11 1d       	adc	r17, r1
    2bea:	89 2f       	mov	r24, r25
    2bec:	87 70       	andi	r24, 0x07	; 7
    2bee:	3d 01       	movw	r6, r26
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <conv_brk+0xa6>
    2bf2:	66 0c       	add	r6, r6
    2bf4:	8a 95       	dec	r24
    2bf6:	ea f7       	brpl	.-6      	; 0x2bf2 <conv_brk+0xa4>
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	80 81       	ld	r24, Z
    2bfc:	86 29       	or	r24, r6
    2bfe:	80 83       	st	Z, r24
    2c00:	99 15       	cp	r25, r9
    2c02:	59 f0       	breq	.+22     	; 0x2c1a <conv_brk+0xcc>
    2c04:	99 15       	cp	r25, r9
    2c06:	10 f4       	brcc	.+4      	; 0x2c0c <conv_brk+0xbe>
    2c08:	9f 5f       	subi	r25, 0xFF	; 255
    2c0a:	e8 cf       	rjmp	.-48     	; 0x2bdc <conv_brk+0x8e>
    2c0c:	91 50       	subi	r25, 0x01	; 1
    2c0e:	e6 cf       	rjmp	.-52     	; 0x2bdc <conv_brk+0x8e>
    2c10:	71 e0       	ldi	r23, 0x01	; 1
    2c12:	04 c0       	rjmp	.+8      	; 0x2c1c <conv_brk+0xce>
    2c14:	77 24       	eor	r7, r7
    2c16:	73 94       	inc	r7
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <conv_brk+0xce>
    2c1a:	71 2c       	mov	r7, r1
    2c1c:	4f 5f       	subi	r20, 0xFF	; 255
    2c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c20:	bc cf       	rjmp	.-136    	; 0x2b9a <conv_brk+0x4c>
    2c22:	77 20       	and	r7, r7
    2c24:	19 f0       	breq	.+6      	; 0x2c2c <conv_brk+0xde>
    2c26:	8e 81       	ldd	r24, Y+6	; 0x06
    2c28:	80 62       	ori	r24, 0x20	; 32
    2c2a:	8e 83       	std	Y+6, r24	; 0x06
    2c2c:	71 11       	cpse	r23, r1
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <conv_brk+0xe8>
    2c30:	99 24       	eor	r9, r9
    2c32:	93 94       	inc	r9
    2c34:	16 c0       	rjmp	.+44     	; 0x2c62 <conv_brk+0x114>
    2c36:	f6 01       	movw	r30, r12
    2c38:	9e 01       	movw	r18, r28
    2c3a:	2f 5d       	subi	r18, 0xDF	; 223
    2c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	80 95       	com	r24
    2c42:	81 93       	st	Z+, r24
    2c44:	e2 17       	cp	r30, r18
    2c46:	f3 07       	cpc	r31, r19
    2c48:	d1 f7       	brne	.-12     	; 0x2c3e <conv_brk+0xf0>
    2c4a:	f2 cf       	rjmp	.-28     	; 0x2c30 <conv_brk+0xe2>
    2c4c:	e1 14       	cp	r14, r1
    2c4e:	f1 04       	cpc	r15, r1
    2c50:	29 f0       	breq	.+10     	; 0x2c5c <conv_brk+0x10e>
    2c52:	f7 01       	movw	r30, r14
    2c54:	80 83       	st	Z, r24
    2c56:	c7 01       	movw	r24, r14
    2c58:	01 96       	adiw	r24, 0x01	; 1
    2c5a:	7c 01       	movw	r14, r24
    2c5c:	61 50       	subi	r22, 0x01	; 1
    2c5e:	91 2c       	mov	r9, r1
    2c60:	e9 f0       	breq	.+58     	; 0x2c9c <conv_brk+0x14e>
    2c62:	c5 01       	movw	r24, r10
    2c64:	69 a3       	std	Y+33, r22	; 0x21
    2c66:	c9 d2       	rcall	.+1426   	; 0x31fa <fgetc>
    2c68:	69 a1       	ldd	r22, Y+33	; 0x21
    2c6a:	97 fd       	sbrc	r25, 7
    2c6c:	15 c0       	rjmp	.+42     	; 0x2c98 <conv_brk+0x14a>
    2c6e:	28 2f       	mov	r18, r24
    2c70:	26 95       	lsr	r18
    2c72:	26 95       	lsr	r18
    2c74:	26 95       	lsr	r18
    2c76:	f6 01       	movw	r30, r12
    2c78:	e2 0f       	add	r30, r18
    2c7a:	f1 1d       	adc	r31, r1
    2c7c:	20 81       	ld	r18, Z
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	ac 01       	movw	r20, r24
    2c82:	47 70       	andi	r20, 0x07	; 7
    2c84:	55 27       	eor	r21, r21
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <conv_brk+0x13e>
    2c88:	35 95       	asr	r19
    2c8a:	27 95       	ror	r18
    2c8c:	4a 95       	dec	r20
    2c8e:	e2 f7       	brpl	.-8      	; 0x2c88 <conv_brk+0x13a>
    2c90:	20 fd       	sbrc	r18, 0
    2c92:	dc cf       	rjmp	.-72     	; 0x2c4c <conv_brk+0xfe>
    2c94:	b5 01       	movw	r22, r10
    2c96:	27 d3       	rcall	.+1614   	; 0x32e6 <ungetc>
    2c98:	91 10       	cpse	r9, r1
    2c9a:	89 cf       	rjmp	.-238    	; 0x2bae <conv_brk+0x60>
    2c9c:	e1 14       	cp	r14, r1
    2c9e:	f1 04       	cpc	r15, r1
    2ca0:	11 f0       	breq	.+4      	; 0x2ca6 <conv_brk+0x158>
    2ca2:	f7 01       	movw	r30, r14
    2ca4:	10 82       	st	Z, r1
    2ca6:	c8 01       	movw	r24, r16
    2ca8:	a1 96       	adiw	r28, 0x21	; 33
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	bf 90       	pop	r11
    2cc0:	af 90       	pop	r10
    2cc2:	9f 90       	pop	r9
    2cc4:	8f 90       	pop	r8
    2cc6:	7f 90       	pop	r7
    2cc8:	6f 90       	pop	r6
    2cca:	08 95       	ret

00002ccc <vfscanf>:
    2ccc:	4f 92       	push	r4
    2cce:	5f 92       	push	r5
    2cd0:	7f 92       	push	r7
    2cd2:	8f 92       	push	r8
    2cd4:	9f 92       	push	r9
    2cd6:	af 92       	push	r10
    2cd8:	bf 92       	push	r11
    2cda:	cf 92       	push	r12
    2cdc:	df 92       	push	r13
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	1f 92       	push	r1
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	6c 01       	movw	r12, r24
    2cf2:	2b 01       	movw	r4, r22
    2cf4:	5a 01       	movw	r10, r20
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	16 82       	std	Z+6, r1	; 0x06
    2cfa:	17 82       	std	Z+7, r1	; 0x07
    2cfc:	71 2c       	mov	r7, r1
    2cfe:	f6 01       	movw	r30, r12
    2d00:	f3 80       	ldd	r15, Z+3	; 0x03
    2d02:	f2 01       	movw	r30, r4
    2d04:	f3 fc       	sbrc	r15, 3
    2d06:	85 91       	lpm	r24, Z+
    2d08:	f3 fe       	sbrs	r15, 3
    2d0a:	81 91       	ld	r24, Z+
    2d0c:	38 2f       	mov	r19, r24
    2d0e:	2f 01       	movw	r4, r30
    2d10:	88 23       	and	r24, r24
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <vfscanf+0x4a>
    2d14:	e5 c0       	rjmp	.+458    	; 0x2ee0 <vfscanf+0x214>
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	39 83       	std	Y+1, r19	; 0x01
    2d1a:	3f d2       	rcall	.+1150   	; 0x319a <isspace>
    2d1c:	39 81       	ldd	r19, Y+1	; 0x01
    2d1e:	89 2b       	or	r24, r25
    2d20:	19 f0       	breq	.+6      	; 0x2d28 <vfscanf+0x5c>
    2d22:	c6 01       	movw	r24, r12
    2d24:	5e de       	rcall	.-836    	; 0x29e2 <skip_spaces>
    2d26:	eb cf       	rjmp	.-42     	; 0x2cfe <vfscanf+0x32>
    2d28:	35 32       	cpi	r19, 0x25	; 37
    2d2a:	41 f4       	brne	.+16     	; 0x2d3c <vfscanf+0x70>
    2d2c:	f2 01       	movw	r30, r4
    2d2e:	f3 fc       	sbrc	r15, 3
    2d30:	35 91       	lpm	r19, Z+
    2d32:	f3 fe       	sbrs	r15, 3
    2d34:	31 91       	ld	r19, Z+
    2d36:	2f 01       	movw	r4, r30
    2d38:	35 32       	cpi	r19, 0x25	; 37
    2d3a:	59 f4       	brne	.+22     	; 0x2d52 <vfscanf+0x86>
    2d3c:	c6 01       	movw	r24, r12
    2d3e:	39 83       	std	Y+1, r19	; 0x01
    2d40:	5c d2       	rcall	.+1208   	; 0x31fa <fgetc>
    2d42:	39 81       	ldd	r19, Y+1	; 0x01
    2d44:	97 fd       	sbrc	r25, 7
    2d46:	ca c0       	rjmp	.+404    	; 0x2edc <vfscanf+0x210>
    2d48:	38 17       	cp	r19, r24
    2d4a:	c9 f2       	breq	.-78     	; 0x2cfe <vfscanf+0x32>
    2d4c:	b6 01       	movw	r22, r12
    2d4e:	cb d2       	rcall	.+1430   	; 0x32e6 <ungetc>
    2d50:	c7 c0       	rjmp	.+398    	; 0x2ee0 <vfscanf+0x214>
    2d52:	3a 32       	cpi	r19, 0x2A	; 42
    2d54:	39 f4       	brne	.+14     	; 0x2d64 <vfscanf+0x98>
    2d56:	f3 fc       	sbrc	r15, 3
    2d58:	35 91       	lpm	r19, Z+
    2d5a:	f3 fe       	sbrs	r15, 3
    2d5c:	31 91       	ld	r19, Z+
    2d5e:	2f 01       	movw	r4, r30
    2d60:	51 e0       	ldi	r21, 0x01	; 1
    2d62:	01 c0       	rjmp	.+2      	; 0x2d66 <vfscanf+0x9a>
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	42 01       	movw	r8, r4
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	20 ed       	ldi	r18, 0xD0	; 208
    2d6c:	23 0f       	add	r18, r19
    2d6e:	2a 30       	cpi	r18, 0x0A	; 10
    2d70:	88 f4       	brcc	.+34     	; 0x2d94 <vfscanf+0xc8>
    2d72:	52 60       	ori	r21, 0x02	; 2
    2d74:	61 2f       	mov	r22, r17
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	59 83       	std	Y+1, r21	; 0x01
    2d80:	10 de       	rcall	.-992    	; 0x29a2 <mulacc>
    2d82:	16 2f       	mov	r17, r22
    2d84:	f4 01       	movw	r30, r8
    2d86:	f3 fc       	sbrc	r15, 3
    2d88:	35 91       	lpm	r19, Z+
    2d8a:	f3 fe       	sbrs	r15, 3
    2d8c:	31 91       	ld	r19, Z+
    2d8e:	4f 01       	movw	r8, r30
    2d90:	59 81       	ldd	r21, Y+1	; 0x01
    2d92:	eb cf       	rjmp	.-42     	; 0x2d6a <vfscanf+0x9e>
    2d94:	05 2f       	mov	r16, r21
    2d96:	23 2f       	mov	r18, r19
    2d98:	24 01       	movw	r4, r8
    2d9a:	51 ff       	sbrs	r21, 1
    2d9c:	03 c0       	rjmp	.+6      	; 0x2da4 <vfscanf+0xd8>
    2d9e:	11 11       	cpse	r17, r1
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <vfscanf+0xda>
    2da2:	9e c0       	rjmp	.+316    	; 0x2ee0 <vfscanf+0x214>
    2da4:	1f ef       	ldi	r17, 0xFF	; 255
    2da6:	38 36       	cpi	r19, 0x68	; 104
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <vfscanf+0xe4>
    2daa:	3c 36       	cpi	r19, 0x6C	; 108
    2dac:	59 f0       	breq	.+22     	; 0x2dc4 <vfscanf+0xf8>
    2dae:	11 c0       	rjmp	.+34     	; 0x2dd2 <vfscanf+0x106>
    2db0:	f4 01       	movw	r30, r8
    2db2:	f3 fc       	sbrc	r15, 3
    2db4:	25 91       	lpm	r18, Z+
    2db6:	f3 fe       	sbrs	r15, 3
    2db8:	21 91       	ld	r18, Z+
    2dba:	2f 01       	movw	r4, r30
    2dbc:	28 36       	cpi	r18, 0x68	; 104
    2dbe:	49 f4       	brne	.+18     	; 0x2dd2 <vfscanf+0x106>
    2dc0:	05 2f       	mov	r16, r21
    2dc2:	08 60       	ori	r16, 0x08	; 8
    2dc4:	04 60       	ori	r16, 0x04	; 4
    2dc6:	f2 01       	movw	r30, r4
    2dc8:	f3 fc       	sbrc	r15, 3
    2dca:	25 91       	lpm	r18, Z+
    2dcc:	f3 fe       	sbrs	r15, 3
    2dce:	21 91       	ld	r18, Z+
    2dd0:	2f 01       	movw	r4, r30
    2dd2:	22 23       	and	r18, r18
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <vfscanf+0x10c>
    2dd6:	84 c0       	rjmp	.+264    	; 0x2ee0 <vfscanf+0x214>
    2dd8:	62 2f       	mov	r22, r18
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	8a e0       	ldi	r24, 0x0A	; 10
    2dde:	92 e0       	ldi	r25, 0x02	; 2
    2de0:	29 83       	std	Y+1, r18	; 0x01
    2de2:	e3 d1       	rcall	.+966    	; 0x31aa <strchr_P>
    2de4:	29 81       	ldd	r18, Y+1	; 0x01
    2de6:	89 2b       	or	r24, r25
    2de8:	09 f4       	brne	.+2      	; 0x2dec <vfscanf+0x120>
    2dea:	7a c0       	rjmp	.+244    	; 0x2ee0 <vfscanf+0x214>
    2dec:	00 fd       	sbrc	r16, 0
    2dee:	07 c0       	rjmp	.+14     	; 0x2dfe <vfscanf+0x132>
    2df0:	f5 01       	movw	r30, r10
    2df2:	e0 80       	ld	r14, Z
    2df4:	f1 80       	ldd	r15, Z+1	; 0x01
    2df6:	c5 01       	movw	r24, r10
    2df8:	02 96       	adiw	r24, 0x02	; 2
    2dfa:	5c 01       	movw	r10, r24
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <vfscanf+0x136>
    2dfe:	e1 2c       	mov	r14, r1
    2e00:	f1 2c       	mov	r15, r1
    2e02:	2e 36       	cpi	r18, 0x6E	; 110
    2e04:	49 f4       	brne	.+18     	; 0x2e18 <vfscanf+0x14c>
    2e06:	f6 01       	movw	r30, r12
    2e08:	46 81       	ldd	r20, Z+6	; 0x06
    2e0a:	57 81       	ldd	r21, Z+7	; 0x07
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	20 2f       	mov	r18, r16
    2e12:	c7 01       	movw	r24, r14
    2e14:	ba dd       	rcall	.-1164   	; 0x298a <putval>
    2e16:	73 cf       	rjmp	.-282    	; 0x2cfe <vfscanf+0x32>
    2e18:	23 36       	cpi	r18, 0x63	; 99
    2e1a:	89 f4       	brne	.+34     	; 0x2e3e <vfscanf+0x172>
    2e1c:	01 ff       	sbrs	r16, 1
    2e1e:	11 e0       	ldi	r17, 0x01	; 1
    2e20:	c6 01       	movw	r24, r12
    2e22:	eb d1       	rcall	.+982    	; 0x31fa <fgetc>
    2e24:	97 fd       	sbrc	r25, 7
    2e26:	5a c0       	rjmp	.+180    	; 0x2edc <vfscanf+0x210>
    2e28:	e1 14       	cp	r14, r1
    2e2a:	f1 04       	cpc	r15, r1
    2e2c:	29 f0       	breq	.+10     	; 0x2e38 <vfscanf+0x16c>
    2e2e:	f7 01       	movw	r30, r14
    2e30:	80 83       	st	Z, r24
    2e32:	c7 01       	movw	r24, r14
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	7c 01       	movw	r14, r24
    2e38:	11 50       	subi	r17, 0x01	; 1
    2e3a:	91 f7       	brne	.-28     	; 0x2e20 <vfscanf+0x154>
    2e3c:	4b c0       	rjmp	.+150    	; 0x2ed4 <vfscanf+0x208>
    2e3e:	2b 35       	cpi	r18, 0x5B	; 91
    2e40:	51 f4       	brne	.+20     	; 0x2e56 <vfscanf+0x18a>
    2e42:	92 01       	movw	r18, r4
    2e44:	a7 01       	movw	r20, r14
    2e46:	61 2f       	mov	r22, r17
    2e48:	c6 01       	movw	r24, r12
    2e4a:	81 de       	rcall	.-766    	; 0x2b4e <conv_brk>
    2e4c:	2c 01       	movw	r4, r24
    2e4e:	89 2b       	or	r24, r25
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <vfscanf+0x188>
    2e52:	40 c0       	rjmp	.+128    	; 0x2ed4 <vfscanf+0x208>
    2e54:	3a c0       	rjmp	.+116    	; 0x2eca <vfscanf+0x1fe>
    2e56:	c6 01       	movw	r24, r12
    2e58:	29 83       	std	Y+1, r18	; 0x01
    2e5a:	c3 dd       	rcall	.-1146   	; 0x29e2 <skip_spaces>
    2e5c:	29 81       	ldd	r18, Y+1	; 0x01
    2e5e:	97 fd       	sbrc	r25, 7
    2e60:	3d c0       	rjmp	.+122    	; 0x2edc <vfscanf+0x210>
    2e62:	2f 36       	cpi	r18, 0x6F	; 111
    2e64:	41 f1       	breq	.+80     	; 0x2eb6 <vfscanf+0x1ea>
    2e66:	28 f4       	brcc	.+10     	; 0x2e72 <vfscanf+0x1a6>
    2e68:	24 36       	cpi	r18, 0x64	; 100
    2e6a:	19 f1       	breq	.+70     	; 0x2eb2 <vfscanf+0x1e6>
    2e6c:	29 36       	cpi	r18, 0x69	; 105
    2e6e:	31 f1       	breq	.+76     	; 0x2ebc <vfscanf+0x1f0>
    2e70:	24 c0       	rjmp	.+72     	; 0x2eba <vfscanf+0x1ee>
    2e72:	23 37       	cpi	r18, 0x73	; 115
    2e74:	69 f0       	breq	.+26     	; 0x2e90 <vfscanf+0x1c4>
    2e76:	25 37       	cpi	r18, 0x75	; 117
    2e78:	e1 f0       	breq	.+56     	; 0x2eb2 <vfscanf+0x1e6>
    2e7a:	1f c0       	rjmp	.+62     	; 0x2eba <vfscanf+0x1ee>
    2e7c:	e1 14       	cp	r14, r1
    2e7e:	f1 04       	cpc	r15, r1
    2e80:	29 f0       	breq	.+10     	; 0x2e8c <vfscanf+0x1c0>
    2e82:	f7 01       	movw	r30, r14
    2e84:	80 82       	st	Z, r8
    2e86:	c7 01       	movw	r24, r14
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	7c 01       	movw	r14, r24
    2e8c:	11 50       	subi	r17, 0x01	; 1
    2e8e:	59 f0       	breq	.+22     	; 0x2ea6 <vfscanf+0x1da>
    2e90:	c6 01       	movw	r24, r12
    2e92:	b3 d1       	rcall	.+870    	; 0x31fa <fgetc>
    2e94:	4c 01       	movw	r8, r24
    2e96:	97 fd       	sbrc	r25, 7
    2e98:	06 c0       	rjmp	.+12     	; 0x2ea6 <vfscanf+0x1da>
    2e9a:	7f d1       	rcall	.+766    	; 0x319a <isspace>
    2e9c:	89 2b       	or	r24, r25
    2e9e:	71 f3       	breq	.-36     	; 0x2e7c <vfscanf+0x1b0>
    2ea0:	b6 01       	movw	r22, r12
    2ea2:	c4 01       	movw	r24, r8
    2ea4:	20 d2       	rcall	.+1088   	; 0x32e6 <ungetc>
    2ea6:	e1 14       	cp	r14, r1
    2ea8:	f1 04       	cpc	r15, r1
    2eaa:	a1 f0       	breq	.+40     	; 0x2ed4 <vfscanf+0x208>
    2eac:	f7 01       	movw	r30, r14
    2eae:	10 82       	st	Z, r1
    2eb0:	11 c0       	rjmp	.+34     	; 0x2ed4 <vfscanf+0x208>
    2eb2:	00 62       	ori	r16, 0x20	; 32
    2eb4:	03 c0       	rjmp	.+6      	; 0x2ebc <vfscanf+0x1f0>
    2eb6:	00 61       	ori	r16, 0x10	; 16
    2eb8:	01 c0       	rjmp	.+2      	; 0x2ebc <vfscanf+0x1f0>
    2eba:	00 64       	ori	r16, 0x40	; 64
    2ebc:	20 2f       	mov	r18, r16
    2ebe:	a7 01       	movw	r20, r14
    2ec0:	61 2f       	mov	r22, r17
    2ec2:	c6 01       	movw	r24, r12
    2ec4:	a4 dd       	rcall	.-1208   	; 0x2a0e <conv_int>
    2ec6:	81 11       	cpse	r24, r1
    2ec8:	05 c0       	rjmp	.+10     	; 0x2ed4 <vfscanf+0x208>
    2eca:	f6 01       	movw	r30, r12
    2ecc:	83 81       	ldd	r24, Z+3	; 0x03
    2ece:	80 73       	andi	r24, 0x30	; 48
    2ed0:	29 f4       	brne	.+10     	; 0x2edc <vfscanf+0x210>
    2ed2:	06 c0       	rjmp	.+12     	; 0x2ee0 <vfscanf+0x214>
    2ed4:	00 fd       	sbrc	r16, 0
    2ed6:	13 cf       	rjmp	.-474    	; 0x2cfe <vfscanf+0x32>
    2ed8:	73 94       	inc	r7
    2eda:	11 cf       	rjmp	.-478    	; 0x2cfe <vfscanf+0x32>
    2edc:	77 20       	and	r7, r7
    2ede:	19 f0       	breq	.+6      	; 0x2ee6 <vfscanf+0x21a>
    2ee0:	87 2d       	mov	r24, r7
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	02 c0       	rjmp	.+4      	; 0x2eea <vfscanf+0x21e>
    2ee6:	8f ef       	ldi	r24, 0xFF	; 255
    2ee8:	9f ef       	ldi	r25, 0xFF	; 255
    2eea:	0f 90       	pop	r0
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	ff 90       	pop	r15
    2ef6:	ef 90       	pop	r14
    2ef8:	df 90       	pop	r13
    2efa:	cf 90       	pop	r12
    2efc:	bf 90       	pop	r11
    2efe:	af 90       	pop	r10
    2f00:	9f 90       	pop	r9
    2f02:	8f 90       	pop	r8
    2f04:	7f 90       	pop	r7
    2f06:	5f 90       	pop	r5
    2f08:	4f 90       	pop	r4
    2f0a:	08 95       	ret

00002f0c <calloc>:
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	86 9f       	mul	r24, r22
    2f16:	80 01       	movw	r16, r0
    2f18:	87 9f       	mul	r24, r23
    2f1a:	10 0d       	add	r17, r0
    2f1c:	96 9f       	mul	r25, r22
    2f1e:	10 0d       	add	r17, r0
    2f20:	11 24       	eor	r1, r1
    2f22:	c8 01       	movw	r24, r16
    2f24:	0d d0       	rcall	.+26     	; 0x2f40 <malloc>
    2f26:	ec 01       	movw	r28, r24
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	21 f0       	breq	.+8      	; 0x2f34 <calloc+0x28>
    2f2c:	a8 01       	movw	r20, r16
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	51 d1       	rcall	.+674    	; 0x31d6 <memset>
    2f34:	ce 01       	movw	r24, r28
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <malloc>:
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	82 30       	cpi	r24, 0x02	; 2
    2f46:	91 05       	cpc	r25, r1
    2f48:	10 f4       	brcc	.+4      	; 0x2f4e <malloc+0xe>
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	e0 91 c1 27 	lds	r30, 0x27C1
    2f52:	f0 91 c2 27 	lds	r31, 0x27C2
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	c0 e0       	ldi	r28, 0x00	; 0
    2f5c:	d0 e0       	ldi	r29, 0x00	; 0
    2f5e:	30 97       	sbiw	r30, 0x00	; 0
    2f60:	11 f1       	breq	.+68     	; 0x2fa6 <malloc+0x66>
    2f62:	40 81       	ld	r20, Z
    2f64:	51 81       	ldd	r21, Z+1	; 0x01
    2f66:	48 17       	cp	r20, r24
    2f68:	59 07       	cpc	r21, r25
    2f6a:	c0 f0       	brcs	.+48     	; 0x2f9c <malloc+0x5c>
    2f6c:	48 17       	cp	r20, r24
    2f6e:	59 07       	cpc	r21, r25
    2f70:	61 f4       	brne	.+24     	; 0x2f8a <malloc+0x4a>
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 97       	sbiw	r28, 0x00	; 0
    2f78:	19 f0       	breq	.+6      	; 0x2f80 <malloc+0x40>
    2f7a:	8a 83       	std	Y+2, r24	; 0x02
    2f7c:	9b 83       	std	Y+3, r25	; 0x03
    2f7e:	2b c0       	rjmp	.+86     	; 0x2fd6 <malloc+0x96>
    2f80:	80 93 c1 27 	sts	0x27C1, r24
    2f84:	90 93 c2 27 	sts	0x27C2, r25
    2f88:	26 c0       	rjmp	.+76     	; 0x2fd6 <malloc+0x96>
    2f8a:	21 15       	cp	r18, r1
    2f8c:	31 05       	cpc	r19, r1
    2f8e:	19 f0       	breq	.+6      	; 0x2f96 <malloc+0x56>
    2f90:	42 17       	cp	r20, r18
    2f92:	53 07       	cpc	r21, r19
    2f94:	18 f4       	brcc	.+6      	; 0x2f9c <malloc+0x5c>
    2f96:	9a 01       	movw	r18, r20
    2f98:	be 01       	movw	r22, r28
    2f9a:	df 01       	movw	r26, r30
    2f9c:	ef 01       	movw	r28, r30
    2f9e:	02 80       	ldd	r0, Z+2	; 0x02
    2fa0:	f3 81       	ldd	r31, Z+3	; 0x03
    2fa2:	e0 2d       	mov	r30, r0
    2fa4:	dc cf       	rjmp	.-72     	; 0x2f5e <malloc+0x1e>
    2fa6:	21 15       	cp	r18, r1
    2fa8:	31 05       	cpc	r19, r1
    2faa:	09 f1       	breq	.+66     	; 0x2fee <malloc+0xae>
    2fac:	28 1b       	sub	r18, r24
    2fae:	39 0b       	sbc	r19, r25
    2fb0:	24 30       	cpi	r18, 0x04	; 4
    2fb2:	31 05       	cpc	r19, r1
    2fb4:	90 f4       	brcc	.+36     	; 0x2fda <malloc+0x9a>
    2fb6:	12 96       	adiw	r26, 0x02	; 2
    2fb8:	8d 91       	ld	r24, X+
    2fba:	9c 91       	ld	r25, X
    2fbc:	13 97       	sbiw	r26, 0x03	; 3
    2fbe:	61 15       	cp	r22, r1
    2fc0:	71 05       	cpc	r23, r1
    2fc2:	21 f0       	breq	.+8      	; 0x2fcc <malloc+0x8c>
    2fc4:	fb 01       	movw	r30, r22
    2fc6:	82 83       	std	Z+2, r24	; 0x02
    2fc8:	93 83       	std	Z+3, r25	; 0x03
    2fca:	04 c0       	rjmp	.+8      	; 0x2fd4 <malloc+0x94>
    2fcc:	80 93 c1 27 	sts	0x27C1, r24
    2fd0:	90 93 c2 27 	sts	0x27C2, r25
    2fd4:	fd 01       	movw	r30, r26
    2fd6:	32 96       	adiw	r30, 0x02	; 2
    2fd8:	44 c0       	rjmp	.+136    	; 0x3062 <malloc+0x122>
    2fda:	fd 01       	movw	r30, r26
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	81 93       	st	Z+, r24
    2fe2:	91 93       	st	Z+, r25
    2fe4:	22 50       	subi	r18, 0x02	; 2
    2fe6:	31 09       	sbc	r19, r1
    2fe8:	2d 93       	st	X+, r18
    2fea:	3c 93       	st	X, r19
    2fec:	3a c0       	rjmp	.+116    	; 0x3062 <malloc+0x122>
    2fee:	20 91 bf 27 	lds	r18, 0x27BF
    2ff2:	30 91 c0 27 	lds	r19, 0x27C0
    2ff6:	23 2b       	or	r18, r19
    2ff8:	41 f4       	brne	.+16     	; 0x300a <malloc+0xca>
    2ffa:	20 91 02 20 	lds	r18, 0x2002
    2ffe:	30 91 03 20 	lds	r19, 0x2003
    3002:	20 93 bf 27 	sts	0x27BF, r18
    3006:	30 93 c0 27 	sts	0x27C0, r19
    300a:	20 91 00 20 	lds	r18, 0x2000
    300e:	30 91 01 20 	lds	r19, 0x2001
    3012:	21 15       	cp	r18, r1
    3014:	31 05       	cpc	r19, r1
    3016:	41 f4       	brne	.+16     	; 0x3028 <malloc+0xe8>
    3018:	2d b7       	in	r18, 0x3d	; 61
    301a:	3e b7       	in	r19, 0x3e	; 62
    301c:	40 91 04 20 	lds	r20, 0x2004
    3020:	50 91 05 20 	lds	r21, 0x2005
    3024:	24 1b       	sub	r18, r20
    3026:	35 0b       	sbc	r19, r21
    3028:	e0 91 bf 27 	lds	r30, 0x27BF
    302c:	f0 91 c0 27 	lds	r31, 0x27C0
    3030:	e2 17       	cp	r30, r18
    3032:	f3 07       	cpc	r31, r19
    3034:	a0 f4       	brcc	.+40     	; 0x305e <malloc+0x11e>
    3036:	2e 1b       	sub	r18, r30
    3038:	3f 0b       	sbc	r19, r31
    303a:	28 17       	cp	r18, r24
    303c:	39 07       	cpc	r19, r25
    303e:	78 f0       	brcs	.+30     	; 0x305e <malloc+0x11e>
    3040:	ac 01       	movw	r20, r24
    3042:	4e 5f       	subi	r20, 0xFE	; 254
    3044:	5f 4f       	sbci	r21, 0xFF	; 255
    3046:	24 17       	cp	r18, r20
    3048:	35 07       	cpc	r19, r21
    304a:	48 f0       	brcs	.+18     	; 0x305e <malloc+0x11e>
    304c:	4e 0f       	add	r20, r30
    304e:	5f 1f       	adc	r21, r31
    3050:	40 93 bf 27 	sts	0x27BF, r20
    3054:	50 93 c0 27 	sts	0x27C0, r21
    3058:	81 93       	st	Z+, r24
    305a:	91 93       	st	Z+, r25
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <malloc+0x122>
    305e:	e0 e0       	ldi	r30, 0x00	; 0
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	cf 01       	movw	r24, r30
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	08 95       	ret

0000306a <free>:
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	09 f4       	brne	.+2      	; 0x3078 <free+0xe>
    3076:	8c c0       	rjmp	.+280    	; 0x3190 <free+0x126>
    3078:	fc 01       	movw	r30, r24
    307a:	32 97       	sbiw	r30, 0x02	; 2
    307c:	12 82       	std	Z+2, r1	; 0x02
    307e:	13 82       	std	Z+3, r1	; 0x03
    3080:	00 91 c1 27 	lds	r16, 0x27C1
    3084:	10 91 c2 27 	lds	r17, 0x27C2
    3088:	01 15       	cp	r16, r1
    308a:	11 05       	cpc	r17, r1
    308c:	81 f4       	brne	.+32     	; 0x30ae <free+0x44>
    308e:	20 81       	ld	r18, Z
    3090:	31 81       	ldd	r19, Z+1	; 0x01
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	20 91 bf 27 	lds	r18, 0x27BF
    309a:	30 91 c0 27 	lds	r19, 0x27C0
    309e:	28 17       	cp	r18, r24
    30a0:	39 07       	cpc	r19, r25
    30a2:	79 f5       	brne	.+94     	; 0x3102 <free+0x98>
    30a4:	e0 93 bf 27 	sts	0x27BF, r30
    30a8:	f0 93 c0 27 	sts	0x27C0, r31
    30ac:	71 c0       	rjmp	.+226    	; 0x3190 <free+0x126>
    30ae:	d8 01       	movw	r26, r16
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	50 e0       	ldi	r21, 0x00	; 0
    30b4:	ae 17       	cp	r26, r30
    30b6:	bf 07       	cpc	r27, r31
    30b8:	50 f4       	brcc	.+20     	; 0x30ce <free+0x64>
    30ba:	12 96       	adiw	r26, 0x02	; 2
    30bc:	2d 91       	ld	r18, X+
    30be:	3c 91       	ld	r19, X
    30c0:	13 97       	sbiw	r26, 0x03	; 3
    30c2:	ad 01       	movw	r20, r26
    30c4:	21 15       	cp	r18, r1
    30c6:	31 05       	cpc	r19, r1
    30c8:	09 f1       	breq	.+66     	; 0x310c <free+0xa2>
    30ca:	d9 01       	movw	r26, r18
    30cc:	f3 cf       	rjmp	.-26     	; 0x30b4 <free+0x4a>
    30ce:	9d 01       	movw	r18, r26
    30d0:	da 01       	movw	r26, r20
    30d2:	22 83       	std	Z+2, r18	; 0x02
    30d4:	33 83       	std	Z+3, r19	; 0x03
    30d6:	60 81       	ld	r22, Z
    30d8:	71 81       	ldd	r23, Z+1	; 0x01
    30da:	86 0f       	add	r24, r22
    30dc:	97 1f       	adc	r25, r23
    30de:	82 17       	cp	r24, r18
    30e0:	93 07       	cpc	r25, r19
    30e2:	69 f4       	brne	.+26     	; 0x30fe <free+0x94>
    30e4:	ec 01       	movw	r28, r24
    30e6:	28 81       	ld	r18, Y
    30e8:	39 81       	ldd	r19, Y+1	; 0x01
    30ea:	26 0f       	add	r18, r22
    30ec:	37 1f       	adc	r19, r23
    30ee:	2e 5f       	subi	r18, 0xFE	; 254
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	20 83       	st	Z, r18
    30f4:	31 83       	std	Z+1, r19	; 0x01
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	9b 81       	ldd	r25, Y+3	; 0x03
    30fa:	82 83       	std	Z+2, r24	; 0x02
    30fc:	93 83       	std	Z+3, r25	; 0x03
    30fe:	45 2b       	or	r20, r21
    3100:	29 f4       	brne	.+10     	; 0x310c <free+0xa2>
    3102:	e0 93 c1 27 	sts	0x27C1, r30
    3106:	f0 93 c2 27 	sts	0x27C2, r31
    310a:	42 c0       	rjmp	.+132    	; 0x3190 <free+0x126>
    310c:	12 96       	adiw	r26, 0x02	; 2
    310e:	ed 93       	st	X+, r30
    3110:	fc 93       	st	X, r31
    3112:	13 97       	sbiw	r26, 0x03	; 3
    3114:	ed 01       	movw	r28, r26
    3116:	49 91       	ld	r20, Y+
    3118:	59 91       	ld	r21, Y+
    311a:	9e 01       	movw	r18, r28
    311c:	24 0f       	add	r18, r20
    311e:	35 1f       	adc	r19, r21
    3120:	e2 17       	cp	r30, r18
    3122:	f3 07       	cpc	r31, r19
    3124:	71 f4       	brne	.+28     	; 0x3142 <free+0xd8>
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	84 0f       	add	r24, r20
    312c:	95 1f       	adc	r25, r21
    312e:	02 96       	adiw	r24, 0x02	; 2
    3130:	8d 93       	st	X+, r24
    3132:	9c 93       	st	X, r25
    3134:	11 97       	sbiw	r26, 0x01	; 1
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	12 96       	adiw	r26, 0x02	; 2
    313c:	8d 93       	st	X+, r24
    313e:	9c 93       	st	X, r25
    3140:	13 97       	sbiw	r26, 0x03	; 3
    3142:	e0 e0       	ldi	r30, 0x00	; 0
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	d8 01       	movw	r26, r16
    3148:	12 96       	adiw	r26, 0x02	; 2
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	13 97       	sbiw	r26, 0x03	; 3
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	19 f0       	breq	.+6      	; 0x315a <free+0xf0>
    3154:	f8 01       	movw	r30, r16
    3156:	8c 01       	movw	r16, r24
    3158:	f6 cf       	rjmp	.-20     	; 0x3146 <free+0xdc>
    315a:	8d 91       	ld	r24, X+
    315c:	9c 91       	ld	r25, X
    315e:	98 01       	movw	r18, r16
    3160:	2e 5f       	subi	r18, 0xFE	; 254
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	82 0f       	add	r24, r18
    3166:	93 1f       	adc	r25, r19
    3168:	20 91 bf 27 	lds	r18, 0x27BF
    316c:	30 91 c0 27 	lds	r19, 0x27C0
    3170:	28 17       	cp	r18, r24
    3172:	39 07       	cpc	r19, r25
    3174:	69 f4       	brne	.+26     	; 0x3190 <free+0x126>
    3176:	30 97       	sbiw	r30, 0x00	; 0
    3178:	29 f4       	brne	.+10     	; 0x3184 <free+0x11a>
    317a:	10 92 c1 27 	sts	0x27C1, r1
    317e:	10 92 c2 27 	sts	0x27C2, r1
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <free+0x11e>
    3184:	12 82       	std	Z+2, r1	; 0x02
    3186:	13 82       	std	Z+3, r1	; 0x03
    3188:	00 93 bf 27 	sts	0x27BF, r16
    318c:	10 93 c0 27 	sts	0x27C0, r17
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	1f 91       	pop	r17
    3196:	0f 91       	pop	r16
    3198:	08 95       	ret

0000319a <isspace>:
    319a:	91 11       	cpse	r25, r1
    319c:	1b c1       	rjmp	.+566    	; 0x33d4 <__ctype_isfalse>
    319e:	80 32       	cpi	r24, 0x20	; 32
    31a0:	19 f0       	breq	.+6      	; 0x31a8 <isspace+0xe>
    31a2:	89 50       	subi	r24, 0x09	; 9
    31a4:	85 50       	subi	r24, 0x05	; 5
    31a6:	d0 f7       	brcc	.-12     	; 0x319c <isspace+0x2>
    31a8:	08 95       	ret

000031aa <strchr_P>:
    31aa:	fc 01       	movw	r30, r24
    31ac:	05 90       	lpm	r0, Z+
    31ae:	06 16       	cp	r0, r22
    31b0:	21 f0       	breq	.+8      	; 0x31ba <strchr_P+0x10>
    31b2:	00 20       	and	r0, r0
    31b4:	d9 f7       	brne	.-10     	; 0x31ac <strchr_P+0x2>
    31b6:	c0 01       	movw	r24, r0
    31b8:	08 95       	ret
    31ba:	31 97       	sbiw	r30, 0x01	; 1
    31bc:	cf 01       	movw	r24, r30
    31be:	08 95       	ret

000031c0 <strnlen_P>:
    31c0:	fc 01       	movw	r30, r24
    31c2:	05 90       	lpm	r0, Z+
    31c4:	61 50       	subi	r22, 0x01	; 1
    31c6:	70 40       	sbci	r23, 0x00	; 0
    31c8:	01 10       	cpse	r0, r1
    31ca:	d8 f7       	brcc	.-10     	; 0x31c2 <strnlen_P+0x2>
    31cc:	80 95       	com	r24
    31ce:	90 95       	com	r25
    31d0:	8e 0f       	add	r24, r30
    31d2:	9f 1f       	adc	r25, r31
    31d4:	08 95       	ret

000031d6 <memset>:
    31d6:	dc 01       	movw	r26, r24
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <memset+0x6>
    31da:	6d 93       	st	X+, r22
    31dc:	41 50       	subi	r20, 0x01	; 1
    31de:	50 40       	sbci	r21, 0x00	; 0
    31e0:	e0 f7       	brcc	.-8      	; 0x31da <memset+0x4>
    31e2:	08 95       	ret

000031e4 <strnlen>:
    31e4:	fc 01       	movw	r30, r24
    31e6:	61 50       	subi	r22, 0x01	; 1
    31e8:	70 40       	sbci	r23, 0x00	; 0
    31ea:	01 90       	ld	r0, Z+
    31ec:	01 10       	cpse	r0, r1
    31ee:	d8 f7       	brcc	.-10     	; 0x31e6 <strnlen+0x2>
    31f0:	80 95       	com	r24
    31f2:	90 95       	com	r25
    31f4:	8e 0f       	add	r24, r30
    31f6:	9f 1f       	adc	r25, r31
    31f8:	08 95       	ret

000031fa <fgetc>:
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	ec 01       	movw	r28, r24
    3200:	2b 81       	ldd	r18, Y+3	; 0x03
    3202:	20 ff       	sbrs	r18, 0
    3204:	33 c0       	rjmp	.+102    	; 0x326c <fgetc+0x72>
    3206:	26 ff       	sbrs	r18, 6
    3208:	0a c0       	rjmp	.+20     	; 0x321e <fgetc+0x24>
    320a:	2f 7b       	andi	r18, 0xBF	; 191
    320c:	2b 83       	std	Y+3, r18	; 0x03
    320e:	8e 81       	ldd	r24, Y+6	; 0x06
    3210:	9f 81       	ldd	r25, Y+7	; 0x07
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	8e 83       	std	Y+6, r24	; 0x06
    3216:	9f 83       	std	Y+7, r25	; 0x07
    3218:	8a 81       	ldd	r24, Y+2	; 0x02
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	29 c0       	rjmp	.+82     	; 0x3270 <fgetc+0x76>
    321e:	22 ff       	sbrs	r18, 2
    3220:	0f c0       	rjmp	.+30     	; 0x3240 <fgetc+0x46>
    3222:	e8 81       	ld	r30, Y
    3224:	f9 81       	ldd	r31, Y+1	; 0x01
    3226:	80 81       	ld	r24, Z
    3228:	08 2e       	mov	r0, r24
    322a:	00 0c       	add	r0, r0
    322c:	99 0b       	sbc	r25, r25
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	19 f4       	brne	.+6      	; 0x3238 <fgetc+0x3e>
    3232:	20 62       	ori	r18, 0x20	; 32
    3234:	2b 83       	std	Y+3, r18	; 0x03
    3236:	1a c0       	rjmp	.+52     	; 0x326c <fgetc+0x72>
    3238:	31 96       	adiw	r30, 0x01	; 1
    323a:	e8 83       	st	Y, r30
    323c:	f9 83       	std	Y+1, r31	; 0x01
    323e:	0e c0       	rjmp	.+28     	; 0x325c <fgetc+0x62>
    3240:	ea 85       	ldd	r30, Y+10	; 0x0a
    3242:	fb 85       	ldd	r31, Y+11	; 0x0b
    3244:	19 95       	eicall
    3246:	97 ff       	sbrs	r25, 7
    3248:	09 c0       	rjmp	.+18     	; 0x325c <fgetc+0x62>
    324a:	2b 81       	ldd	r18, Y+3	; 0x03
    324c:	01 96       	adiw	r24, 0x01	; 1
    324e:	11 f0       	breq	.+4      	; 0x3254 <fgetc+0x5a>
    3250:	80 e2       	ldi	r24, 0x20	; 32
    3252:	01 c0       	rjmp	.+2      	; 0x3256 <fgetc+0x5c>
    3254:	80 e1       	ldi	r24, 0x10	; 16
    3256:	82 2b       	or	r24, r18
    3258:	8b 83       	std	Y+3, r24	; 0x03
    325a:	08 c0       	rjmp	.+16     	; 0x326c <fgetc+0x72>
    325c:	2e 81       	ldd	r18, Y+6	; 0x06
    325e:	3f 81       	ldd	r19, Y+7	; 0x07
    3260:	2f 5f       	subi	r18, 0xFF	; 255
    3262:	3f 4f       	sbci	r19, 0xFF	; 255
    3264:	2e 83       	std	Y+6, r18	; 0x06
    3266:	3f 83       	std	Y+7, r19	; 0x07
    3268:	99 27       	eor	r25, r25
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <fgetc+0x76>
    326c:	8f ef       	ldi	r24, 0xFF	; 255
    326e:	9f ef       	ldi	r25, 0xFF	; 255
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	08 95       	ret

00003276 <fputc>:
    3276:	0f 93       	push	r16
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	fb 01       	movw	r30, r22
    3280:	23 81       	ldd	r18, Z+3	; 0x03
    3282:	21 fd       	sbrc	r18, 1
    3284:	03 c0       	rjmp	.+6      	; 0x328c <fputc+0x16>
    3286:	8f ef       	ldi	r24, 0xFF	; 255
    3288:	9f ef       	ldi	r25, 0xFF	; 255
    328a:	28 c0       	rjmp	.+80     	; 0x32dc <fputc+0x66>
    328c:	22 ff       	sbrs	r18, 2
    328e:	16 c0       	rjmp	.+44     	; 0x32bc <fputc+0x46>
    3290:	46 81       	ldd	r20, Z+6	; 0x06
    3292:	57 81       	ldd	r21, Z+7	; 0x07
    3294:	24 81       	ldd	r18, Z+4	; 0x04
    3296:	35 81       	ldd	r19, Z+5	; 0x05
    3298:	42 17       	cp	r20, r18
    329a:	53 07       	cpc	r21, r19
    329c:	44 f4       	brge	.+16     	; 0x32ae <fputc+0x38>
    329e:	a0 81       	ld	r26, Z
    32a0:	b1 81       	ldd	r27, Z+1	; 0x01
    32a2:	9d 01       	movw	r18, r26
    32a4:	2f 5f       	subi	r18, 0xFF	; 255
    32a6:	3f 4f       	sbci	r19, 0xFF	; 255
    32a8:	20 83       	st	Z, r18
    32aa:	31 83       	std	Z+1, r19	; 0x01
    32ac:	8c 93       	st	X, r24
    32ae:	26 81       	ldd	r18, Z+6	; 0x06
    32b0:	37 81       	ldd	r19, Z+7	; 0x07
    32b2:	2f 5f       	subi	r18, 0xFF	; 255
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	26 83       	std	Z+6, r18	; 0x06
    32b8:	37 83       	std	Z+7, r19	; 0x07
    32ba:	10 c0       	rjmp	.+32     	; 0x32dc <fputc+0x66>
    32bc:	eb 01       	movw	r28, r22
    32be:	09 2f       	mov	r16, r25
    32c0:	18 2f       	mov	r17, r24
    32c2:	00 84       	ldd	r0, Z+8	; 0x08
    32c4:	f1 85       	ldd	r31, Z+9	; 0x09
    32c6:	e0 2d       	mov	r30, r0
    32c8:	19 95       	eicall
    32ca:	89 2b       	or	r24, r25
    32cc:	e1 f6       	brne	.-72     	; 0x3286 <fputc+0x10>
    32ce:	8e 81       	ldd	r24, Y+6	; 0x06
    32d0:	9f 81       	ldd	r25, Y+7	; 0x07
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	8e 83       	std	Y+6, r24	; 0x06
    32d6:	9f 83       	std	Y+7, r25	; 0x07
    32d8:	81 2f       	mov	r24, r17
    32da:	90 2f       	mov	r25, r16
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	0f 91       	pop	r16
    32e4:	08 95       	ret

000032e6 <ungetc>:
    32e6:	fb 01       	movw	r30, r22
    32e8:	23 81       	ldd	r18, Z+3	; 0x03
    32ea:	20 ff       	sbrs	r18, 0
    32ec:	12 c0       	rjmp	.+36     	; 0x3312 <ungetc+0x2c>
    32ee:	26 fd       	sbrc	r18, 6
    32f0:	10 c0       	rjmp	.+32     	; 0x3312 <ungetc+0x2c>
    32f2:	8f 3f       	cpi	r24, 0xFF	; 255
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	93 07       	cpc	r25, r19
    32f8:	61 f0       	breq	.+24     	; 0x3312 <ungetc+0x2c>
    32fa:	82 83       	std	Z+2, r24	; 0x02
    32fc:	2f 7d       	andi	r18, 0xDF	; 223
    32fe:	20 64       	ori	r18, 0x40	; 64
    3300:	23 83       	std	Z+3, r18	; 0x03
    3302:	26 81       	ldd	r18, Z+6	; 0x06
    3304:	37 81       	ldd	r19, Z+7	; 0x07
    3306:	21 50       	subi	r18, 0x01	; 1
    3308:	31 09       	sbc	r19, r1
    330a:	26 83       	std	Z+6, r18	; 0x06
    330c:	37 83       	std	Z+7, r19	; 0x07
    330e:	99 27       	eor	r25, r25
    3310:	08 95       	ret
    3312:	8f ef       	ldi	r24, 0xFF	; 255
    3314:	9f ef       	ldi	r25, 0xFF	; 255
    3316:	08 95       	ret

00003318 <__ultoa_invert>:
    3318:	fa 01       	movw	r30, r20
    331a:	aa 27       	eor	r26, r26
    331c:	28 30       	cpi	r18, 0x08	; 8
    331e:	51 f1       	breq	.+84     	; 0x3374 <__ultoa_invert+0x5c>
    3320:	20 31       	cpi	r18, 0x10	; 16
    3322:	81 f1       	breq	.+96     	; 0x3384 <__ultoa_invert+0x6c>
    3324:	e8 94       	clt
    3326:	6f 93       	push	r22
    3328:	6e 7f       	andi	r22, 0xFE	; 254
    332a:	6e 5f       	subi	r22, 0xFE	; 254
    332c:	7f 4f       	sbci	r23, 0xFF	; 255
    332e:	8f 4f       	sbci	r24, 0xFF	; 255
    3330:	9f 4f       	sbci	r25, 0xFF	; 255
    3332:	af 4f       	sbci	r26, 0xFF	; 255
    3334:	b1 e0       	ldi	r27, 0x01	; 1
    3336:	3e d0       	rcall	.+124    	; 0x33b4 <__ultoa_invert+0x9c>
    3338:	b4 e0       	ldi	r27, 0x04	; 4
    333a:	3c d0       	rcall	.+120    	; 0x33b4 <__ultoa_invert+0x9c>
    333c:	67 0f       	add	r22, r23
    333e:	78 1f       	adc	r23, r24
    3340:	89 1f       	adc	r24, r25
    3342:	9a 1f       	adc	r25, r26
    3344:	a1 1d       	adc	r26, r1
    3346:	68 0f       	add	r22, r24
    3348:	79 1f       	adc	r23, r25
    334a:	8a 1f       	adc	r24, r26
    334c:	91 1d       	adc	r25, r1
    334e:	a1 1d       	adc	r26, r1
    3350:	6a 0f       	add	r22, r26
    3352:	71 1d       	adc	r23, r1
    3354:	81 1d       	adc	r24, r1
    3356:	91 1d       	adc	r25, r1
    3358:	a1 1d       	adc	r26, r1
    335a:	20 d0       	rcall	.+64     	; 0x339c <__ultoa_invert+0x84>
    335c:	09 f4       	brne	.+2      	; 0x3360 <__ultoa_invert+0x48>
    335e:	68 94       	set
    3360:	3f 91       	pop	r19
    3362:	2a e0       	ldi	r18, 0x0A	; 10
    3364:	26 9f       	mul	r18, r22
    3366:	11 24       	eor	r1, r1
    3368:	30 19       	sub	r19, r0
    336a:	30 5d       	subi	r19, 0xD0	; 208
    336c:	31 93       	st	Z+, r19
    336e:	de f6       	brtc	.-74     	; 0x3326 <__ultoa_invert+0xe>
    3370:	cf 01       	movw	r24, r30
    3372:	08 95       	ret
    3374:	46 2f       	mov	r20, r22
    3376:	47 70       	andi	r20, 0x07	; 7
    3378:	40 5d       	subi	r20, 0xD0	; 208
    337a:	41 93       	st	Z+, r20
    337c:	b3 e0       	ldi	r27, 0x03	; 3
    337e:	0f d0       	rcall	.+30     	; 0x339e <__ultoa_invert+0x86>
    3380:	c9 f7       	brne	.-14     	; 0x3374 <__ultoa_invert+0x5c>
    3382:	f6 cf       	rjmp	.-20     	; 0x3370 <__ultoa_invert+0x58>
    3384:	46 2f       	mov	r20, r22
    3386:	4f 70       	andi	r20, 0x0F	; 15
    3388:	40 5d       	subi	r20, 0xD0	; 208
    338a:	4a 33       	cpi	r20, 0x3A	; 58
    338c:	18 f0       	brcs	.+6      	; 0x3394 <__ultoa_invert+0x7c>
    338e:	49 5d       	subi	r20, 0xD9	; 217
    3390:	31 fd       	sbrc	r19, 1
    3392:	40 52       	subi	r20, 0x20	; 32
    3394:	41 93       	st	Z+, r20
    3396:	02 d0       	rcall	.+4      	; 0x339c <__ultoa_invert+0x84>
    3398:	a9 f7       	brne	.-22     	; 0x3384 <__ultoa_invert+0x6c>
    339a:	ea cf       	rjmp	.-44     	; 0x3370 <__ultoa_invert+0x58>
    339c:	b4 e0       	ldi	r27, 0x04	; 4
    339e:	a6 95       	lsr	r26
    33a0:	97 95       	ror	r25
    33a2:	87 95       	ror	r24
    33a4:	77 95       	ror	r23
    33a6:	67 95       	ror	r22
    33a8:	ba 95       	dec	r27
    33aa:	c9 f7       	brne	.-14     	; 0x339e <__ultoa_invert+0x86>
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	61 05       	cpc	r22, r1
    33b0:	71 05       	cpc	r23, r1
    33b2:	08 95       	ret
    33b4:	9b 01       	movw	r18, r22
    33b6:	ac 01       	movw	r20, r24
    33b8:	0a 2e       	mov	r0, r26
    33ba:	06 94       	lsr	r0
    33bc:	57 95       	ror	r21
    33be:	47 95       	ror	r20
    33c0:	37 95       	ror	r19
    33c2:	27 95       	ror	r18
    33c4:	ba 95       	dec	r27
    33c6:	c9 f7       	brne	.-14     	; 0x33ba <__ultoa_invert+0xa2>
    33c8:	62 0f       	add	r22, r18
    33ca:	73 1f       	adc	r23, r19
    33cc:	84 1f       	adc	r24, r20
    33ce:	95 1f       	adc	r25, r21
    33d0:	a0 1d       	adc	r26, r0
    33d2:	08 95       	ret

000033d4 <__ctype_isfalse>:
    33d4:	99 27       	eor	r25, r25
    33d6:	88 27       	eor	r24, r24

000033d8 <__ctype_istrue>:
    33d8:	08 95       	ret

000033da <_exit>:
    33da:	f8 94       	cli

000033dc <__stop_program>:
    33dc:	ff cf       	rjmp	.-2      	; 0x33dc <__stop_program>
